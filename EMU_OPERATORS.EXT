' - - -  REPLACEMENT VALUES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dim Shared As ULong IULTR=511,IULRT=510,IURWR=509 
Dim Shared As ULong IULRADD=508,IULXADD=507,IULRADC=506,IULXADC=505
Dim Shared As ULong IULRSUB=504,IULXSUB=503,IULRSBC=502,IULXSBC=501
Dim Shared As ULong IULLR=500,IULRL=499
Dim Shared As ULong IULRAND=498,IULXAND=497
Dim Shared As ULong IULRXOR=496,IULXXOR=495
Dim Shared As ULong IULROR=494,IULXOR=493
Dim Shared As ULong IULRCP=492,IULXCP=491

' SO ASSIGN EXACT NUMBERS IN SWITCH CASE TO OPERATORS HERE, CASE ZERO FOR ERROR TRACKING
Dim Shared As ULong IUABC=1,IUADE=2,IUAHL=3,IUAWZ=4,IUAAD=5,IUASP=6,IUAIX=7,IUAIY=8,IUAPCI=9 ' SET ADDRESS BUS 
Dim Shared As ULong IUFET=10,IUAIRIUF=11,IURALF=12,IULTB=13,IULBT=21 ' ULRT++8 SO 29 NEXT
Dim Shared As ULong IUALF=19,IULRBT=21,IULRCT=22,IULRDT=23,IULRET=24,IULRHT=25,IULRLT=26,IULRAT=28,IUHALT=27
Dim Shared As ULong IUBWR=29,IUCWR=30,IUDWR=31,IUEWR=32,IUHWR=33,IULWR=34,IUOWR=35,IUAWR=36 ' JUST USUAL REGS AWHILE
Dim Shared As ULong IURCW=37,IUWCW=38,IUDOW=39,IUNOP=40,IUTRD=41,IUTWR=42 ' MEM OPS AND UNOP
Dim Shared As ULong IULSLT=43,IULSHT=44 
Dim Shared As ULong IULWE=45,IULWA=46,IULWT=47,IULZT=48,IULZN=49,IULW0=50
Dim Shared As ULong IUWZI=51,IUBCI=52,IUDEI=53,IUHLI=54,IUSPI=55,IUADI=56,IUIXI=57,IUIYI=58
Dim Shared As ULong IUADIWZ=59,IUADIPC=60,IUADD=61,IUBCD=62,IUBCDPV=63,IUDED=64,IUHLD=65,IUSPD=66,IUWZD=67,IUIXD=68,IUIYD=69
Dim Shared As ULong IULDBC=70,IULDDE=71,IULDHL=72,IULDSP=73,IULDWZ=74,IULDPC=75,IULDIX=76,IULDIY=77
Dim Shared As ULong IULBCD=78,IULDED=79,IULHLD=80,IULWZD=81,IULSPD=82,IULPCD=83,IULIXD=84,IULIYD=85
Dim Shared As ULong IUPFDD=86,IUPFFD=87,IUPFCB=88,IUPFED=89,IUPFDC=90,IUPFFC=91 ' PREFIXES
Dim Shared As ULong IUSLWR=92,IUSHWR=93,IUPLWR=94,IUPHWR=95,IUXHWR=96,IUXLWR=97,IUYHWR=98,IUYLWR=99 ' EXTRA REGISTER WRITE TO MEM
Dim Shared As ULong IULLRB=100,IULLRC=101,IULLRD=102,IULLRE=103,IULLRH=104,IULLRL=105,IULLRT=106,IULLRA=107
Dim Shared As ULong IULLXL=108,IULLXH=109,IULLYL=110,IULLYH=111,IULLPL=112,IULLPH=113
Dim Shared As ULong IULRIA=114,IULRRA=115
Dim Shared As ULong IULRBL=116,IULRCL=117,IULRDL=118,IULREL=119,IULRHL=120,IULRLL=121,IULRTL=122,IULRAL=123
Dim Shared As ULong IULRZL=124,IULRWL=125,IULXLL=126,IULXHL=127,IULYLL=128,IULYHL=129
Dim Shared As ULong IULRFT=130,IULXLT=131,IULXHT=132,IULYLT=133,IULYHT=134,IULTXH=135,IULTXL=136,IULTYH=137,IULTYL=138
Dim Shared As ULong IULBADD=139,IULTADD=145,IULXSADD=147,IULBADC=153,IULTADC=159,IULXSADC=161 ' X ORDER  SPH-SPL-IXH-IXL-IYH-IYL NEED REVERSE
Dim Shared As ULong IULBSUB=167,IULTSUB=173,IULXSSUB=175,IULBSBC=181,IULTSBC=187,IULXSSBC=189,IUFQADD=195
Dim Shared As ULong IUOINC=196,IUODEC=197,IUFQID=198
Dim Shared As ULong IULBAND=199,IULTAND=205,IULXSAND=207
Dim Shared As ULong IULBXOR=213,IULTXOR=219,IULXSXOR=221
Dim Shared As ULong IULBOR=227,IULTOR=233,IULXSOR=235
Dim Shared As ULong IULBCP=241,IULTCP=247,IULXSCP=249
Dim Shared As ULong IUFQSH=255,IUORLC=256,IUORRC=257,IUORL=258,IUORR=259
Dim Shared As ULong IUOSLA=260,IUOSRA=261,IUOSLL=262,IUOSRL=263,IUORES=264,IUOSET=265
Dim Shared As ULong IULTSADD=266,IUOSADDC=267,IUOBIT=268,IUODAA=269
Dim Shared As ULong SIGUWZ=270,SIGUHL=271,SIGUIX=272,SIGUIY=273,SIGSK6=274,SIGSK6Z=275
Dim Shared As ULong IECCZ=276,IECCNZ=277,IECCC=278,IECCNC=279,IECCPE=280,IECCPO=281,IECCM=282,IECCP=283
Dim Shared As ULong ISWCCNZ=284,ISWCCZ=285,ISWCCNC=286,ISWCCC=287,ISWCCPE=288,ISWCCPO=289,ISWCCP=290,ISWCCM=291
Dim Shared As ULong IUOCPL=292,IUOSCF=293,IUOCCF=294,IUEXA=295,IUEXX=296,IUDFF=297,IUSFF=298,IUCFF=299,IUXHD=300
Dim Shared As ULong IUNWR=301,IUTIO=302,IUPOW=303,IUFWR=304,IUONEG=305,IULLRI=306,IULLRR=307,IUFQIR=308
Dim Shared As ULong IUOQIO=309,IUORVN=310,IULANLL=311,IULTNLL=312,IULANLH=313,IULTNHL=314
Dim Shared As ULong IUIM0=315,IUIM1=316,IUIM2=317,IULAQLD=318,IULTCPQ=319,IUOQPV=320 
Dim Shared As ULong IUADDWZ=321,IUTADDQI=322,IUTADDQD=323,IULLRZ=324


'Dim Shared As ULong IULTX

' UOP SETUP COMMANDS (TO ROOTs), EACH ROOT IS 256 ENTRIES OF UINT64 POINTERS (TO PMOS)
Sub DEFMAIN(OFFS As ULongInt):*(MAIN+OFFS)=PMCUR:End Sub
Sub DEFDD(OFFS As ULongInt):::*(DD+OFFS)=PMCUR:End Sub
Sub DEFFD(OFFS As ULongInt):::*(FD+OFFS)=PMCUR:End Sub
Sub DEFCB(OFFS As ULongInt):::*(CB+OFFS)=PMCUR:End Sub
Sub DEFED(OFFS As ULongInt):::*(ED+OFFS)=PMCUR:End Sub
Sub DEFDDCB(OFFS As ULongInt):*(DDCB+OFFS)=PMCUR:End Sub
Sub DEFFDCB(OFFS As ULongInt):*(FDCB+OFFS)=PMCUR:End Sub

Sub HID():End Sub

'If *(CB+OFFS)=PMOS Then Print "OK "; Else Print Hex(OFFS,2);"-";Right("     "+Str(PMCUR-PMOS),5),
'Print PMCUR-PMOS;" ";

' UOP SIGNALS
Sub PAR()::*PMCUR+=SIGPAR:End Sub ' NEXT UOP IS PARALLEL, ALLOW MULTIPLE USE BEFORE UOP
Sub EXT()::*PMCUR=SIGEXT:End Sub ' MARK END OF UOP AND RUN ALL SEQ UOP IN PARALLEL, USUALLY LATE 1T AND 2T ALUOP AND FLUSH, NO MORE
Sub DONE():*(PMCUR-1)+=SIGEND:End Sub ' MARK END OF UOP

' MICROCODE "WORDS"

' NOW WORDS NOT SIGNALS
Sub USEWZ():*PMCUR+=SIGUWZ:PMCUR+=1:End Sub ' STATE THAT NEXT M1 SET ADDR BY 
Sub USEHL():*PMCUR+=SIGUHL:PMCUR+=1:End Sub ' STATE THAT NEXT M1 SET ADDR BY 
Sub USEIX():*PMCUR+=SIGUIX:PMCUR+=1:End Sub ' STATE THAT NEXT M1 SET ADDR BY 
Sub USEIY():*PMCUR+=SIGUIY:PMCUR+=1:End Sub ' STATE THAT NEXT M1 SET ADDR BY 
Sub SKIP6PE():*PMCUR+=SIGSK6:PMCUR+=1:End Sub ' SKIP 6 UOPS TO EXECUTE LDIRs 
Sub SKIP6PEZ():*PMCUR+=SIGSK6Z:PMCUR+=1:End Sub ' SKIP 6 UOPS TO EXECUTE CPIRs

Sub ECCZ()::*PMCUR+=IECCZ:PMCUR+=1:End Sub ' UOP SEQ ENDS IMMED IF CC SET TO AS
Sub ECCNZ():*PMCUR+=IECCNZ:PMCUR+=1:End Sub ' UOP SEQ ENDS IMMED IF CC SET TO AS
Sub ECCC()::*PMCUR+=IECCC:PMCUR+=1:End Sub ' UOP SEQ ENDS IMMED IF CC SET TO AS
Sub ECCNC():*PMCUR+=IECCNC:PMCUR+=1:End Sub ' UOP SEQ ENDS IMMED IF CC SET TO AS
Sub ECCPE():*PMCUR+=IECCPE:PMCUR+=1:End Sub ' UOP SEQ ENDS IMMED IF CC SET TO AS
Sub ECCPO():*PMCUR+=IECCPO:PMCUR+=1:End Sub ' UOP SEQ ENDS IMMED IF CC SET TO AS
Sub ECCM()::*PMCUR+=IECCM:PMCUR+=1:End Sub ' UOP SEQ ENDS IMMED IF CC SET TO AS
Sub ECCP()::*PMCUR+=IECCP:PMCUR+=1:End Sub ' UOP SEQ ENDS IMMED IF CC SET TO AS

Sub SWCCNZ():*PMCUR+=ISWCCNZ:PMCUR+=1:End Sub ' CONDITIONALLY SET USEWZ
Sub SWCCZ()::*PMCUR+=ISWCCZ::PMCUR+=1:End Sub ' CONDITIONALLY SET USEWZ
Sub SWCCNC():*PMCUR+=ISWCCNC:PMCUR+=1:End Sub ' CONDITIONALLY SET USEWZ
Sub SWCCC()::*PMCUR+=ISWCCC::PMCUR+=1:End Sub ' CONDITIONALLY SET USEWZ
Sub SWCCPE():*PMCUR+=ISWCCPE:PMCUR+=1:End Sub ' CONDITIONALLY SET USEWZ
Sub SWCCPO():*PMCUR+=ISWCCPO:PMCUR+=1:End Sub ' CONDITIONALLY SET USEWZ
Sub SWCCP()::*PMCUR+=ISWCCP::PMCUR+=1:End Sub ' CONDITIONALLY SET USEWZ
Sub SWCCM()::*PMCUR+=ISWCCM::PMCUR+=1:End Sub ' CONDITIONALLY SET USEWZ



Sub UAPCI():::*PMCUR+=IUAPCI:PMCUR+=1:::End Sub ' DUAL HALF-T OP, SET ADDR BY PC, AND INCREASE PC VIA ADDER
Sub UNOP()::::*PMCUR+=IUNOP:PMCUR+=1::::End Sub' DESIGNATE Z80 T-STATE WITH NO "SIGNIFICANT" EFFECT, DETAILS UNCLEAR
Sub UFET()::::*PMCUR+=IUFET:PMCUR+=1::::End Sub' BYTE FETCH TO DECODER LATCH, HERE CYCLE GET EXACT UOP SEQ USING "ROOT"
Sub UAIRIUF():*PMCUR+=IUAIRIUF:PMCUR+=1:End Sub ' DUAL HALF-T OP, SET ADDR BY IR, SET REFRESH, INCREASE R AND UPDATE F FROM ALU T3 LATE
Sub URALF()::*PMCUR+=IURALF:PMCUR+=1::::End Sub ' DUAL HALF-T OP, SET REFRESH, UPDATE ALU-F FROM F T4 LATE
Sub UALF()::*PMCUR+=IUALF:PMCUR+=1::::End Sub ' UPDATE ALU-F FROM F

Sub UHALT()::*PMCUR+=IUHALT:PMCUR+=1::::End Sub ' HALT

Sub UFQADD():*PMCUR+=IUFQADD:PMCUR+=1:End Sub ' CORRECT FLAGS FOR ADD HL,RR 
Sub UFQID():*PMCUR+=IUFQID:PMCUR+=1:End Sub ' CORRECT INC DEC R CARRY SAVE

Sub UFQSH():*PMCUR+=IUFQSH:PMCUR+=1:End Sub ' CORRECT MAIN SHIFTS FLAGS

Sub UABC():::*PMCUR+=IUABC:PMCUR+=1::::::End Sub ' SET ADDR BY BC
Sub UADE():::*PMCUR+=IUADE:PMCUR+=1::::::End Sub ' SET ADDR BY DE
Sub UAHL():::*PMCUR+=IUAHL:PMCUR+=1::::::End Sub ' SET ADDR BY HL
Sub UAWZ():::*PMCUR+=IUAWZ:PMCUR+=1::::::End Sub ' SET ADDR BY WZ
Sub UAAD():::*PMCUR+=IUAAD:PMCUR+=1::::::End Sub ' SET ADDR BY ADDER
Sub UASP():::*PMCUR+=IUASP:PMCUR+=1::::::End Sub ' SET ADDR BY SP

Sub UAIX():::*PMCUR+=IUAIX:PMCUR+=1::::::End Sub ' SET ADDR BY SP
Sub UAIY():::*PMCUR+=IUAIY:PMCUR+=1::::::End Sub ' SET ADDR BY SP

Sub URCW():::*PMCUR+=IURCW:PMCUR+=1::::::End Sub ' READ CYCLE WAIT
Sub UWCW():::*PMCUR+=IUWCW:PMCUR+=1::::::End Sub ' WRITE CYCLE WAIT

Sub URWR(RN As ULong):*PMCUR+=IURWR+(RN Shl 9):PMCUR+=1:End Sub' SET DATA BUS WITH R, WRITE BYTE 2 OF SEL WITH SHIFT VALUE IN UI64 REGISTER HOLDER

' ACTUAL READS AND WRITES
Sub UTRD():::*PMCUR+=IUTRD:PMCUR+=1::::::End Sub ' ACTUAL MEM READ
Sub UDOW():::*PMCUR+=IUDOW:PMCUR+=1::::::End Sub ' ACTUAL MEM WRITE
Sub UPOW():::*PMCUR+=IUPOW:PMCUR+=1::::::End Sub ' PORT ACTUAL WRITE 
Sub UTIO():::*PMCUR+=IUTIO:PMCUR+=1::::::End Sub ' PORT ACTUAL READ
Sub UOWR():*PMCUR+=IUOWR:PMCUR+=1:End Sub ' SET DATA BUS LATCH WITH R
Sub UNWR():*PMCUR+=IUNWR:PMCUR+=1:End Sub ' SET DATA BUS LATCH WITH NULL


Sub UPFDD():*PMCUR+=IUPFDD:PMCUR+=1:End Sub ' SET DECODER FLAG TO PFX DD, SETUP TIME UNCLEAR, MUST BE AS FAST AS "DI" ACT AT T3-ST0
Sub UPFFD():*PMCUR+=IUPFFD:PMCUR+=1:End Sub ' SET DECODER FLAG TO PFX FD
Sub UPFCB():*PMCUR+=IUPFCB:PMCUR+=1:End Sub ' SET DECODER FLAG TO PFX CB
Sub UPFED():*PMCUR+=IUPFED:PMCUR+=1:End Sub ' SET DECODER FLAG TO PFX ED 
Sub UPFDC():*PMCUR+=IUPFDC:PMCUR+=1:End Sub ' SET DECODER FLAG TO PFX DDCB 
Sub UPFFC():*PMCUR+=IUPFFC:PMCUR+=1:End Sub ' SET DECODER FLAG TO PFX FDCB 

Sub ULTR(RN As ULong):*PMCUR+=IULTR+(RN Shl 9):PMCUR+=1:End Sub' INTERNAL LD T,R
'Sub ULTX(RN As ULong):*PMCUR+=IULTX+(RN Shl 9):PMCUR+=1:End Sub' INTERNAL EXTRA LD T,R FOR IX IY

Sub ULRT(RN As ULong):*PMCUR+=IULRT+(RN Shl 9):PMCUR+=1:End Sub' INTERNAL LD R,T

Sub ULLRI():*PMCUR+=IULLRI:PMCUR+=1:End Sub ' LD ALU,I 
Sub ULLRR():*PMCUR+=IULLRR:PMCUR+=1:End Sub ' LD ALU,R 
Sub UFQIR():*PMCUR+=IUFQIR:PMCUR+=1:End Sub ' LD ALU,R 

Sub ULRIA():*PMCUR+=IULRIA:PMCUR+=1:End Sub ' LD T,I 
Sub ULRRA():*PMCUR+=IULRRA:PMCUR+=1:End Sub ' LD T,R 

Sub ULTXH():*PMCUR+=IULTXH:PMCUR+=1:End Sub ' LD T,I 
Sub ULTXL():*PMCUR+=IULTXL:PMCUR+=1:End Sub ' LD T,I 
Sub ULTYH():*PMCUR+=IULTYH:PMCUR+=1:End Sub ' LD T,I 
Sub ULTYL():*PMCUR+=IULTYL:PMCUR+=1:End Sub ' LD T,I 

Sub ULRBT():*PMCUR+=IULRBT:PMCUR+=1:End Sub ' LD REGISTER,T 
Sub ULRCT():*PMCUR+=IULRCT:PMCUR+=1:End Sub ' LD REGISTER,T 
Sub ULRDT():*PMCUR+=IULRDT:PMCUR+=1:End Sub ' LD REGISTER,T 
Sub ULRET():*PMCUR+=IULRET:PMCUR+=1:End Sub ' LD REGISTER,T 
Sub ULRHT():*PMCUR+=IULRHT:PMCUR+=1:End Sub ' LD REGISTER,T 
Sub ULRLT():*PMCUR+=IULRLT:PMCUR+=1:End Sub ' LD REGISTER,T 
Sub ULRAT():*PMCUR+=IULRAT:PMCUR+=1:End Sub ' LD REGISTER,T 
Sub ULRFT():*PMCUR+=IULRFT:PMCUR+=1:End Sub ' LD REGISTER,T 
Sub ULSLT():*PMCUR+=IULSLT:PMCUR+=1:End Sub ' LD REGISTER,T SP 
Sub ULSHT():*PMCUR+=IULSHT:PMCUR+=1:End Sub ' LD REGISTER,T 

Sub ULXLT():*PMCUR+=IULXHT:PMCUR+=1:End Sub ' LD REGISTER,T 
Sub ULXHT():*PMCUR+=IULXLT:PMCUR+=1:End Sub ' LD REGISTER,T 
Sub ULYLT():*PMCUR+=IULYLT:PMCUR+=1:End Sub ' LD REGISTER,T 
Sub ULYHT():*PMCUR+=IULYHT:PMCUR+=1:End Sub ' LD REGISTER,T 

Sub ULWE():*PMCUR+=IULWE:PMCUR+=1:End Sub ' LD W,A ERRATIC MOD 
Sub ULWA():*PMCUR+=IULWA:PMCUR+=1:End Sub ' LD W,A REGULAR 
Sub ULWT():*PMCUR+=IULWT:PMCUR+=1:End Sub ' LD W,T 
Sub ULZT():*PMCUR+=IULZT:PMCUR+=1:End Sub ' LD Z,T 
Sub ULZN(RN As ULong):*PMCUR+=IULZN+(RN Shl 9):PMCUR+=1:End Sub ' LD Z,RST** 
Sub ULW0():*PMCUR+=IULW0:PMCUR+=1:End Sub ' LD W,0 FOR RST**  

Sub UAWR():*PMCUR+=IUAWR:PMCUR+=1:End Sub ' SET DATA BUS LATCH WITH R
Sub UTWR():*PMCUR+=IUTWR:PMCUR+=1:End Sub ' SET DATA BUS LATCH WITH R

Sub UFWR():*PMCUR+=IUFWR:PMCUR+=1:End Sub ' SET DATA BUS LATCH WITH R
Sub UBWR():*PMCUR+=IUBWR:PMCUR+=1:End Sub ' SET DATA BUS LATCH WITH R
Sub UCWR():*PMCUR+=IUCWR:PMCUR+=1:End Sub ' SET DATA BUS LATCH WITH R
Sub UDWR():*PMCUR+=IUDWR:PMCUR+=1:End Sub ' SET DATA BUS LATCH WITH R
Sub UEWR():*PMCUR+=IUEWR:PMCUR+=1:End Sub ' SET DATA BUS LATCH WITH R
Sub UHWR():*PMCUR+=IUHWR:PMCUR+=1:End Sub ' SET DATA BUS LATCH WITH R
Sub ULWR():*PMCUR+=IULWR:PMCUR+=1:End Sub ' SET DATA BUS LATCH WITH R
Sub USLWR():*PMCUR+=IUSLWR:PMCUR+=1:End Sub ' SET DATA BUS LATCH WITH R SP
Sub USHWR():*PMCUR+=IUSHWR:PMCUR+=1:End Sub ' SET DATA BUS LATCH WITH R SP
Sub UPLWR():*PMCUR+=IUPLWR:PMCUR+=1:End Sub ' SET DATA BUS LATCH WITH R SP
Sub UPHWR():*PMCUR+=IUPHWR:PMCUR+=1:End Sub ' SET DATA BUS LATCH WITH R SP

Sub UXLWR():*PMCUR+=IUXLWR:PMCUR+=1:End Sub ' SET DATA BUS LATCH WITH R SP
Sub UXHWR():*PMCUR+=IUXHWR:PMCUR+=1:End Sub ' SET DATA BUS LATCH WITH R SP
Sub UYLWR():*PMCUR+=IUYLWR:PMCUR+=1:End Sub ' SET DATA BUS LATCH WITH R SP
Sub UYHWR():*PMCUR+=IUYHWR:PMCUR+=1:End Sub ' SET DATA BUS LATCH WITH R SP


Sub UWZI():*PMCUR+=IUWZI:PMCUR+=1:End Sub ' INCREASE RR VIA ADDER 
Sub UBCI():*PMCUR+=IUBCI:PMCUR+=1:End Sub ' INCREASE RR VIA ADDER 
Sub UDEI():*PMCUR+=IUDEI:PMCUR+=1:End Sub ' INCREASE RR VIA ADDER 
Sub UHLI():*PMCUR+=IUHLI:PMCUR+=1:End Sub ' INCREASE RR VIA ADDER 
Sub USPI():*PMCUR+=IUSPI:PMCUR+=1:End Sub ' INCREASE RR VIA ADDER 
Sub UADI():*PMCUR+=IUADI:PMCUR+=1:End Sub ' INCREASE ADDER

Sub UIXI():*PMCUR+=IUIXI:PMCUR+=1:End Sub ' INCREASE ADDER
Sub UIYI():*PMCUR+=IUIYI:PMCUR+=1:End Sub ' INCREASE ADDER

Sub UADIWZ():*PMCUR+=IUADIWZ:PMCUR+=1:End Sub ' PRELOADED ADDER INCREASE ADD AND STORE TO RR
Sub UADDWZ():*PMCUR+=IUADDWZ:PMCUR+=1:End Sub ' PRELOADED ADDER DECREASE ADD AND STORE TO RR
Sub UADIPC():*PMCUR+=IUADIPC:PMCUR+=1:End Sub ' 

Sub UWZD():*PMCUR+=IUWZD:PMCUR+=1:End Sub ' DECREASE RR VIA ADDER 
Sub UBCD():*PMCUR+=IUBCD:PMCUR+=1:End Sub ' DECREASE RR VIA ADDER 
Sub UDED():*PMCUR+=IUDED:PMCUR+=1:End Sub ' DECREASE RR VIA ADDER 
Sub UHLD():*PMCUR+=IUHLD:PMCUR+=1:End Sub ' DECREASE RR VIA ADDER 
Sub USPD():*PMCUR+=IUSPD:PMCUR+=1:End Sub ' DECREASE RR VIA ADDER 
Sub UADD():*PMCUR+=IUADD:PMCUR+=1:End Sub ' DECREASE ADDER 

Sub UIXD():*PMCUR+=IUIXD:PMCUR+=1:End Sub ' DECREASE ADDER 
Sub UIYD():*PMCUR+=IUIYD:PMCUR+=1:End Sub ' DECREASE ADDER 

Sub UBCDPV():*PMCUR+=IUBCDPV:PMCUR+=1:End Sub ' DECREASE BC, SET PV IF NONZERO, ALL xxIR USE THIS 

Sub ULDBC():*PMCUR+=IULDBC:PMCUR+=1:End Sub ' LD ADDER,RR 
Sub ULDDE():*PMCUR+=IULDDE:PMCUR+=1:End Sub ' LD ADDER,RR 
Sub ULDHL():*PMCUR+=IULDHL:PMCUR+=1:End Sub ' LD ADDER,RR 
Sub ULDSP():*PMCUR+=IULDSP:PMCUR+=1:End Sub ' LD ADDER,RR 
Sub ULDWZ():*PMCUR+=IULDWZ:PMCUR+=1:End Sub ' LD ADDER,RR 
Sub ULDPC():*PMCUR+=IULDPC:PMCUR+=1:End Sub ' LD ADDER,RR 

Sub ULDIX():*PMCUR+=IULDIX:PMCUR+=1:End Sub ' LD ADDER,RR 
Sub ULDIY():*PMCUR+=IULDIY:PMCUR+=1:End Sub ' LD ADDER,RR 

Sub ULBCD():*PMCUR+=IULBCD:PMCUR+=1:End Sub ' LD RR,ADDER 
Sub ULDED():*PMCUR+=IULDED:PMCUR+=1:End Sub ' LD RR,ADDER 
Sub ULHLD():*PMCUR+=IULHLD:PMCUR+=1:End Sub ' LD RR,ADDER 
Sub ULWZD():*PMCUR+=IULWZD:PMCUR+=1:End Sub ' LD RR,ADDER 
Sub ULSPD():*PMCUR+=IULSPD:PMCUR+=1:End Sub ' LD RR,ADDER 
Sub ULPCD():*PMCUR+=IULPCD:PMCUR+=1:End Sub ' LD RR,ADDER 

Sub ULIXD():*PMCUR+=IULIXD:PMCUR+=1:End Sub ' LD RR,ADDER 
Sub ULIYD():*PMCUR+=IULIYD:PMCUR+=1:End Sub ' LD RR,ADDER 

Sub ULLRB():*PMCUR+=IULLRB:PMCUR+=1:End Sub ' LD ALU LEFT OPERAND R 
Sub ULLRC():*PMCUR+=IULLRC:PMCUR+=1:End Sub ' LD ALU LEFT OPERAND R 
Sub ULLRD():*PMCUR+=IULLRD:PMCUR+=1:End Sub ' LD ALU LEFT OPERAND R 
Sub ULLRE():*PMCUR+=IULLRE:PMCUR+=1:End Sub ' LD ALU LEFT OPERAND R 
Sub ULLRH():*PMCUR+=IULLRH:PMCUR+=1:End Sub ' LD ALU LEFT OPERAND R 
Sub ULLRL():*PMCUR+=IULLRL:PMCUR+=1:End Sub ' LD ALU LEFT OPERAND R 
Sub ULLRA():*PMCUR+=IULLRA:PMCUR+=1:End Sub ' LD ALU LEFT OPERAND R 
Sub ULLRT():*PMCUR+=IULLRT:PMCUR+=1:End Sub ' LD ALU LEFT OPERAND R 

Sub ULLRZ():*PMCUR+=IULLRZ:PMCUR+=1:End Sub ' LD ALU LEFT OPERAND R 

Sub ULXLL():*PMCUR+=IULXLL:PMCUR+=1:End Sub ' LD ALU LEFT OPERAND R 
Sub ULXHL():*PMCUR+=IULXHL:PMCUR+=1:End Sub ' LD ALU LEFT OPERAND R 
Sub ULYLL():*PMCUR+=IULYLL:PMCUR+=1:End Sub ' LD ALU LEFT OPERAND R 
Sub ULYHL():*PMCUR+=IULYHL:PMCUR+=1:End Sub ' LD ALU LEFT OPERAND R 

Sub ULLXL():*PMCUR+=IULLXL:PMCUR+=1:End Sub ' LD ALU LEFT OPERAND R 
Sub ULLXH():*PMCUR+=IULLXH:PMCUR+=1:End Sub ' LD ALU LEFT OPERAND R 
Sub ULLYL():*PMCUR+=IULLYL:PMCUR+=1:End Sub ' LD ALU LEFT OPERAND R 
Sub ULLYH():*PMCUR+=IULLYH:PMCUR+=1:End Sub ' LD ALU LEFT OPERAND R 

Sub ULLPL():*PMCUR+=IULLPL:PMCUR+=1:End Sub ' LD ALU LEFT OPERAND R 
Sub ULLPH():*PMCUR+=IULLPH:PMCUR+=1:End Sub ' LD ALU LEFT OPERAND R 

Sub ULLR(RN As ULong):*PMCUR+=IULLR+(RN Shl 9):PMCUR+=1:End Sub ' LD ALU LEFT OPERAND R 
Sub ULRL(RN As ULong):*PMCUR+=IULRL+(RN Shl 9):PMCUR+=1:End Sub ' LD R,ALU RESULT 

Sub ULRBL():*PMCUR+=IULRBL:PMCUR+=1:End Sub ' LD R,ALU RESULT 
Sub ULRCL():*PMCUR+=IULRCL:PMCUR+=1:End Sub ' LD R,ALU RESULT
Sub ULRDL():*PMCUR+=IULRDL:PMCUR+=1:End Sub ' LD R,ALU RESULT 
Sub ULREL():*PMCUR+=IULREL:PMCUR+=1:End Sub ' LD R,ALU RESULT 
Sub ULRHL():*PMCUR+=IULRHL:PMCUR+=1:End Sub ' LD R,ALU RESULT
Sub ULRLL():*PMCUR+=IULRLL:PMCUR+=1:End Sub ' LD R,ALU RESULT
Sub ULRAL():*PMCUR+=IULRAL:PMCUR+=1:End Sub ' LD R,ALU RESULT

Sub ULRTL():*PMCUR+=IULRTL:PMCUR+=1:End Sub ' LD R,ALU RESULT
Sub ULRZL():*PMCUR+=IULRZL:PMCUR+=1:End Sub ' LD R,ALU RESULT
Sub ULRWL():*PMCUR+=IULRWL:PMCUR+=1:End Sub ' LD R,ALU RESULT

Sub ULRADD(RN As ULong):*PMCUR+=IULRADD+(RN Shl 9):PMCUR+=1:End Sub' ALU ACT WITH RIGHT OPERAND R
Sub ULRADC(RN As ULong):*PMCUR+=IULRADC+(RN Shl 9):PMCUR+=1:End Sub' ALU ACT WITH RIGHT OPERAND R
Sub ULRSUB(RN As ULong):*PMCUR+=IULRSUB+(RN Shl 9):PMCUR+=1:End Sub' ALU ACT WITH RIGHT OPERAND R
Sub ULRSBC(RN As ULong):*PMCUR+=IULRSBC+(RN Shl 9):PMCUR+=1:End Sub' ALU ACT WITH RIGHT OPERAND R
Sub ULRXOR(RN As ULong):*PMCUR+=IULRXOR+(RN Shl 9):PMCUR+=1:End Sub' ALU ACT WITH RIGHT OPERAND R
Sub ULRAND(RN As ULong):*PMCUR+=IULRAND+(RN Shl 9):PMCUR+=1:End Sub' ALU ACT WITH RIGHT OPERAND R
Sub ULROR(RN As ULong):*PMCUR+=IULROR+(RN Shl 9):PMCUR+=1:End Sub' ALU ACT WITH RIGHT OPERAND R
Sub ULRCP(RN As ULong):*PMCUR+=IULRCP+(RN Shl 9):PMCUR+=1:End Sub' ALU ACT WITH RIGHT OPERAND R

Sub ULTADD():*PMCUR+=IULTADD:PMCUR+=1:End Sub' ALU ACT WITH RIGHT OPERAND T
Sub ULTADC():*PMCUR+=IULTADC:PMCUR+=1:End Sub
Sub ULTSUB():*PMCUR+=IULTSUB:PMCUR+=1:End Sub
Sub ULTSBC():*PMCUR+=IULTSBC:PMCUR+=1:End Sub
Sub ULTXOR():*PMCUR+=IULTXOR:PMCUR+=1:End Sub
Sub ULTAND():*PMCUR+=IULTAND:PMCUR+=1:End Sub
Sub ULTOR():*PMCUR+=IULTOR:PMCUR+=1:End Sub
Sub ULTCP():*PMCUR+=IULTCP:PMCUR+=1:End Sub
Sub ULTCPQ():*PMCUR+=IULTCPQ:PMCUR+=1:End Sub ' ERRATIC COMPARE FOR CPIR BUNCH

Sub ULTSADD():*PMCUR+=IULTSADD:PMCUR+=1:End Sub
Sub ULANLL():*PMCUR+=IULANLL:PMCUR+=1:End Sub
Sub ULTNLL():*PMCUR+=IULTNLL:PMCUR+=1:End Sub
Sub ULANLH():*PMCUR+=IULANLH:PMCUR+=1:End Sub
Sub ULTNHL():*PMCUR+=IULTNHL:PMCUR+=1:End Sub
Sub ULAQLD():*PMCUR+=IULAQLD:PMCUR+=1:End Sub

Sub ULXADD(RN As ULong):*PMCUR+=IULXADD+(RN Shl 9):PMCUR+=1:End Sub' ALU ACT WITH RIGHT OPERAND R
Sub ULXADC(RN As ULong):*PMCUR+=IULXADC+(RN Shl 9):PMCUR+=1:End Sub' ALU ACT WITH RIGHT OPERAND R
Sub ULXSUB(RN As ULong):*PMCUR+=IULXSUB+(RN Shl 9):PMCUR+=1:End Sub' ALU ACT WITH RIGHT OPERAND R
Sub ULXSBC(RN As ULong):*PMCUR+=IULXSBC+(RN Shl 9):PMCUR+=1:End Sub' ALU ACT WITH RIGHT OPERAND R
Sub ULXXOR(RN As ULong):*PMCUR+=IULXXOR+(RN Shl 9):PMCUR+=1:End Sub' ALU ACT WITH RIGHT OPERAND R
Sub ULXAND(RN As ULong):*PMCUR+=IULXAND+(RN Shl 9):PMCUR+=1:End Sub' ALU ACT WITH RIGHT OPERAND R
Sub ULXOR(RN As ULong):*PMCUR+=IULXOR+(RN Shl 9):PMCUR+=1:End Sub' ALU ACT WITH RIGHT OPERAND R
Sub ULXCP(RN As ULong):*PMCUR+=IULXCP+(RN Shl 9):PMCUR+=1:End Sub' ALU ACT WITH RIGHT OPERAND R

Sub UOINC():*PMCUR+=IUOINC:PMCUR+=1:End Sub' SINGLE ALU OPERATION
Sub UODEC():*PMCUR+=IUODEC:PMCUR+=1:End Sub' SINGLE ALU OPERATION
Sub UORLC():*PMCUR+=IUORLC:PMCUR+=1:End Sub' SINGLE ALU OPERATION
Sub UORRC():*PMCUR+=IUORRC:PMCUR+=1:End Sub' SINGLE ALU OPERATION
Sub UORL()::*PMCUR+=IUORL:PMCUR+=1:End Sub' SINGLE ALU OPERATION
Sub UORR()::*PMCUR+=IUORR:PMCUR+=1:End Sub' SINGLE ALU OPERATION
Sub UOSLA():*PMCUR+=IUOSLA:PMCUR+=1:End Sub' SINGLE ALU OPERATION
Sub UOSRA():*PMCUR+=IUOSRA:PMCUR+=1:End Sub' SINGLE ALU OPERATION
Sub UOSRL():*PMCUR+=IUOSRL:PMCUR+=1:End Sub' SINGLE ALU OPERATION
Sub UOSLL():*PMCUR+=IUOSLL:PMCUR+=1:End Sub' SINGLE ALU OPERATION

Sub UONEG():*PMCUR+=IUONEG:PMCUR+=1:End Sub' SINGLE ALU OPERATION
Sub UOQPV():*PMCUR+=IUOQPV:PMCUR+=1:End Sub' CREATE ERRATIC PV FOR INIRs AKA TEMP2
Sub UTADDQI():*PMCUR+=IUTADDQI:PMCUR+=1:End Sub' CREATE ERRATIC PV FOR INIRs AKA TEMP1 XOR C.2 XOR INP.2
Sub UTADDQD():*PMCUR+=IUTADDQD:PMCUR+=1:End Sub' CREATE ERRATIC PV FOR INDRs AKA TEMP1 XOR C.2 XOR INP.2

Sub UOBIT(RN As ULong):*PMCUR+=IUOBIT+(RN Shl 9):PMCUR+=1:End Sub' SINGLE ALU OPERATION
Sub UOSET(RN As ULong):*PMCUR+=IUOSET+(RN Shl 9):PMCUR+=1:End Sub' SINGLE ALU OPERATION
Sub UORES(RN As ULong):*PMCUR+=IUORES+(RN Shl 9):PMCUR+=1:End Sub' SINGLE ALU OPERATION

Sub UOSADDC():*PMCUR+=IUOSADDC:PMCUR+=1:End Sub' SINGLE ALU OPERATION

Sub UODAA():*PMCUR+=IUODAA:PMCUR+=1:End Sub' SINGLE ALU OPERATION
Sub UOCPL():*PMCUR+=IUOCPL:PMCUR+=1:End Sub' SINGLE ALU OPERATION
Sub UOSCF():*PMCUR+=IUOSCF:PMCUR+=1:End Sub' SINGLE ALU OPERATION
Sub UOCCF():*PMCUR+=IUOCCF:PMCUR+=1:End Sub' SINGLE ALU OPERATION
Sub UOQIO():*PMCUR+=IUOQIO:PMCUR+=1:End Sub' AFFECT FLAGS BY IO BYTE, UNARY OP
Sub UORVN():*PMCUR+=IUORVN:PMCUR+=1:End Sub' REVERSE NIBBLES

Sub UEXX():*PMCUR+=IUEXX:PMCUR+=1:End Sub
Sub UEXA():*PMCUR+=IUEXA:PMCUR+=1:End Sub
Sub UXHD():*PMCUR+=IUXHD:PMCUR+=1:End Sub

Sub UDFF():*PMCUR+=IUDFF:PMCUR+=1:End Sub ' UNSET IFF1 AND IFF2
Sub USFF():*PMCUR+=IUSFF:PMCUR+=1:End Sub ' SET
Sub UCFF():*PMCUR+=IUCFF:PMCUR+=1:End Sub ' COPY IFF2 TO IFF1

Sub UIM0():*PMCUR+=IUIM0:PMCUR+=1:End Sub ' SET INTERRUPT MODE
Sub UIM1():*PMCUR+=IUIM1:PMCUR+=1:End Sub ' SET INTERRUPT MODE
Sub UIM2():*PMCUR+=IUIM2:PMCUR+=1:End Sub ' SET INTERRUPT MODE
