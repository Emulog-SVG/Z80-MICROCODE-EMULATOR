ASMGO;
.ALIGN 64
.LABARR:
.QUAD .JTL0
.QUAD .JTL1
.QUAD .JTL2
.QUAD .JTL3
.QUAD .JTL4
.QUAD .JTL5
.QUAD .JTL6
.QUAD .JTL7
.QUAD .JTL8
.QUAD .JTL9
.QUAD .JTL10
.QUAD .JTL11
.QUAD .JTL12
.QUAD .JTL13
.QUAD .JTL14
.QUAD .JTL15
.QUAD .JTL16
.QUAD .JTL17
.QUAD .JTL18
.QUAD .JTL19
.QUAD .JTL20
.QUAD .JTL21
.QUAD .JTL22
.QUAD .JTL23
.QUAD .JTL24
.QUAD .JTL25
.QUAD .JTL26
.QUAD .JTL27
.QUAD .JTL28
.QUAD .JTL29
.QUAD .JTL30
.QUAD .JTL31
.QUAD .JTL32
.QUAD .JTL33
.QUAD .JTL34
.QUAD .JTL35
.QUAD .JTL36
.QUAD .JTL37
.QUAD .JTL38
.QUAD .JTL39
.QUAD .JTL40
.QUAD .JTL41
.QUAD .JTL42
.QUAD .JTL43
.QUAD .JTL44
.QUAD .JTL45
.QUAD .JTL46
.QUAD .JTL47
.QUAD .JTL48
.QUAD .JTL49
.QUAD .JTL50
.QUAD .JTL51
.QUAD .JTL52
.QUAD .JTL53
.QUAD .JTL54
.QUAD .JTL55
.QUAD .JTL56
.QUAD .JTL57
.QUAD .JTL58
.QUAD .JTL59
.QUAD .JTL60
.QUAD .JTL61
.QUAD .JTL62
.QUAD .JTL63
.QUAD .JTL64
.QUAD .JTL65
.QUAD .JTL66
.QUAD .JTL67
.QUAD .JTL68
.QUAD .JTL69
.QUAD .JTL70
.QUAD .JTL71
.QUAD .JTL72
.QUAD .JTL73
.QUAD .JTL74
.QUAD .JTL75
.QUAD .JTL76
.QUAD .JTL77
.QUAD .JTL78
.QUAD .JTL79
.QUAD .JTL80
.QUAD .JTL81
.QUAD .JTL82
.QUAD .JTL83
.QUAD .JTL84
.QUAD .JTL85
.QUAD .JTL86
.QUAD .JTL87
.QUAD .JTL88
.QUAD .JTL89
.QUAD .JTL90
.QUAD .JTL91
.QUAD .JTL92
.QUAD .JTL93
.QUAD .JTL94
.QUAD .JTL95
.QUAD .JTL96
.QUAD .JTL97
.QUAD .JTL98
.QUAD .JTL99
.QUAD .JTL100
.QUAD .JTL101
.QUAD .JTL102
.QUAD .JTL103
.QUAD .JTL104
.QUAD .JTL105
.QUAD .JTL106
.QUAD .JTL107
.QUAD .JTL108
.QUAD .JTL109
.QUAD .JTL110
.QUAD .JTL111
.QUAD .JTL112
.QUAD .JTL113
.QUAD .JTL114
.QUAD .JTL115
.QUAD .JTL116
.QUAD .JTL117
.QUAD .JTL118
.QUAD .JTL119
.QUAD .JTL120
.QUAD .JTL121
.QUAD .JTL122
.QUAD .JTL123
.QUAD .JTL124
.QUAD .JTL125
.QUAD .JTL126
.QUAD .JTL127
.QUAD .JTL128
.QUAD .JTL129
.QUAD .JTL130
.QUAD .JTL131
.QUAD .JTL132
.QUAD .JTL133
.QUAD .JTL134
.QUAD .JTL135
.QUAD .JTL136
.QUAD .JTL137
.QUAD .JTL138
.QUAD .JTL139
.QUAD .JTL140
.QUAD .JTL141
.QUAD .JTL142
.QUAD .JTL143
.QUAD .JTL144
.QUAD .JTL145
.QUAD .JTL146
.QUAD .JTL147
.QUAD .JTL148
.QUAD .JTL149
.QUAD .JTL150
.QUAD .JTL151
.QUAD .JTL152
.QUAD .JTL153
.QUAD .JTL154
.QUAD .JTL155
.QUAD .JTL156
.QUAD .JTL157
.QUAD .JTL158
.QUAD .JTL159
.QUAD .JTL160
.QUAD .JTL161
.QUAD .JTL162
.QUAD .JTL163
.QUAD .JTL164
.QUAD .JTL165
.QUAD .JTL166
.QUAD .JTL167
.QUAD .JTL168
.QUAD .JTL169
.QUAD .JTL170
.QUAD .JTL171
.QUAD .JTL172
.QUAD .JTL173
.QUAD .JTL174
.QUAD .JTL175
.QUAD .JTL176
.QUAD .JTL177
.QUAD .JTL178
.QUAD .JTL179
.QUAD .JTL180
.QUAD .JTL181
.QUAD .JTL182
.QUAD .JTL183
.QUAD .JTL184
.QUAD .JTL185
.QUAD .JTL186
.QUAD .JTL187
.QUAD .JTL188
.QUAD .JTL189
.QUAD .JTL190
.QUAD .JTL191
.QUAD .JTL192
.QUAD .JTL193
.QUAD .JTL194
.QUAD .JTL195
.QUAD .JTL196
.QUAD .JTL197
.QUAD .JTL198
.QUAD .JTL199
.QUAD .JTL200
.QUAD .JTL201
.QUAD .JTL202
.QUAD .JTL203
.QUAD .JTL204
.QUAD .JTL205
.QUAD .JTL206
.QUAD .JTL207
.QUAD .JTL208
.QUAD .JTL209
.QUAD .JTL210
.QUAD .JTL211
.QUAD .JTL212
.QUAD .JTL213
.QUAD .JTL214
.QUAD .JTL215
.QUAD .JTL216
.QUAD .JTL217
.QUAD .JTL218
.QUAD .JTL219
.QUAD .JTL220
.QUAD .JTL221
.QUAD .JTL222
.QUAD .JTL223
.QUAD .JTL224
.QUAD .JTL225
.QUAD .JTL226
.QUAD .JTL227
.QUAD .JTL228
.QUAD .JTL229
.QUAD .JTL230
.QUAD .JTL231
.QUAD .JTL232
.QUAD .JTL233
.QUAD .JTL234
.QUAD .JTL235
.QUAD .JTL236
.QUAD .JTL237
.QUAD .JTL238
.QUAD .JTL239
.QUAD .JTL240
.QUAD .JTL241
.QUAD .JTL242
.QUAD .JTL243
.QUAD .JTL244
.QUAD .JTL245
.QUAD .JTL246
.QUAD .JTL247
.QUAD .JTL248
.QUAD .JTL249
.QUAD .JTL250
.QUAD .JTL251
.QUAD .JTL252
.QUAD .JTL253
.QUAD .JTL254
.QUAD .JTL255
.QUAD .JTL256
.QUAD .JTL257
.QUAD .JTL258
.QUAD .JTL259
.QUAD .JTL260
.QUAD .JTL261
.QUAD .JTL262
.QUAD .JTL263
.QUAD .JTL264
.QUAD .JTL265
.QUAD .JTL266
.QUAD .JTL267
.QUAD .JTL268
.QUAD .JTL269
.QUAD .JTL270
.QUAD .JTL271
.QUAD .JTL272
.QUAD .JTL273
.QUAD .JTL274
.QUAD .JTL275
.QUAD .JTL276
.QUAD .JTL277
.QUAD .JTL278
.QUAD .JTL279
.QUAD .JTL280
.QUAD .JTL281
.QUAD .JTL282
.QUAD .JTL283
.QUAD .JTL284
.QUAD .JTL285
.QUAD .JTL286
.QUAD .JTL287
.QUAD .JTL288
.QUAD .JTL289
.QUAD .JTL290
.QUAD .JTL291
.QUAD .JTL292
.QUAD .JTL293
.QUAD .JTL294
.QUAD .JTL295
.QUAD .JTL296
.QUAD .JTL297
.QUAD .JTL298
.QUAD .JTL299
.QUAD .JTL300
.QUAD .JTL301
.QUAD .JTL302
.QUAD .JTL303
.QUAD .JTL304
.QUAD .JTL305
.QUAD .JTL306
.QUAD .JTL307
.QUAD .JTL308
.QUAD .JTL309
.QUAD .JTL310
.QUAD .JTL311
.QUAD .JTL312
.QUAD .JTL313
.QUAD .JTL314
.QUAD .JTL315
.QUAD .JTL316
.QUAD .JTL317
.QUAD .JTL318
.QUAD .JTL319
.QUAD .JTL320
.QUAD .JTL321
.QUAD .JTL322
.QUAD .JTL323
.QUAD .JTL324
.QUAD .JTL325
.QUAD .JTL326
.QUAD .JTL327
.QUAD .JTL328
.QUAD .JTL329
.QUAD .JTL330
.QUAD .JTL331
.QUAD .JTL332
.QUAD .JTL333
.QUAD .JTL334
.QUAD .JTL335
.QUAD .JTL336
.QUAD .JTL337
.QUAD .JTL338
.QUAD .JTL339
.QUAD .JTL340
.QUAD .JTL341
.QUAD .JTL342
.QUAD .JTL343
.QUAD .JTL344
.QUAD .JTL345
.QUAD .JTL346
.QUAD .JTL347


.ALIGN 8
.JTL0: REJUMP'XERR+=1 '"ERROR ZERO"
' SET ADDRESS BUS SERIES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
.ALIGN 8
.JTL1: ROR UMR,48;MOV UPRW,UMRW;ROR UPR,16;MOV UPRW,UMRW;ROL UPR,16;ROL UMR,48;REJUMP' "UADBC"
.ALIGN 8
.JTL2: ROR UMR,32;MOV UPRW,UMRW;ROR UPR,16;MOV UPRW,UMRW;ROL UPR,16;ROL UMR,32;REJUMP' "UADDE"
.ALIGN 8
.JTL3: ROR UMR,16;MOV UPRW,UMRW;ROL UMR,16;REJUMP'"UAHL"
.ALIGN 8
.JTL4: ROR UWR,32;MOV UPRW,UWRW;ROL UWR,32;REJUMP'"UAWZ"
.ALIGN 8
.JTL5: ROR UPR,16;MOV AX,UPRW;ROL UPR,16;MOV UPRW,AX;REJUMP'"UAAD"
.ALIGN 8
.JTL6: ROR UXR,48;MOV UPRW,UXRW;ROR UPR,16;MOV UPRW,UXRW;ROL UPR,16;ROL UXR,48;REJUMP'"UADSP"
.ALIGN 8
.JTL7: ROR UXR,32;MOV UPRW,UXRW;ROL UXR,32;REJUMP'"UAIX" 
.ALIGN 8
.JTL8: ROR UXR,16;MOV UPRW,UXRW;ROL UXR,16;REJUMP'"UAIX"

'- - - UAPCI - - - - - - - - ' USE SUBST AS SOURCE TO CATCH WZ/RR, Q IS RESET TO UNDEFINED STATE
.ALIGN 8
.JTL9: 'ADDR=SUBST:ADDER=((ADDR+1)And &HFFFF):PC=ADDER:SUBST=ADDER:FQ=DSA:DSA=0 ' "UAPCI"
ROR UPR,32;MOV AX,UPRW;ROL UPR,32;MOV UPRW,AX;' UPR>SUBST>AX,UPR>ADDR=AX
INC AX;ROR UPR,16;MOV UPRW,AX;'UPR>ADDER=AX
ROR UPR,16;MOV UPRW,AX;'UPR>SUBST=AX
ROR UPR,16;MOV UPRW,AX;ROR UPR,16'UPR>PC=AX,UPR>ADDR
ROR USR,24;'USR>SYS
ROR USRB,2;'SYS>ISPFX,DSA>6
BTR USRW,6;RCL USRB,1;ROL USRB,1;'SYS>DSA
ROL USR,24;REJUMP '>USR>T

' - - - UFET - - - OPCODE FETCH - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
.ALIGN 8
.JTL10:' "UFET"
 ;INC AFET;
 ;MOVZX RAX,UPRW;' RAX=ADDR
ROR UMR,8;MOV UMRB,[RAX+UPM+MEMOFF];'UMR>CODE CODE=*(XMEM+ADDR)
ROR UWR,16;'UWR>PREFIX
MOVZX RAX,UMRB;MOVZX RBX,UWRW;Add RAX,RBX;'TEMP=PREFIX+CODE
ROL UMR,8;'UMR>START
MOV RAX,[RAX*8+UPM+ROOTOFF];'*(PROOT+TEMP) 8 BYTE PTR HERE
ROR USR,8;MOVZX RBX,USRB;LEA RAX,[RAX+RBX*4];'USR>CUROFF MCUR+=CUROFF
Sub RAX,UPM;Shr UXC,32;Shl UXC,32;OR UXC,RAX;' GET MCUR-OFFSET TO LONG ARRAY
MOV RBX,USR;MOV BL,XMAIN;MOV RCX,UWR;MOV CX,0;
BTR USR,18;CMOVC USR,RBX;CMOVC UWR,RCX;' 'If ISPFX=1 Then ISPFX=0 CUROFF=XMAIN PREFIX=0
ROL USR,8;ROL UWR,16;REJUMP'UWR>START
'CODE=*(XMEM+ADDR):MCUR=*(PROOT+PREFIX+CODE):MCUR+=CUROFF:If ISPFX=1 Then ISPFX=0:CUROFF=XMAIN:PREFIX=0 Else EndIf: 

' UAIRIUF DO UAIR, INC R, LD F,FLG;R ONLY 7 BIT INCREASE, MSB UNCHANGED
.ALIGN 8
.JTL11:  ;' AFF ADDR,R,F
ROR UWR,48;MOV UPRW,UWRW;'ADDR=TR+(TI Shl 8)
MOV AL,UWRB;And UWRB,128;INC AL;And AL,127;Or UWRB,AL;'R=LREF(TR)
ROR UWR,16;ROR UXR,8;MOV UXRB,UWRB;ROL UXR,8;REJUMP'TF=FLG:
'ADDR=TR+(TI Shl 8):TF=FLG:TR=LREF(TR):' "UAIRIUF"

' URALF DO DUMMY REF AND LD FLG,F
.ALIGN 8
.JTL12: ROR UXR,8;MOV UWRB,UXRB;ROL UXR,8;REJUMP'FLG=TF:' "URALF" ADD FLG

' ULTR LD T,REGISTER SERIES AFF T - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
.ALIGN 8
.JTL13: ROR UMR,56;MOV USRB,UMRB;ROR UMR,8;REJUMP'T=TB:' "ULTRB"
.ALIGN 8
.JTL14: ROR UMR,48;MOV USRB,UMRB;ROR UMR,16;REJUMP'T=TC:' "ULTRC"
.ALIGN 8
.JTL15: ROR UMR,40;MOV USRB,UMRB;ROR UMR,24;REJUMP'T=TD:' "ULTRD"
.ALIGN 8
.JTL16: ROR UMR,32;MOV USRB,UMRB;ROR UMR,32;REJUMP'T=TE:' "ULTRE"
.ALIGN 8
.JTL17: ROR UMR,24;MOV USRB,UMRB;ROR UMR,40;REJUMP'T=TH:' "ULTRH"
.ALIGN 8
.JTL18: ROR UMR,16;MOV USRB,UMRB;ROR UMR,48;REJUMP'T=TL:' "ULTRL"
.ALIGN 8
.JTL19: ROR UXR,8;MOV UWRB,UXRB;ROL UXR,8;REJUMP'FLG=TF:' "UALF":
.ALIGN 8
.JTL20: MOV USRB,UXRB;REJUMP'T=TA:' "ULTRA":
' ULTR LD REGISTER,T SERIES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.ALIGN 8
.JTL21: ROR UMR,56;MOV UMRB,USRB;ROR UMR,8;REJUMP'TB=T: '"ULRBT"
.ALIGN 8
.JTL22: ROR UMR,48;MOV UMRB,USRB;ROR UMR,16;REJUMP'TC=T: '"ULRCT"
.ALIGN 8
.JTL23: ROR UMR,40;MOV UMRB,USRB;ROR UMR,24;REJUMP'TD=T: '"ULRDT"
.ALIGN 8
.JTL24: ROR UMR,32;MOV UMRB,USRB;ROR UMR,32;REJUMP'TE=T: '"ULRET"
.ALIGN 8
.JTL25: ROR UMR,24;MOV UMRB,USRB;ROR UMR,40;REJUMP'TH=T: '"ULRHT"
.ALIGN 8
.JTL26: ROR UMR,16;MOV UMRB,USRB;ROR UMR,48;REJUMP'TL=T: '"ULRLT"
.ALIGN 8
.JTL27: ROR USR,24;Or USRB,8;ROL USR,24;REJUMP'ISHALT=1:'"UHALT"
.ALIGN 8
.JTL28: MOV UXRB,USRB;REJUMP'TA=T: '"ULRAT"
' URWR WRITE REGISTER TO MEMORY AWHILE SO, NEED CHANGE LAST UWCWs ALL TO ACTUAL WRITE 
.ALIGN 8
.JTL29: ROR UWR,8;ROR UMR,56;MOV UWRB,UMRB;ROR UMR,8;ROL UWR,8;REJUMP'BUS=TB: '"UBWR"
.ALIGN 8
.JTL30: ROR UWR,8;ROR UMR,48;MOV UWRB,UMRB;ROR UMR,16;ROL UWR,8;REJUMP'BUS=TC: '"UCWR"
.ALIGN 8
.JTL31: ROR UWR,8;ROR UMR,40;MOV UWRB,UMRB;ROR UMR,24;ROL UWR,8;REJUMP'BUS=TD: '"UDWR"
.ALIGN 8
.JTL32: ROR UWR,8;ROR UMR,32;MOV UWRB,UMRB;ROR UMR,32;ROL UWR,8;REJUMP'BUS=TE: '"UEWR"
.ALIGN 8
.JTL33: ROR UWR,8;ROR UMR,24;MOV UWRB,UMRB;ROR UMR,40;ROL UWR,8;REJUMP'BUS=TH: '"UHWR"
.ALIGN 8
.JTL34: ROR UWR,8;ROR UMR,16;MOV UWRB,UMRB;ROR UMR,48;ROL UWR,8;REJUMP'BUS=TL: '"ULWR"
.ALIGN 8
.JTL35: ROR UWR,8;MOV UWRB,UMRB;ROL UWR,8;REJUMP'BUS=ALU: '"UOWR"
.ALIGN 8
.JTL36: ROR UWR,8;MOV UWRB,UXRB;ROL UWR,8;REJUMP'BUS=TA: '"UAWR"
' MEM CYCLES AND ACT
.ALIGN 8
.JTL37: 
 ;'ROM WRITES GO BEYOND 64K
MOVZX RAX,UPRW;Xor RBX,RBX;
CMP AX,16384;SETC BL;Shl RBX,16;Or RAX,RBX;
ROR UWR,8;MOV [UPM+RAX+MEMOFF],UWRB;ROL UWR,8;REJUMP 
' "UDOW" '*(XMEM+ADDR)=BUS
.ALIGN 8
.JTL38: REJUMP'FREE 
.ALIGN 8
.JTL39: REJUMP'FREE 
.ALIGN 8
.JTL40: REJUMP'FREE 
.ALIGN 8
.JTL41: MOVZX RAX,UPRW;MOV USRB,[UPM+RAX+MEMOFF];REJUMP 'T=*(XMEM+ADDR) '"UTRD" 
.ALIGN 8
.JTL42: ROR UWR,8;MOV UWRB,USRB;ROL UWR,8;REJUMP'BUS=T:' "UTWR"
.ALIGN 8
.JTL43: ROR UXR,48;MOV UXRB,USRB;ROR UXR,16;REJUMP'TP=T: '"ULSLT"
.ALIGN 8
.JTL44: ROR UXR,56;MOV UXRB,USRB;ROR UXR,8;REJUMP'TS=T: '"ULSHT"
' SOME W AND Z LOADS 'IULWE=45,IULWA=46,IULWT=47,IULZT=48,,IULW0=50
.ALIGN 8
.JTL45: REJUMP'FREE
.ALIGN 8
.JTL46: ROR UWR,40;MOV UWRB,UXRB;ROL UWR,40;REJUMP'TW=TA: '"ULWA"
.ALIGN 8
.JTL47: ROR UWR,40;MOV UWRB,USRB;ROL UWR,40;REJUMP'TW=T: '"ULWT"
.ALIGN 8
.JTL48: ROR UWR,32;MOV UWRB,USRB;ROL UWR,32;REJUMP'TZ=T: '"ULZT"
.ALIGN 8
.JTL49: REJUMP' DUMMY "ULZN" "URCW" "UWCW" "UNOP" ULWAERR"
.ALIGN 8
.JTL50: ROR UWR,40;MOV UWRB,0;ROL UWR,40;REJUMP'TW=0: '"ULW0":
' VIA ADDER INCREASES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
' - - - - IUWZI=51,IUBCI=52,IUDEI=53,IUHLI=54,IUSPI=55,IUADI=56,IUIXI=57,IUIYI=58
.ALIGN 8
.JTL51: ROR UWR,32;INC UWRW;ROL UWR,32;REJUMP'TZ=((TZ+(TW Shl 8))+1) And &hFFFF:TW=TZ Shr 8:TZ And=&HFF'"UWZI":
.ALIGN 8
.JTL52: ROR UMR,48;INC UMRW;ROL UMR,48;REJUMP'TC=((TC+(TB Shl 8))+1) And &hFFFF:TB=TC Shr 8:TC And=&HFF'"UBCI":
.ALIGN 8
.JTL53: ROR UMR,32;INC UMRW;ROL UMR,32;REJUMP'TE=((TE+(TD Shl 8))+1) And &hFFFF:TD=TE Shr 8:TE And=&HFF'"UDEI":
.ALIGN 8
.JTL54: ROR UMR,16;INC UMRW;ROL UMR,16;REJUMP'TL=((TL+(TH Shl 8))+1) And &hFFFF:TH=TL Shr 8:TL And=&HFF'"UHLI":
.ALIGN 8
.JTL55: ROR UXR,48;INC UXRW;ROL UXR,48;REJUMP'TP=((TP+(TS Shl 8))+1) And &hFFFF:TS=TP Shr 8:TP And=&HFF'"USPI":
.ALIGN 8
.JTL56: ROR UPR,16;INC UPRW;ROL UPR,16;REJUMP'ADDER=(ADDER+1) And &HFFFF:'"UADI":
.ALIGN 8
.JTL57: ROR UXR,32;INC UXRW;ROL UXR,32;REJUMP'XL=((XL+(XH Shl 8))+1) And &hFFFF:XH=XL Shr 8:XL And=&HFF'"UIXI":
.ALIGN 8
.JTL58: ROR UXR,16;INC UXRW;ROL UXR,16;REJUMP'YL=((YL+(YH Shl 8))+1) And &hFFFF:YH=YL Shr 8:YL And=&HFF'"UIYI":
' VIA ADDER DECREASE CROSSLOADS - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
'- - - - IUADIWZ=59,IUADIPC=60
.ALIGN 8
.JTL59: ROR UPR,16;INC UPRW;MOV AX,UPRW;ROL UPR,16;ROR UWR,32;MOV UWRW,AX;ROL UWR,32;REJUMP'ADDER+=1:TZ=ADDER And &HFF:TW=(ADDER Shr 8) And &HFF'"CROSS UADIWZ":
.ALIGN 8
.JTL60: ROR UPR,16;INC UPRW;MOV AX,UPRW;ROL UPR,32;MOV UPRW,AX;ROR UPR,16;REJUMP'PC=((ADDER+1)And &HFFFF):'"UADIPC":
' VIA ADDER DECREASES AND UBCDPV - - - - ' IUADD=61,IUBCD=62,IUBCDPV=63,IUDED=64,IUHLD=65,IUSPD=66,IUWZD=67,IUIXD=68,IUIYD=69
.ALIGN 8
.JTL61: ROR UPR,16;DEC UPRW;ROL UPR,16;REJUMP'ADDER=(ADDER-1) And &HFFFF':"UADD":
.ALIGN 8
.JTL62: ROR UMR,48;DEC UMRW;ROL UMR,48;REJUMP'TC=((TC+(TB Shl 8))-1)And &hFFFF:TB=TC Shr 8:TC And= &hFF:'"UBCD":
.ALIGN 8
.JTL63: And UWRB,251;MOV RBX,UWR;Or BL,4;ROR UMR,48;Sub UMRW,1;CMOVNZ UWR,RBX;ROL UMR,48;REJUMP''TC=((TC+(TB Shl 8))-1)And &hFFFF:TB=TC Shr 8:TC And= &hFF:If (TB+TC) Then FLG Or= XFP Else FLG And= &B11111011 EndIf '"UBCDPV": 'PV set if BC not 0 P0 IS ZERO PE IS TRUE
.ALIGN 8
.JTL64: ROR UMR,32;DEC UMRW;ROL UMR,32;REJUMP'TE=((TE+(TD Shl 8))-1)And &hFFFF:TD=TE Shr 8:TE And= &hFF:'"UDED":
.ALIGN 8
.JTL65: ROR UMR,16;DEC UMRW;ROL UMR,16;REJUMP'TL=((TL+(TH Shl 8))-1)And &hFFFF:TH=TL Shr 8:TL And= &hFF:'"UHLD":
.ALIGN 8
.JTL66: ROR UXR,48;DEC UXRW;ROL UXR,48;REJUMP'TP=((TP+(TS Shl 8))-1)And &hFFFF:TS=TP Shr 8:TP And= &hFF:'"USPD":
.ALIGN 8
.JTL67: ROR UWR,32;DEC UWRW;ROL UWR,32;REJUMP'TZ=((TZ+(TW Shl 8))-1)And &hFFFF:TW=TZ Shr 8:TZ And= &hFF:'"UWZD":
.ALIGN 8
.JTL68: ROR UXR,32;DEC UXRW;ROL UXR,32;REJUMP'XL=((XL+(XH Shl 8))-1)And &hFFFF:XH=XL Shr 8:XL And= &hFF:'"UIXD":
.ALIGN 8
.JTL69: ROR UXR,16;DEC UXRW;ROL UXR,16;REJUMP'YL=((YL+(YH ShL 8))-1)And &hFFFF:YH=YL Shr 8:YL And= &hFF:'"UIYD":
' LOAD ADDER,RR - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
' IULDBC=70,IULDDE=71,IULDHL=72,IULDSP=73,IULDWZ=74,IULDPC=75,IULDIX=76,IULDIY=77
.ALIGN 8
.JTL70: ROR UPR,16;ROR UMR,48;MOV UPRW,UMRW;ROL UMR,48;ROL UPR,16;REJUMP'ADDER=(TC+(TB Shl 8))'"ULDBC":
.ALIGN 8
.JTL71: ROR UPR,16;ROR UMR,32;MOV UPRW,UMRW;ROL UMR,32;ROL UPR,16;REJUMP'ADDER=(TE+(TD Shl 8))'"ULDDE":
.ALIGN 8
.JTL72: ROR UPR,16;ROR UMR,16;MOV UPRW,UMRW;ROL UMR,16;ROL UPR,16;REJUMP'ADDER=(TL+(TH Shl 8))'"ULDHL":
.ALIGN 8
.JTL73: ROR UPR,16;ROR UXR,48;MOV UPRW,UXRW;ROL UXR,48;ROL UPR,16;REJUMP'ADDER=(TP+(TS Shl 8))'"ULDSP":
.ALIGN 8
.JTL74: ROR UPR,16;ROR UWR,32;MOV UPRW,UWRW;ROL UWR,32;ROL UPR,16;REJUMP'ADDER=(TZ+(TW ShL 8))'"ULDWZ":
.ALIGN 8
.JTL75: ROR UPR,48;MOV AX,UPRW;ROL UPR,32;MOV UPRW,AX;ROL UPR,16;REJUMP'ADDER=PC:'"ULDPC":
.ALIGN 8
.JTL76: ROR UPR,16;ROR UXR,32;MOV UPRW,UXRW;ROL UXR,32;ROL UPR,16;REJUMP'ADDER=(XL+(XH Shl 8))':"ULDIX":
.ALIGN 8
.JTL77: ROR UPR,16;ROR UXR,16;MOV UPRW,UXRW;ROL UXR,16;ROL UPR,16;REJUMP'ADDER=(YL+(YH Shl 8))':"ULDIY":
' LOAD RR,ADDER - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
' IULBCD=78,IULDED=79,IULHLD=80,IULWZD=81,IULSPD=82,IULPCD=83,IULIXD=84,IULIYD=85
.ALIGN 8
.JTL78: ROR UPR,16;ROR UMR,48;MOV UMRW,UPRW;ROL UMR,48;ROL UPR,16;REJUMP'TC=ADDER And &hFF:TB=ADDER Shr 8 '"ULBCD":
.ALIGN 8
.JTL79: ROR UPR,16;ROR UMR,32;MOV UMRW,UPRW;ROL UMR,32;ROL UPR,16;REJUMP'TE=ADDER And &hFF:TD=ADDER Shr 8 '"ULDED":
.ALIGN 8
.JTL80: ROR UPR,16;ROR UMR,16;MOV UMRW,UPRW;ROL UMR,16;ROL UPR,16;REJUMP'TL=ADDER And &hFF:TH=ADDER Shr 8 '"ULHLD":
.ALIGN 8
.JTL81: ROR UPR,16;ROR UWR,32;MOV UWRW,UPRW;ROL UWR,32;ROL UPR,16;REJUMP'TZ=ADDER And &hFF:TW=ADDER Shr 8 '"ULWZD":
.ALIGN 8
.JTL82: ROR UPR,16;ROR UXR,48;MOV UXRW,UPRW;ROL UXR,48;ROL UPR,16;REJUMP'TP=ADDER And &hFF:TS=ADDER Shr 8 '"ULSPD":
.ALIGN 8
.JTL83: ROR UPR,16;MOV AX,UPRW;ROR UPR,16;MOV UPRW,AX;ROR UPR,16;MOV UPRW,AX;ROR UPR,16;REJUMP'PC=ADDER:SUBST=ADDER '"ULPCD":
.ALIGN 8
.JTL84: ROR UPR,16;ROR UXR,32;MOV UXRW,UPRW;ROL UXR,32;ROL UPR,16;REJUMP'XL=ADDER And &hFF:XH=ADDER Shr 8 '"ULIXD":
.ALIGN 8
.JTL85: ROR UPR,16;ROR UXR,16;MOV UXRW,UPRW;ROL UXR,16;ROL UPR,16;REJUMP'YL=ADDER And &hFF:YH=ADDER Shr 8 '"ULIYD":
' PREFIXES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'- - IUPFDD=86,IUPFFD=87,IUPFCB=88,IUPFED=89,IUPFDC=90,IUPFFC=91 ' PREFIXES
.ALIGN 8
.JTL86: ROR UWR,16;MOV UWRW,XDD;ROL UWR,16;ROR USR,8;MOV USRB,XMAIN;ROR USR,16;Or USRB,4;ROL USR,24;REJUMP'PREFIX=XDD:ISPFX=1:CUROFF=XMAIN:'"UPFDD #DD":
.ALIGN 8
.JTL87: ROR UWR,16;MOV UWRW,XFD;ROL UWR,16;ROR USR,8;MOV USRB,XMAIN;ROR USR,16;Or USRB,4;ROL USR,24;REJUMP'PREFIX=XFD:ISPFX=1:CUROFF=XMAIN:'"UPFFD #FD":
.ALIGN 8
.JTL88: ROR UWR,16;MOV UWRW,XCB;ROL UWR,16;ROR USR,8;MOV USRB,XMAIN;ROR USR,16;Or USRB,4;ROL USR,24;REJUMP'PREFIX=XCB:ISPFX=1:CUROFF=XMAIN:'"UPFCB #CB":
.ALIGN 8
.JTL89: ROR UWR,16;MOV UWRW,XED;ROL UWR,16;ROR USR,8;MOV USRB,XMAIN;ROR USR,16;Or USRB,4;ROL USR,24;REJUMP'PREFIX=XED:ISPFX=1:CUROFF=XMAIN:'"UPFED #ED":
.ALIGN 8
.JTL90: ROR UWR,16;MOV UWRW,XDDCB;ROL UWR,16;ROR USR,8;MOV USRB,XXDCB;ROR USR,16;Or USRB,4;ROL USR,24;REJUMP'PREFIX=XDDCB:ISPFX=1:CUROFF=XXDCB:'"UPFDC #DDCB":
.ALIGN 8
.JTL91: ROR UWR,16;MOV UWRW,XFDCB;ROL UWR,16;ROR USR,8;MOV USRB,XXDCB;ROR USR,16;Or USRB,4;ROL USR,24;REJUMP'PREFIX=XFDCB:ISPFX=1:CUROFF=XXDCB:'"UPFFC #FDCB":
' - - - EXTRA REGISTER SETUP DATA BUS SERIES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
'IUSLWR=92,IUSHWR=93,IUPLWR=94,IUPHWR=95,IUXHWR=96,IUXLWR=97,IUYHWR=98,IUYLWR=99 ' EXTRA REGISTER WRITE TO MEM
.ALIGN 8
.JTL92: ROR UWR,8;ROR UXR,48;MOV UWRB,UXRB;ROL UXR,48;ROL UWR,8;REJUMP'BUS=TP: '"USLWR":
.ALIGN 8
.JTL93: ROR UWR,8;ROR UXR,56;MOV UWRB,UXRB;ROL UXR,56;ROL UWR,8;REJUMP'BUS=TS: '"USHWR":
.ALIGN 8
.JTL94: ROR UWR,8;ROR UPR,48;MOV UWRB,UPRB;ROL UPR,48;ROL UWR,8;REJUMP'BUS=(PC And &HFF): '"UPLWR":
.ALIGN 8
.JTL95: ROR UWR,8;ROR UPR,56;MOV UWRB,UPRB;ROL UPR,56;ROL UWR,8;REJUMP'BUS=(PC SHR 8): '"UPHWR":
.ALIGN 8
.JTL96: ROR UWR,8;ROR UXR,40;MOV UWRB,UXRB;ROL UXR,40;ROL UWR,8;REJUMP'BUS=XH: '"UXHWR":
.ALIGN 8
.JTL97: ROR UWR,8;ROR UXR,32;MOV UWRB,UXRB;ROL UXR,32;ROL UWR,8;REJUMP'BUS=XL: '"UXLWR":
.ALIGN 8
.JTL98: ROR UWR,8;ROR UXR,24;MOV UWRB,UXRB;ROL UXR,24;ROL UWR,8;REJUMP'BUS=YH: '"UYHWR":
.ALIGN 8
.JTL99: ROR UWR,8;ROR UXR,16;MOV UWRB,UXRB;ROL UXR,16;ROL UWR,8;REJUMP'BUS=YL: '"UYLWR":
' - - - LD ALU,R SERIES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' IULLRB=100,IULLRC=101,IULLRD=102,IULLRE=103,IULLRH=104,IULLRL=105,IULLRA=106,IULLRT=107,IULLXL=108,IULLXH=109,IULLYL=110,IULLYH=111,IULLPL=112,IULLPH=113
.ALIGN 8
.JTL100: ROR UMR,56;MOV AL,UMRB;ROL UMR,56;MOV UMRB,AL;REJUMP'ALU=TB: '"ULLRB":
.ALIGN 8
.JTL101: ROR UMR,48;MOV AL,UMRB;ROL UMR,48;MOV UMRB,AL;REJUMP'ALU=TC: '"ULLRC":
.ALIGN 8
.JTL102: ROR UMR,40;MOV AL,UMRB;ROL UMR,40;MOV UMRB,AL;REJUMP'ALU=TD: '"ULLRD":
.ALIGN 8
.JTL103: ROR UMR,32;MOV AL,UMRB;ROL UMR,32;MOV UMRB,AL;REJUMP'ALU=TE: '"ULLRE":
.ALIGN 8
.JTL104: ROR UMR,24;MOV AL,UMRB;ROL UMR,24;MOV UMRB,AL;REJUMP'ALU=TH: '"ULLRH":
.ALIGN 8
.JTL105: ROR UMR,16;MOV AL,UMRB;ROL UMR,16;MOV UMRB,AL;REJUMP'ALU=TL: '"ULLRL":
.ALIGN 8
.JTL106: MOV UMRB,USRB;REJUMP'ALU=T: '"ULLRT":
.ALIGN 8
.JTL107: MOV UMRB,UXRB;REJUMP'ALU=TA: '"ULLRA":
.ALIGN 8
.JTL108: ROR UXR,32;MOV UMRB,UXRB;ROL UXR,32;REJUMP'ALU=XL: '"ULLXL":
.ALIGN 8
.JTL109: ROR UXR,40;MOV UMRB,UXRB;ROL UXR,40;REJUMP'ALU=XH: '"ULLXH":
.ALIGN 8
.JTL110: ROR UXR,16;MOV UMRB,UXRB;ROL UXR,16;REJUMP'ALU=YL: '"ULLYL":
.ALIGN 8
.JTL111: ROR UXR,24;MOV UMRB,UXRB;ROL UXR,24;REJUMP'ALU=YH: '"ULLYH":
.ALIGN 8
.JTL112: ROR UPR,48;MOV UMRB,UPRB;ROL UPR,48;REJUMP'ALU=PC And &HFF: '"ULLPL":
.ALIGN 8
.JTL113: ROR UPR,56;MOV UMRB,UPRB;ROL UPR,56;REJUMP'ALU=PC Shr 8: '"ULLPH":
' - - - LD IR,A SERIES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
' IULRIA=114,IULRRA=115
.ALIGN 8
.JTL114: ROR UWR,56;MOV UWRB,UXRB;ROL UWR,56;REJUMP'TI=TA: '"ULRIA":
.ALIGN 8
.JTL115: ROR UWR,48;MOV UWRB,UXRB;ROL UWR,48;REJUMP'TR=TA: '"ULRRA":
' - - - LD R,ALU SERIES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
' IULRBL=116,IULRCL=117,IULRDL=118,IULREL=119,IULRHL=120,IULRLL=121,IULRAL=122
' IULRTL=123,IULRZL=124,IULRWL=125,IULXLL=126,IULXHL=127,IULYLL=128,IULYHL=129
.ALIGN 8
.JTL116: MOV AL,UMRB;ROR UMR,56;MOV UMRB,AL;ROL UMR,56;REJUMP'TB=ALU: '"ULRBL":
.ALIGN 8
.JTL117: MOV AL,UMRB;ROR UMR,48;MOV UMRB,AL;ROL UMR,48;REJUMP'TC=ALU: '"ULRCL":
.ALIGN 8
.JTL118: MOV AL,UMRB;ROR UMR,40;MOV UMRB,AL;ROL UMR,40;REJUMP'TD=ALU: '"ULRDL":
.ALIGN 8
.JTL119: MOV AL,UMRB;ROR UMR,32;MOV UMRB,AL;ROL UMR,32;REJUMP'TE=ALU: '"ULREL":
.ALIGN 8
.JTL120: MOV AL,UMRB;ROR UMR,24;MOV UMRB,AL;ROL UMR,24;REJUMP'TH=ALU: '"ULRHL":
.ALIGN 8
.JTL121: MOV AL,UMRB;ROR UMR,16;MOV UMRB,AL;ROL UMR,16;REJUMP'TL=ALU: '"ULRLL":
.ALIGN 8
.JTL122: MOV USRB,UMRB;REJUMP'T=ALU: '"ULRTL":
.ALIGN 8
.JTL123: MOV UXRB,UMRB;REJUMP'TA=ALU: '"ULRAL":
.ALIGN 8
.JTL124: ROR UWR,32;MOV UWRB,UMRB;ROL UWR,32;REJUMP'TZ=ALU: '"ULRZL":
.ALIGN 8
.JTL125: ROR UWR,40;MOV UWRB,UMRB;ROL UWR,40;REJUMP'TW=ALU: '"ULRWL":
.ALIGN 8
.JTL126: ROR UXR,32;MOV UXRB,UMRB;ROL UXR,32;REJUMP'XL=ALU:' "ULXLL":
.ALIGN 8
.JTL127: ROR UXR,40;MOV UXRB,UMRB;ROL UXR,40;REJUMP'XH=ALU:' "ULXHL":
.ALIGN 8
.JTL128: ROR UXR,16;MOV UXRB,UMRB;ROL UXR,16;REJUMP'YL=ALU:' "ULYLL":
.ALIGN 8
.JTL129: ROR UXR,24;MOV UXRB,UMRB;ROL UXR,24;REJUMP'YH=ALU: '"ULYHL":
' - - TO FROM T TOSS SERIES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'IULRFT=130,IULXLT=131,IULXHT=132,IULYLT=133,IULYHT=134,IULTXH=135,IULTXL=136,IULTYH=137,IULTYL=138
.ALIGN 8
.JTL130: ROR UXR,8;MOV UXRB,USRB;ROL UXR,8;REJUMP'TF=T: '"ULRFT":
.ALIGN 8
.JTL131: ROR UXR,32;MOV UXRB,USRB;ROL UXR,32;REJUMP'XL=T:' "ULXLT":
.ALIGN 8
.JTL132: ROR UXR,40;MOV UXRB,USRB;ROL UXR,40;REJUMP'XH=T:' "ULXHT":
.ALIGN 8
.JTL133: ROR UXR,16;MOV UXRB,USRB;ROL UXR,16;REJUMP'YL=T:' "ULYLT":
.ALIGN 8
.JTL134: ROR UXR,24;MOV UXRB,USRB;ROL UXR,24;REJUMP'YH=T:' "ULYHT":
.ALIGN 8
.JTL135: ROR UXR,32;MOV USRB,UXRB;ROL UXR,32;REJUMP'T=XL:' "ULTXL":
.ALIGN 8
.JTL136: ROR UXR,40;MOV USRB,UXRB;ROL UXR,40;REJUMP'T=XH:' "ULTXH":
.ALIGN 8
.JTL137: ROR UXR,16;MOV USRB,UXRB;ROL UXR,16;REJUMP'T=YL:' "ULTYL":
.ALIGN 8
.JTL138: ROR UXR,24;MOV USRB,UXRB;ROL UXR,24;REJUMP'T=YH:' "ULTYH":
' - - ALU OP ADD DIRECT SERIES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'IULBADD=139,IULTADD=145
.ALIGN 8
.JTL139: MOV DL,UMRB;ROR UMR,56;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;Add AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Add DL,UMRB;LAHF;CMOVO CX,BX;ROL UMR,56;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CADD+(ALU SHL 1)+(TB Shl 9)):ALU=((ALU+TB) And &HFF):DSA=1'"ULBADD":
.ALIGN 8
.JTL140: MOV DL,UMRB;ROR UMR,48;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;Add AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Add DL,UMRB;LAHF;CMOVO CX,BX;ROL UMR,48;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CADD+(ALU SHL 1)+(TC Shl 9)):ALU=((ALU+TC) And &HFF):DSA=1'"ULCADD":
.ALIGN 8
.JTL141: MOV DL,UMRB;ROR UMR,40;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;Add AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Add DL,UMRB;LAHF;CMOVO CX,BX;ROL UMR,40;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CADD+(ALU SHL 1)+(TD Shl 9)):ALU=((ALU+TD) And &HFF):DSA=1'"ULDADD":
.ALIGN 8
.JTL142: MOV DL,UMRB;ROR UMR,32;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;Add AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Add DL,UMRB;LAHF;CMOVO CX,BX;ROL UMR,32;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CADD+(ALU SHL 1)+(TE Shl 9)):ALU=((ALU+TE) And &HFF):DSA=1'"ULEADD":
.ALIGN 8
.JTL143: MOV DL,UMRB;ROR UMR,24;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;Add AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Add DL,UMRB;LAHF;CMOVO CX,BX;ROL UMR,24;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CADD+(ALU SHL 1)+(TH Shl 9)):ALU=((ALU+TH) And &HFF):DSA=1'"ULHADD":
.ALIGN 8
.JTL144: MOV DL,UMRB;ROR UMR,16;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;Add AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Add DL,UMRB;LAHF;CMOVO CX,BX;ROL UMR,16;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CADD+(ALU SHL 1)+(TL Shl 9)):ALU=((ALU+TL) And &HFF):DSA=1'"ULLADD":
.ALIGN 8
.JTL145: MOV DL,UMRB; ;MOV AL,USRB;MOV AH,DL;SHL AH,4;Shl AL,4;Add AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Add DL,USRB;LAHF;CMOVO CX,BX; ;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CADD+(ALU SHL 1)+(T Shl 9)):ALU=((ALU+T) And &HFF):DSA=1'"ULTADD":
.ALIGN 8
.JTL146: MOV DL,UMRB; ;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;Add AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Add DL,UXRB;LAHF;CMOVO CX,BX; ;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CADD+(ALU SHL 1)+(TA Shl 9)):ALU=((ALU+TA) And &HFF):DSA=1'"ULAADD":
' IULXADD DIRECT SERIES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' IULXSADD=147 ' X ORDER SPH-SPL-IXH-IXL-IYH-IYL
.ALIGN 8
.JTL147: MOV DL,UMRB;ROR UXR,56;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;Add AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Add DL,UXRB;LAHF;CMOVO CX,BX;ROL UXR,56;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CADD+(ALU SHL 1)+(TS Shl 9)):ALU=((ALU+TS) And &HFF):DSA=1'"ULXSADD":
.ALIGN 8
.JTL148: MOV DL,UMRB;ROR UXR,48;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;Add AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Add DL,UXRB;LAHF;CMOVO CX,BX;ROL UXR,48;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CADD+(ALU SHL 1)+(TP Shl 9)):ALU=((ALU+TP) And &HFF):DSA=1'"ULXPADD":
.ALIGN 8
.JTL149: MOV DL,UMRB;ROR UXR,40;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;Add AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Add DL,UXRB;LAHF;CMOVO CX,BX;ROL UXR,40;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CADD+(ALU SHL 1)+(XH Shl 9)):ALU=((ALU+XH) And &HFF):DSA=1'"ULXHADD":
.ALIGN 8
.JTL150: MOV DL,UMRB;ROR UXR,32;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;Add AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Add DL,UXRB;LAHF;CMOVO CX,BX;ROL UXR,32;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CADD+(ALU SHL 1)+(XL Shl 9)):ALU=((ALU+XL) And &HFF):DSA=1'"ULXLADD":
.ALIGN 8
.JTL151: MOV DL,UMRB;ROR UXR,24;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;Add AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Add DL,UXRB;LAHF;CMOVO CX,BX;ROL UXR,24;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CADD+(ALU SHL 1)+(YH Shl 9)):ALU=((ALU+YH) And &HFF):DSA=1'"ULYHADD":
.ALIGN 8
.JTL152: MOV DL,UMRB;ROR UXR,16;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;Add AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Add DL,UXRB;LAHF;CMOVO CX,BX;ROL UXR,16;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CADD+(ALU SHL 1)+(YL Shl 9)):ALU=((ALU+YL) And &HFF):DSA=1'"ULYLADD":
' - - ALU OP ADC DIRECT SERIES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' IULBADC=153,IULTADC=159
.ALIGN 8
.JTL153: MOV DL,UMRB;ROR UMR,56;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;AdC AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;AdC DL,UMRB;LAHF;CMOVO CX,BX;ROL UMR,56;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CADD+(ALU SHL 1)+(TB Shl 9)+TEMP):ALU=((ALU+TB+TEMP) And &HFF):DSA=1'"ULBADC":
.ALIGN 8
.JTL154: MOV DL,UMRB;ROR UMR,48;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;AdC AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;AdC DL,UMRB;LAHF;CMOVO CX,BX;ROL UMR,48;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CADD+(ALU SHL 1)+(TC Shl 9)+TEMP):ALU=((ALU+TC+TEMP) And &HFF):DSA=1'"ULCADC":
.ALIGN 8
.JTL155: MOV DL,UMRB;ROR UMR,40;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;AdC AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;AdC DL,UMRB;LAHF;CMOVO CX,BX;ROL UMR,40;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CADD+(ALU SHL 1)+(TD Shl 9)+TEMP):ALU=((ALU+TD+TEMP) And &HFF):DSA=1'"ULDADC":
.ALIGN 8
.JTL156: MOV DL,UMRB;ROR UMR,32;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;AdC AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;AdC DL,UMRB;LAHF;CMOVO CX,BX;ROL UMR,32;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CADD+(ALU SHL 1)+(TE Shl 9)+TEMP):ALU=((ALU+TE+TEMP) And &HFF):DSA=1'"ULEADC":
.ALIGN 8
.JTL157: MOV DL,UMRB;ROR UMR,24;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;AdC AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;AdC DL,UMRB;LAHF;CMOVO CX,BX;ROL UMR,24;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CADD+(ALU SHL 1)+(TH Shl 9)+TEMP):ALU=((ALU+TH+TEMP) And &HFF):DSA=1'"ULHADC":
.ALIGN 8
.JTL158: MOV DL,UMRB;ROR UMR,16;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;AdC AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;AdC DL,UMRB;LAHF;CMOVO CX,BX;ROL UMR,16;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CADD+(ALU SHL 1)+(TL Shl 9)+TEMP):ALU=((ALU+TL+TEMP) And &HFF):DSA=1'"ULLADC":
.ALIGN 8
.JTL159: MOV DL,UMRB; ;MOV AL,USRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;AdC AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;AdC DL,USRB;LAHF;CMOVO CX,BX; ;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CADD+(ALU SHL 1)+(T Shl 9)+TEMP):ALU=((ALU+T+TEMP) And &HFF):DSA=1'"ULTADC":
.ALIGN 8
.JTL160: MOV DL,UMRB; ;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;AdC AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;AdC DL,UXRB;LAHF;CMOVO CX,BX; ;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CADD+(ALU SHL 1)+(TA Shl 9)+TEMP):ALU=((ALU+TA+TEMP) And &HFF):DSA=1'"ULAADC":
' IULXADC DIRECT SERIES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'IULXSADC=161
.ALIGN 8
.JTL161: MOV DL,UMRB;ROR UXR,56;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;AdC AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;AdC DL,UXRB;LAHF;CMOVO CX,BX;ROL UXR,56;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CADD+(ALU SHL 1)+(TS Shl 9)+TEMP):ALU=((ALU+TS+TEMP) And &HFF):DSA=1'"ULXSADC":
.ALIGN 8
.JTL162: MOV DL,UMRB;ROR UXR,48;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;AdC AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;AdC DL,UXRB;LAHF;CMOVO CX,BX;ROL UXR,48;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CADD+(ALU SHL 1)+(TP Shl 9)+TEMP):ALU=((ALU+TP+TEMP) And &HFF):DSA=1'"ULXPADC":
.ALIGN 8
.JTL163: MOV DL,UMRB;ROR UXR,40;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;AdC AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;AdC DL,UXRB;LAHF;CMOVO CX,BX;ROL UXR,40;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CADD+(ALU SHL 1)+(XH Shl 9)+TEMP):ALU=((ALU+XH+TEMP) And &HFF):DSA=1':"ULXHADC":
.ALIGN 8
.JTL164: MOV DL,UMRB;ROR UXR,32;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;AdC AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;AdC DL,UXRB;LAHF;CMOVO CX,BX;ROL UXR,32;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CADD+(ALU SHL 1)+(XL Shl 9)+TEMP):ALU=((ALU+XL+TEMP) And &HFF):DSA=1':"ULXLADC":
.ALIGN 8
.JTL165: MOV DL,UMRB;ROR UXR,24;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;AdC AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;AdC DL,UXRB;LAHF;CMOVO CX,BX;ROL UXR,24;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CADD+(ALU SHL 1)+(YH Shl 9)+TEMP):ALU=((ALU+YH+TEMP) And &HFF):DSA=1':"ULYHADC":
.ALIGN 8
.JTL166: MOV DL,UMRB;ROR UXR,16;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;AdC AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;AdC DL,UXRB;LAHF;CMOVO CX,BX;ROL UXR,16;MOV UMRB,DL;And AX,63999;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CADD+(ALU SHL 1)+(YL Shl 9)+TEMP):ALU=((ALU+YL+TEMP) And &HFF):DSA=1':"ULYLADC":
' IULRSUB DIRECT SERIES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'IULBSUB=167,IULTSUB=173
.ALIGN 8
.JTL167: MOV DL,UMRB;ROR UMR,56;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UMRB;LAHF;CMOVO CX,BX;ROL UMR,56;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CSUB+(ALU SHL 1)+(TB Shl 9)):ALU=((ALU-TB) And &HFF):DSA=1'"ULBSUB":
.ALIGN 8
.JTL168: MOV DL,UMRB;ROR UMR,48;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UMRB;LAHF;CMOVO CX,BX;ROL UMR,48;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CSUB+(ALU SHL 1)+(TC Shl 9)):ALU=((ALU-TC) And &HFF):DSA=1'"ULCSUB":
.ALIGN 8
.JTL169: MOV DL,UMRB;ROR UMR,40;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UMRB;LAHF;CMOVO CX,BX;ROL UMR,40;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CSUB+(ALU SHL 1)+(TD Shl 9)):ALU=((ALU-TD) And &HFF):DSA=1'"ULDSUB":
.ALIGN 8
.JTL170: MOV DL,UMRB;ROR UMR,32;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UMRB;LAHF;CMOVO CX,BX;ROL UMR,32;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CSUB+(ALU SHL 1)+(TE Shl 9)):ALU=((ALU-TE) And &HFF):DSA=1'"ULESUB":
.ALIGN 8
.JTL171: MOV DL,UMRB;ROR UMR,24;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UMRB;LAHF;CMOVO CX,BX;ROL UMR,24;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CSUB+(ALU SHL 1)+(TH Shl 9)):ALU=((ALU-TH) And &HFF):DSA=1'"ULHSUB":
.ALIGN 8
.JTL172: MOV DL,UMRB;ROR UMR,16;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UMRB;LAHF;CMOVO CX,BX;ROL UMR,16;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CSUB+(ALU SHL 1)+(TL Shl 9)):ALU=((ALU-TL) And &HFF):DSA=1'"ULLSUB":
.ALIGN 8
.JTL173: MOV DL,UMRB; ;MOV AL,USRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,USRB;LAHF;CMOVO CX,BX; ;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CSUB+(ALU SHL 1)+(T Shl 9)):ALU=((ALU-T) And &HFF):DSA=1'"ULTSUB":
.ALIGN 8
.JTL174: MOV DL,UMRB; ;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UXRB;LAHF;CMOVO CX,BX; ;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CSUB+(ALU SHL 1)+(TA Shl 9)):ALU=((ALU-TA) And &HFF):DSA=1'"ULASUB":
' IULXSUB DIRECT SERIES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'IULXSSUB=175
.ALIGN 8
.JTL175: MOV DL,UMRB;ROR UXR,56;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UXRB;LAHF;CMOVO CX,BX;ROL UXR,56;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CSUB+(ALU SHL 1)+(TS Shl 9)):ALU=((ALU-TS) And &HFF):DSA=1'"ULXSSUB":
.ALIGN 8
.JTL176: MOV DL,UMRB;ROR UXR,48;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UXRB;LAHF;CMOVO CX,BX;ROL UXR,48;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CSUB+(ALU SHL 1)+(TP Shl 9)):ALU=((ALU-TP) And &HFF):DSA=1'"ULXPSUB":
.ALIGN 8
.JTL177: MOV DL,UMRB;ROR UXR,40;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UXRB;LAHF;CMOVO CX,BX;ROL UXR,40;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CSUB+(ALU SHL 1)+(XH Shl 9)):ALU=((ALU-XH) And &HFF):DSA=1'"ULXHSUB":
.ALIGN 8
.JTL178: MOV DL,UMRB;ROR UXR,32;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UXRB;LAHF;CMOVO CX,BX;ROL UXR,32;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CSUB+(ALU SHL 1)+(XL Shl 9)):ALU=((ALU-XL) And &HFF):DSA=1'"ULXLSUB":
.ALIGN 8
.JTL179: MOV DL,UMRB;ROR UXR,24;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UXRB;LAHF;CMOVO CX,BX;ROL UXR,24;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CSUB+(ALU SHL 1)+(YH Shl 9)):ALU=((ALU-YH) And &HFF):DSA=1'"ULYHSUB":
.ALIGN 8
.JTL180: MOV DL,UMRB;ROR UXR,16;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UXRB;LAHF;CMOVO CX,BX;ROL UXR,16;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CSUB+(ALU SHL 1)+(YL Shl 9)):ALU=((ALU-YL) And &HFF):DSA=1'"ULYLSUB":
' IULRSBC DIRECT SERIES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'IULRSBC=181,IULTSBC=187
.ALIGN 8
.JTL181: MOV DL,UMRB;ROR UMR,56;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;SBB AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;SBB DL,UMRB;LAHF;CMOVO CX,BX;ROL UMR,56;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CSUB+(ALU SHL 1)+(TB Shl 9)+TEMP):ALU=((ALU-TB-TEMP) And &HFF):DSA=1'"ULBSBC":
.ALIGN 8
.JTL182: MOV DL,UMRB;ROR UMR,48;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;SBB AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;SBB DL,UMRB;LAHF;CMOVO CX,BX;ROL UMR,48;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CSUB+(ALU SHL 1)+(TC Shl 9)+TEMP):ALU=((ALU-TC-TEMP) And &HFF):DSA=1'"ULCSBC":
.ALIGN 8
.JTL183: MOV DL,UMRB;ROR UMR,40;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;SBB AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;SBB DL,UMRB;LAHF;CMOVO CX,BX;ROL UMR,40;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CSUB+(ALU SHL 1)+(TD Shl 9)+TEMP):ALU=((ALU-TD-TEMP) And &HFF):DSA=1'"ULDSBC":
.ALIGN 8
.JTL184: MOV DL,UMRB;ROR UMR,32;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;SBB AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;SBB DL,UMRB;LAHF;CMOVO CX,BX;ROL UMR,32;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CSUB+(ALU SHL 1)+(TE Shl 9)+TEMP):ALU=((ALU-TE-TEMP) And &HFF):DSA=1'"ULESBC":
.ALIGN 8
.JTL185: MOV DL,UMRB;ROR UMR,24;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;SBB AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;SBB DL,UMRB;LAHF;CMOVO CX,BX;ROL UMR,24;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CSUB+(ALU SHL 1)+(TH Shl 9)+TEMP):ALU=((ALU-TH-TEMP) And &HFF):DSA=1'"ULHSBC":
.ALIGN 8
.JTL186: MOV DL,UMRB;ROR UMR,16;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;SBB AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;SBB DL,UMRB;LAHF;CMOVO CX,BX;ROL UMR,16;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CSUB+(ALU SHL 1)+(TL Shl 9)+TEMP):ALU=((ALU-TL-TEMP) And &HFF):DSA=1'"ULLSBC":
.ALIGN 8
.JTL187: MOV DL,UMRB; ;MOV AL,USRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;SBB AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;SBB DL,USRB;LAHF;CMOVO CX,BX; ;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CSUB+(ALU SHL 1)+(T Shl 9)+TEMP):ALU=((ALU-T-TEMP) And &HFF):DSA=1'"ULTSBC":
.ALIGN 8
.JTL188: MOV DL,UMRB; ;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;SBB AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;SBB DL,UXRB;LAHF;CMOVO CX,BX; ;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CSUB+(ALU SHL 1)+(TA Shl 9)+TEMP):ALU=((ALU-TA-TEMP) And &HFF):DSA=1'"ULASBC":
' IULXSBC DIRECT SERIES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'IULXSSBC=189
.ALIGN 8
.JTL189: MOV DL,UMRB;ROR UXR,56;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;SBB AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;SBB DL,UXRB;LAHF;CMOVO CX,BX;ROL UXR,56;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CSUB+(ALU SHL 1)+(TS Shl 9)+TEMP):ALU=((ALU-TS-TEMP) And &HFF):DSA=1'"ULXSSBC":
.ALIGN 8
.JTL190: MOV DL,UMRB;ROR UXR,48;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;SBB AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;SBB DL,UXRB;LAHF;CMOVO CX,BX;ROL UXR,48;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CSUB+(ALU SHL 1)+(TP Shl 9)+TEMP):ALU=((ALU-TP-TEMP) And &HFF):DSA=1'"ULXPSBC":
.ALIGN 8
.JTL191: MOV DL,UMRB;ROR UXR,40;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;SBB AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;SBB DL,UXRB;LAHF;CMOVO CX,BX;ROL UXR,40;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CSUB+(ALU SHL 1)+(XH Shl 9)+TEMP):ALU=((ALU-XH-TEMP) And &HFF):DSA=1':"ULXHSBC":
.ALIGN 8
.JTL192: MOV DL,UMRB;ROR UXR,32;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;SBB AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;SBB DL,UXRB;LAHF;CMOVO CX,BX;ROL UXR,32;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CSUB+(ALU SHL 1)+(XL Shl 9)+TEMP):ALU=((ALU-XL-TEMP) And &HFF):DSA=1':"ULXLSBC":
.ALIGN 8
.JTL193: MOV DL,UMRB;ROR UXR,24;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;SBB AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;SBB DL,UXRB;LAHF;CMOVO CX,BX;ROL UXR,24;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CSUB+(ALU SHL 1)+(YH Shl 9)+TEMP):ALU=((ALU-YH-TEMP) And &HFF):DSA=1':"ULYHSBC":
.ALIGN 8
.JTL194: MOV DL,UMRB;ROR UXR,16;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;BT UWR,0;SBB AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;BT UWR,0;SBB DL,UXRB;LAHF;CMOVO CX,BX;ROL UXR,16;MOV UMRB,DL;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'TEMP=FLG And 1:FLG=*(LUT+CSUB+(ALU SHL 1)+(YL Shl 9)+TEMP):ALU=((ALU-YL-TEMP) And &HFF):DSA=1':"ULYLSBC":
' ADD HL,RR FLAGS --***-0C SO S/Z/PV KEEP INTACT 'IUFQSZP=195
.ALIGN 8
.JTL195: MOV AX,UXRW;MOV AL,AH;And AL,MASKSZP;And UWRB,MASK5H3NC;Or UWRB,AL;REJUMP'FLG=(TF And &B11000100)+(FLG And &B00111011):'"UFQSZP": ' SAVE SZP
' INCDEC SIMPLE - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
'IUOINC=196,IUODEC=197,OBSOLETE-IUFQID=198,
.ALIGN 8
.JTL196: MOV DL,UMRB;MOV AL,1;MOV AH,DL;SHL AH,4;Shl AL,4;Add AL,AH;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Add DL,1;LAHF;CMOVO CX,BX;MOV UMRB,DL;And AX,63743;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;AND UWRB,1;Or UWRB,DL;BTS USR,24;REJUMP'FLG=(*(LUT+CADD+(ALU SHL 1)+(1 Shl 9))And 254)+(FLG And 1):ALU=((ALU+1) And &HFF):'"UOINC": SAVE CARRY
.ALIGN 8
.JTL197: MOV DL,UMRB;MOV AL,1;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,1;LAHF;CMOVO CX,BX;MOV UMRB,DL;BTS AX,9;And AX,64255;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;AND UWRB,1;Or UWRB,DL;BTS USR,24;REJUMP'FLG=(*(LUT+CSUB+(ALU SHL 1)+(1 Shl 9))And 254)+(FLG And 1):ALU=((ALU-1) And &HFF):'"UODEC": SAVE CARRY
.ALIGN 8
.JTL198: REJUMP'FREE 
' IULRAND DIRECT SERIES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'IULBAND=199,IULTAND=205 ' COPY BIT 7,5,3,N=0,C=0,H=1, SET Z, LUT FOR PARITY ADD 4
.ALIGN 8
.JTL199: MOV BL,UMRB;ROR UMR,56;And BL,UMRB;LAHF;MOV AL,AH;ROL UMR,56;MOV UMRB,BL;And AL,MASKZP;BTS AX,4;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CAND+ALU+(TB Shl 8)):ALU=(ALU And TB):DSA=1'"ULBAND":
.ALIGN 8
.JTL200: MOV BL,UMRB;ROR UMR,48;And BL,UMRB;LAHF;MOV AL,AH;ROL UMR,48;MOV UMRB,BL;And AL,MASKZP;BTS AX,4;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CAND+ALU+(TC Shl 8)):ALU=(ALU And TC):DSA=1'"ULCAND":
.ALIGN 8
.JTL201: MOV BL,UMRB;ROR UMR,40;And BL,UMRB;LAHF;MOV AL,AH;ROL UMR,40;MOV UMRB,BL;And AL,MASKZP;BTS AX,4;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CAND+ALU+(TD Shl 8)):ALU=(ALU And TD):DSA=1'"ULDAND":
.ALIGN 8
.JTL202: MOV BL,UMRB;ROR UMR,32;And BL,UMRB;LAHF;MOV AL,AH;ROL UMR,32;MOV UMRB,BL;And AL,MASKZP;BTS AX,4;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CAND+ALU+(TE Shl 8)):ALU=(ALU And TE):DSA=1'"ULEAND":
.ALIGN 8
.JTL203: MOV BL,UMRB;ROR UMR,24;And BL,UMRB;LAHF;MOV AL,AH;ROL UMR,24;MOV UMRB,BL;And AL,MASKZP;BTS AX,4;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CAND+ALU+(TH Shl 8)):ALU=(ALU And TH):DSA=1'"ULHAND":
.ALIGN 8
.JTL204: MOV BL,UMRB;ROR UMR,16;And BL,UMRB;LAHF;MOV AL,AH;ROL UMR,16;MOV UMRB,BL;And AL,MASKZP;BTS AX,4;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CAND+ALU+(TL Shl 8)):ALU=(ALU And TL):DSA=1'"ULLAND":
.ALIGN 8
.JTL205: MOV BL,UMRB; ;And BL,USRB;LAHF;MOV AL,AH; ;MOV UMRB,BL;And AL,MASKZP;BTS AX,4;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CAND+ALU+(T Shl 8)):ALU=(ALU And T):DSA=1'"ULTAND":
.ALIGN 8
.JTL206: MOV BL,UMRB; ;And BL,UXRB;LAHF;MOV AL,AH; ;MOV UMRB,BL;And AL,MASKZP;BTS AX,4;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CAND+ALU+(TA Shl 8)):ALU=(ALU And TA):DSA=1'"ULAAND":
'IULXSAND=207 ' IULXAND DIRECT SERIES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.ALIGN 8
.JTL207: MOV BL,UMRB;ROR UXR,56;And BL,UXRB;LAHF;MOV AL,AH;ROL UXR,56;MOV UMRB,BL;And AL,MASKZP;BTS AX,4;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CAND+ALU+(TS SHL 8)):ALU=((ALU And TS)):DSA=1'"ULXSAND":
.ALIGN 8
.JTL208: MOV BL,UMRB;ROR UXR,48;And BL,UXRB;LAHF;MOV AL,AH;ROL UXR,48;MOV UMRB,BL;And AL,MASKZP;BTS AX,4;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CAND+ALU+(TP SHL 8)):ALU=((ALU And TP)):DSA=1'"ULXPCAND":
.ALIGN 8
.JTL209: MOV BL,UMRB;ROR UXR,40;And BL,UXRB;LAHF;MOV AL,AH;ROL UXR,40;MOV UMRB,BL;And AL,MASKZP;BTS AX,4;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CAND+ALU+(XH SHL 8)):ALU=((ALU And XH)):DSA=1'"ULXHAND":
.ALIGN 8
.JTL210: MOV BL,UMRB;ROR UXR,32;And BL,UXRB;LAHF;MOV AL,AH;ROL UXR,32;MOV UMRB,BL;And AL,MASKZP;BTS AX,4;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CAND+ALU+(XL SHL 8)):ALU=((ALU And XL)):DSA=1'"ULXLAND":
.ALIGN 8
.JTL211: MOV BL,UMRB;ROR UXR,24;And BL,UXRB;LAHF;MOV AL,AH;ROL UXR,24;MOV UMRB,BL;And AL,MASKZP;BTS AX,4;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CAND+ALU+(YH SHL 8)):ALU=((ALU And YH)):DSA=1'"ULYHAND":
.ALIGN 8
.JTL212: MOV BL,UMRB;ROR UXR,16;And BL,UXRB;LAHF;MOV AL,AH;ROL UXR,16;MOV UMRB,BL;And AL,MASKZP;BTS AX,4;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CAND+ALU+(YL SHL 8)):ALU=((ALU And YL)):DSA=1'"ULYLAND":
' IULRXOR DIRECT SERIES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'IULBXOR=213,IULTXOR=219 COPY BIT 7,5,HNC=0, SET Z, LUT PARITY
.ALIGN 8
.JTL213: MOV BL,UMRB;ROR UMR,56;Xor BL,UMRB;LAHF;MOV AL,AH;ROL UMR,56;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CXOR+ALU+(TB Shl 8)):ALU=(ALU XOR TB):DSA=1'"ULBXOR":
.ALIGN 8
.JTL214: MOV BL,UMRB;ROR UMR,48;Xor BL,UMRB;LAHF;MOV AL,AH;ROL UMR,48;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CXOR+ALU+(TC Shl 8)):ALU=(ALU XOR TC):DSA=1'"ULCXOR":
.ALIGN 8
.JTL215: MOV BL,UMRB;ROR UMR,40;Xor BL,UMRB;LAHF;MOV AL,AH;ROL UMR,40;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CXOR+ALU+(TD Shl 8)):ALU=(ALU XOR TD):DSA=1'"ULDXOR":
.ALIGN 8
.JTL216: MOV BL,UMRB;ROR UMR,32;Xor BL,UMRB;LAHF;MOV AL,AH;ROL UMR,32;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CXOR+ALU+(TE Shl 8)):ALU=(ALU XOR TE):DSA=1'"ULEXOR":
.ALIGN 8
.JTL217: MOV BL,UMRB;ROR UMR,24;Xor BL,UMRB;LAHF;MOV AL,AH;ROL UMR,24;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CXOR+ALU+(TH Shl 8)):ALU=(ALU XOR TH):DSA=1'"ULHXOR":
.ALIGN 8
.JTL218: MOV BL,UMRB;ROR UMR,16;Xor BL,UMRB;LAHF;MOV AL,AH;ROL UMR,16;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CXOR+ALU+(TL Shl 8)):ALU=(ALU XOR TL):DSA=1'"ULLXOR":
.ALIGN 8
.JTL219: MOV BL,UMRB; ;Xor BL,USRB;LAHF;MOV AL,AH; ;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CXOR+ALU+(T Shl 8)):ALU=(ALU XOR T):DSA=1'"ULTXOR":
.ALIGN 8
.JTL220: MOV BL,UMRB; ;Xor BL,UXRB;LAHF;MOV AL,AH; ;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CXOR+ALU+(TA Shl 8)):ALU=(ALU XOR TA):DSA=1'"ULAXOR":
'IULXSXOR=221 ' IULXXOR DIRECT SERIES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.ALIGN 8
.JTL221: MOV BL,UMRB;ROR UXR,56;Xor BL,UXRB;LAHF;MOV AL,AH;ROL UXR,56;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CXOR+ALU+(TS SHL 8)):ALU=((ALU XOR TS)):DSA=1'"ULXSXOR":
.ALIGN 8
.JTL222: MOV BL,UMRB;ROR UXR,48;Xor BL,UXRB;LAHF;MOV AL,AH;ROL UXR,48;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CXOR+ALU+(TP SHL 8)):ALU=((ALU XOR TP)):DSA=1'"ULXPXOR":
.ALIGN 8
.JTL223: MOV BL,UMRB;ROR UXR,40;Xor BL,UXRB;LAHF;MOV AL,AH;ROL UXR,40;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CXOR+ALU+(XH SHL 8)):ALU=((ALU XOR XH)):DSA=1'"ULXHXOR":
.ALIGN 8
.JTL224: MOV BL,UMRB;ROR UXR,32;Xor BL,UXRB;LAHF;MOV AL,AH;ROL UXR,32;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CXOR+ALU+(XL SHL 8)):ALU=((ALU XOR XL)):DSA=1'"ULXLXOR":
.ALIGN 8
.JTL225: MOV BL,UMRB;ROR UXR,24;Xor BL,UXRB;LAHF;MOV AL,AH;ROL UXR,24;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CXOR+ALU+(YH SHL 8)):ALU=((ALU XOR YH)):DSA=1'"ULYHXOR":
.ALIGN 8
.JTL226: MOV BL,UMRB;ROR UXR,16;Xor BL,UXRB;LAHF;MOV AL,AH;ROL UXR,16;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+CXOR+ALU+(YL SHL 8)):ALU=((ALU XOR YL)):DSA=1'"ULYLXOR":
' IULROR DIRECT SERIES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'IULBOR=227,IULTOR=233
.ALIGN 8
.JTL227: MOV BL,UMRB;ROR UMR,56;Or BL,UMRB;LAHF;MOV AL,AH;ROL UMR,56;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+COR+ALU+(TB Shl 8)):ALU=(ALU OR TB):DSA=1'"ULBOR":
.ALIGN 8
.JTL228: MOV BL,UMRB;ROR UMR,48;Or BL,UMRB;LAHF;MOV AL,AH;ROL UMR,48;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+COR+ALU+(TC Shl 8)):ALU=(ALU OR TC):DSA=1'"ULCOR":
.ALIGN 8
.JTL229: MOV BL,UMRB;ROR UMR,40;Or BL,UMRB;LAHF;MOV AL,AH;ROL UMR,40;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+COR+ALU+(TD Shl 8)):ALU=(ALU OR TD):DSA=1'"ULDOR":
.ALIGN 8
.JTL230: MOV BL,UMRB;ROR UMR,32;Or BL,UMRB;LAHF;MOV AL,AH;ROL UMR,32;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+COR+ALU+(TE Shl 8)):ALU=(ALU OR TE):DSA=1'"ULEOR":
.ALIGN 8
.JTL231: MOV BL,UMRB;ROR UMR,24;Or BL,UMRB;LAHF;MOV AL,AH;ROL UMR,24;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+COR+ALU+(TH Shl 8)):ALU=(ALU OR TH):DSA=1'"ULHOR":
.ALIGN 8
.JTL232: MOV BL,UMRB;ROR UMR,16;Or BL,UMRB;LAHF;MOV AL,AH;ROL UMR,16;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+COR+ALU+(TL Shl 8)):ALU=(ALU OR TL):DSA=1'"ULLOR":
.ALIGN 8
.JTL233: MOV BL,UMRB; ;Or BL,USRB;LAHF;MOV AL,AH; ;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+COR+ALU+(T Shl 8)):ALU=(ALU OR T):DSA=1'"ULTOR":
.ALIGN 8
.JTL234: MOV BL,UMRB; ;Or BL,UXRB;LAHF;MOV AL,AH; ;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+COR+ALU+(TA Shl 8)):ALU=(ALU OR TA):DSA=1'"ULAOR":
'IULXSOR=235 ' IULXOR DIRECT SERIES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.ALIGN 8
.JTL235: MOV BL,UMRB;ROR UXR,56;Or BL,UXRB;LAHF;MOV AL,AH;ROL UXR,56;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+COR+ALU+(TS SHL 8)):ALU=((ALU OR TS)):DSA=1'"ULXSOR":
.ALIGN 8
.JTL236: MOV BL,UMRB;ROR UXR,48;Or BL,UXRB;LAHF;MOV AL,AH;ROL UXR,48;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+COR+ALU+(TP SHL 8)):ALU=((ALU OR TP)):DSA=1'"ULXPOR":
.ALIGN 8
.JTL237: MOV BL,UMRB;ROR UXR,40;Or BL,UXRB;LAHF;MOV AL,AH;ROL UXR,40;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+COR+ALU+(XH SHL 8)):ALU=((ALU OR XH)):DSA=1'"ULXHOR":
.ALIGN 8
.JTL238: MOV BL,UMRB;ROR UXR,32;Or BL,UXRB;LAHF;MOV AL,AH;ROL UXR,32;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+COR+ALU+(XL SHL 8)):ALU=((ALU OR XL)):DSA=1'"ULXLOR":
.ALIGN 8
.JTL239: MOV BL,UMRB;ROR UXR,24;Or BL,UXRB;LAHF;MOV AL,AH;ROL UXR,24;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+COR+ALU+(YH SHL 8)):ALU=((ALU OR YH)):DSA=1'"ULYHOR":
.ALIGN 8
.JTL240: MOV BL,UMRB;ROR UXR,16;Or BL,UXRB;LAHF;MOV AL,AH;ROL UXR,16;MOV UMRB,BL;And AL,MASKZP;And BL,MASKS53;Or AL,BL;MOV UWRB,AL;BTS USR,24;REJUMP'FLG=*(LUT+COR+ALU+(YL SHL 8)):ALU=((ALU OR YL)):DSA=1'"ULYLOR":
' IULRCP DIRECT SERIES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'IULBCP=241,IULTCP=247 COPY BIT 7, SET Z, !!! 5,3 ARE FROM RIGHT OPERAND, AND SET N
.ALIGN 8
.JTL241: MOV DL,UMRB;ROR UMR,56;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UMRB;LAHF;CMOVO CX,BX;MOV DL,UMRB;ROL UMR,56;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CCP+ALU+(TB Shl 8)):DSA=1'"ULBCP":
.ALIGN 8
.JTL242: MOV DL,UMRB;ROR UMR,48;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UMRB;LAHF;CMOVO CX,BX;MOV DL,UMRB;ROL UMR,48;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CCP+ALU+(TC Shl 8)):DSA=1'"ULCCP":
.ALIGN 8
.JTL243: MOV DL,UMRB;ROR UMR,40;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UMRB;LAHF;CMOVO CX,BX;MOV DL,UMRB;ROL UMR,40;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CCP+ALU+(TD Shl 8)):DSA=1'"ULDCP":
.ALIGN 8
.JTL244: MOV DL,UMRB;ROR UMR,32;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UMRB;LAHF;CMOVO CX,BX;MOV DL,UMRB;ROL UMR,32;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CCP+ALU+(TE Shl 8)):DSA=1'"ULECP":
.ALIGN 8
.JTL245: MOV DL,UMRB;ROR UMR,24;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UMRB;LAHF;CMOVO CX,BX;MOV DL,UMRB;ROL UMR,24;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CCP+ALU+(TH Shl 8)):DSA=1'"ULHCP":
.ALIGN 8
.JTL246: MOV DL,UMRB;ROR UMR,16;MOV AL,UMRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UMRB;LAHF;CMOVO CX,BX;MOV DL,UMRB;ROL UMR,16;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CCP+ALU+(TL Shl 8)):DSA=1'"ULLCP":
.ALIGN 8
.JTL247: MOV DL,UMRB; ;MOV AL,USRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,USRB;LAHF;CMOVO CX,BX;MOV DL,USRB; ;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CCP+ALU+(T Shl 8)):DSA=1'"ULTCP":
.ALIGN 8
.JTL248: MOV DL,UMRB; ;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UXRB;LAHF;CMOVO CX,BX;MOV DL,UXRB; ;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CCP+ALU+(TA Shl 8)):DSA=1'"ULACP":
'IULXSCP=249 ' IULXCP DIRECT SERIES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.ALIGN 8
.JTL249: MOV DL,UMRB;ROR UXR,56;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UXRB;LAHF;CMOVO CX,BX;MOV DL,UXRB;ROL UXR,56;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CCP+ALU+(TS SHL 8)):DSA=1'"ULXSCP":
.ALIGN 8
.JTL250: MOV DL,UMRB;ROR UXR,48;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UXRB;LAHF;CMOVO CX,BX;MOV DL,UXRB;ROL UXR,48;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CCP+ALU+(TP Shl 8)):DSA=1'"ULXPCP":
.ALIGN 8
.JTL251: MOV DL,UMRB;ROR UXR,40;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UXRB;LAHF;CMOVO CX,BX;MOV DL,UXRB;ROL UXR,40;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CCP+ALU+(XH SHL 8)):DSA=1'"ULXHCP":
.ALIGN 8
.JTL252: MOV DL,UMRB;ROR UXR,32;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UXRB;LAHF;CMOVO CX,BX;MOV DL,UXRB;ROL UXR,32;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CCP+ALU+(XL SHL 8)):DSA=1'"ULXLCP":
.ALIGN 8
.JTL253: MOV DL,UMRB;ROR UXR,24;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UXRB;LAHF;CMOVO CX,BX;MOV DL,UXRB;ROL UXR,24;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CCP+ALU+(YH SHL 8)):DSA=1'"ULYHCP":
.ALIGN 8
.JTL254: MOV DL,UMRB;ROR UXR,16;MOV AL,UXRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,UXRB;LAHF;CMOVO CX,BX;MOV DL,UXRB;ROL UXR,16;BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;MOV UWRB,DL;BTS USR,24;REJUMP'FLG=*(LUT+CCP+ALU+(YL SHL 8)):DSA=1'"ULYLCP":
' - PROOT SHIFTS AND FLG CORRECT OBSOLETE RLCA/RLA/RRCA/RRA --503-0C IUFQSH=255
.ALIGN 8
.JTL255: REJUMP'FREE 
' IUORLC=256,IUORRC=257,IUORL=258,IUORR=259,IUOSLA=260,IUOSRA=261,IUOSLL=262,IUOSRL=263 MAIN SHIFTS RLC/RL/RRC/RR SZ503P0C
.ALIGN 8
.JTL256: MOV CL,UMRB;ROL CL,1;LAHF;MOV AL,AH;And AL,1;OR CL,CL;LAHF;And AH,MASKSZP;Or AL,AH;MOV BL,CL;And BL,MASKF53;Or AL,BL;MOV UWRB,AL;MOV UMRB,CL;BTS USR,24;REJUMP'ALU=*(RLC+ALU):FLG=ALU Shr 8:ALU And= &HFF:DSA=1 '"UORLC":
.ALIGN 8
.JTL257: MOV CL,UMRB;ROR CL,1;LAHF;MOV AL,AH;And AL,1;OR CL,CL;LAHF;And AH,MASKSZP;Or AL,AH;MOV BL,CL;And BL,MASKF53;Or AL,BL;MOV UWRB,AL;MOV UMRB,CL;BTS USR,24;REJUMP'ALU=*(RRC+ALU):FLG=ALU Shr 8:ALU And= &HFF:DSA=1 '"UORRC":
.ALIGN 8
.JTL258: MOV CL,UMRB;BT UWR,0;RCL CL,1;LAHF;MOV AL,AH;And AL,1;OR CL,CL;LAHF;And AH,MASKSZP;Or AL,AH;MOV BL,CL;And BL,MASKF53;Or AL,BL;MOV UWRB,AL;MOV UMRB,CL;BTS USR,24;REJUMP'ALU=*(RL+ALU)Shr ((FLG And 1) Shl 3):FLG=(ALU Shr 16) And &HFF:ALU And= &HFF:DSA=1 '"UORL": ' HERE QUAD ENTRY TABLE VV/FF
.ALIGN 8
.JTL259: MOV CL,UMRB;BT UWR,0;RCR CL,1;LAHF;MOV AL,AH;And AL,1;OR CL,CL;LAHF;And AH,MASKSZP;Or AL,AH;MOV BL,CL;And BL,MASKF53;Or AL,BL;MOV UWRB,AL;MOV UMRB,CL;BTS USR,24;REJUMP'ALU=*(RR+ALU)Shr ((FLG And 1) Shl 3):FLG=(ALU Shr 16) And &HFF:ALU And= &HFF:DSA=1 '"UORR": ' HERE QUAD ENTRY TABLE VV/FF
.ALIGN 8
.JTL260: MOV CL,UMRB;CLC;RCL CL,1;LAHF;MOV AL,AH;And AL,1;OR CL,CL;LAHF;And AH,MASKSZP;Or AL,AH;MOV BL,CL;And BL,MASKF53;Or AL,BL;MOV UWRB,AL;MOV UMRB,CL;BTS USR,24;REJUMP'ALU=*(SLA+ALU):FLG=ALU Shr 8:ALU And= &HFF:DSA=1 '"UOSLA":
.ALIGN 8
.JTL261: MOV CL,UMRB;BT CX,7;RCR CL,1;LAHF;MOV AL,AH;And AL,1;OR CL,CL;LAHF;And AH,MASKSZP;Or AL,AH;MOV BL,CL;And BL,MASKF53;Or AL,BL;MOV UWRB,AL;MOV UMRB,CL;BTS USR,24;REJUMP'ALU=*(SRA+ALU):FLG=ALU Shr 8:ALU And= &HFF:DSA=1 '"UOSRA":
.ALIGN 8
.JTL262: MOV CL,UMRB;STC;RCL CL,1;LAHF;MOV AL,AH;And AL,1;OR CL,CL;LAHF;And AH,MASKSZP;Or AL,AH;MOV BL,CL;And BL,MASKF53;Or AL,BL;MOV UWRB,AL;MOV UMRB,CL;BTS USR,24;REJUMP'ALU=*(SLL+ALU):FLG=ALU Shr 8:ALU And= &HFF:DSA=1 '"UOSLL":
.ALIGN 8
.JTL263: MOV CL,UMRB;CLC;RCR CL,1;LAHF;MOV AL,AH;And AL,1;OR CL,CL;LAHF;And AH,MASKSZP;Or AL,AH;MOV BL,CL;And BL,MASKF53;Or AL,BL;MOV UWRB,AL;MOV UMRB,CL;BTS USR,24;REJUMP'ALU=*(SRL+ALU):FLG=ALU Shr 8:ALU And= &HFF:DSA=1 '"UOSRL":
'IUORES=264,IUOSET=265
.ALIGN 8
.JTL264: MOV AX,UMRW;MOV CL,AH;Shr CL,3;And CL,7;MOV AL,254;ROL AL,CL;And UMRB,AL;BTS USR,24;REJUMP'ALU=ALU And ((1 Shl ((CODE Shr 3) And 7)) Xor &HFF):DSA=1'"UORES":
.ALIGN 8
.JTL265: MOV AX,UMRW;MOV CL,AH;Shr CL,3;And CL,7;MOV AL,1;ROL AL,CL;Or UMRB,AL;BTS USR,24;REJUMP'ALU=ALU Or (1 Shl ((CODE Shr 3) And 7)):DSA=1':"UOSET":
' $ CALCULATION HERE - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'IULTSADD=266,IUOSADDC=267 0-127 IS DIRECT ADDITION, 128 IS -128, 128-255 IS -128 TO -1, NEED ONLY N AND CARRY, FLAGS WILL BE DISCARDED BY UALF
.ALIGN 8
.JTL266: '"ULTSADD": 
 ;MOV AX,32768;MOV AL,USRB;And AL,127;Sub AH,AL;'AH=128 AL=T AND 127 TEMP=128-(T And 127)
MOVZX DX,UMRB;MOV CX,DX;' DX=ALU,CX=ALU
Sub DL,AH;MOV BL,1;RCL BX,1;' ALU=((ALU-TEMP) And &HFF) DX=SUB,BX=N+CARRY 
Add CL,AL;MOV AL,0;RCL AX,1;'((ALU+TEMP) And &HFF) CX=ADD,AX=N+CARRY
BTR USR,7;CMOVC CX,DX;CMOVC AX,BX;' SELECT SUB OR ADD
And UWRB,252;Or UWRB,AL;MOV UMRB,CL;' COPY N+CARRY COPY RESULT
REJUMP 'If T And 128 Then TEMP=128-(T And 127):FLG=*(LUT+CSUB+(ALU Shl 1)+(TEMP Shl 9)):ALU=((ALU-TEMP) And &HFF) Else TEMP=T And 127:FLG=*(LUT+CADD+(ALU SHL 1)+(TEMP Shl 9)):ALU=((ALU+TEMP) And &HFF) EndIf:'"ULTSADD": 

.ALIGN 8
.JTL267: '"UOSADDC": ' IF N IS SET THEN IT WAS SUB AND MAKE SBC WITH CARRY ELSE ADC WITH, DISCARD FLAGS HERE 
 ;MOV CL,0;MOV AL,UMRB;MOV BL,AL;BT UWR,0;SBB AL,CL;'((ALU-(FLG And 1)) And &HFF)
BT UWR,0;ADC BL,CL;'((ALU+(FLG And 1)) And &HFF)
BT UWR,1;CMOVC BX,AX;MOV UMRB,BL;REJUMP'If FLG And XFN Then
'If FLG And XFN Then ALU=((ALU-(FLG And 1)) And &HFF) Else ALU=((ALU+(FLG And 1)) And &HFF) EndIf:

'IUOBIT=268 'BIT n,r *Z513*0- PV as Z, S set only if n=7 and b7 of r set F53 IS A COPY 
.ALIGN 8
.JTL268: ' "UOBIT": ' RESET 5,3,N, SET H, COPY CARRY, COPY F53 FROM ALU, MASK ALU BY 7 AND GET 7 TO FLG IF OFF=7
 ;MOV AX,UMRW;MOV CL,AH;Shr CL,3;And CL,7;MOV AL,1;ROL AL,CL;'AL= MASK TEMP=1 Shl ((CODE Shr 3) And 7)
MOV CX,16;MOV DX,84;MOV BL,UMRB;And BL,AL;CMOVZ CX,DX' PREP H AND ZPH, SELECT
And BL,128;Or CL,BL;MOV BL,UMRB;And BL,MASKF53;Or CL,BL;And UWRB,1;Or UWRB,CL;REJUMP 'COPY F53 FROM ALU MASK ALU BY 7 AND GET 7 TO FLG, SAVE CARRY 
'TEMP=1 Shl ((CODE Shr 3) And 7):FLG=(FLG And 1)+XFH+(ALU And ((TEMP And &B10000000)+&B00101000)):'If (ALU And TEMP)=0 Then FLG+=4+64 ' IF BIT ZERO THEN SET Z AND PV

' - - DAA HERE - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.ALIGN 8
.JTL269: '"UODAA" HERE THE BLACK BOX OF LUTLESS ASM BEAST, JUMPLESS, WORKS BY NIBBLES, IT JUST WORKS, 191 OPCODES 36MHZ
' ;MOVZX EAX,UMRB;Shr AL,4;Shl EAX,16;MOV AL,UMRB;And AL,15;Xor EBX,EBX;BT UWR,4;RCL EBX,2;CMP AL,10;SETNC CL;Add BL,CL;BT UWR,1;RCL EBX,1;
'CMP BL,3;SETZ DH;CMP BL,5;SETZ DL;Or DH,DL;CMP BL,7;SETZ DL;Or DH,DL;MOV ECX,EAX;Sub CL,6;Or CH,17;Or DH,DH;CMOVNZ EAX,ECX;MOV ECX,EAX;SUB ECX,65536;
'Or CH,8;BTR EAX,8;CMOVNC ECX,EAX;CMP AL,10;CMOVNC EAX,ECX;MOV ECX,EAX;Add CL,6;CMP BL,4;CMOVZ EAX,ECX;MOV DL,BL;And DL,3;Add ECX,65536;Or CH,8;
'CMP DL,2;CMOVZ EAX,ECX;MOV DL,AH;Shr DL,1;And DL,8;Or BL,DL;BTR EBX,1;Xor EDX,EDX;BT EAX,11;RCL EDX,5;Shl EDX,8;MOV DL,UMRB;And DL,15;Shl EDX,8;
'MOV DL,AL;And DL,15;Shl EDX,8;Shr EAX,16;MOV DL,AL;And DL,255;MOV EAX,EDX;MOV CX,BX;Or CL,64;CMP AL,10;CMOVNC BX,CX;MOV CX,BX;Or CL,128;BT UWR,0;
'CMOVC BX,CX;MOV DL,BL;And DL,193;CMP DL,64;SETZ DH;CMP DL,128;SETZ CL;Or DH,CL;CMP DL,192;SETZ CL;Or DH,CL;MOV ECX,EAX;Add CL,6;BTS ECX,24;Or DH,DH;
'CMOVNZ EAX,ECX;And BL,191;MOV CX,BX;Or CL,64;CMP AL,10;CMOVNC BX,CX;MOV CX,BX;Or CL,2;CMP AH,10;CMOVNC BX,CX;MOV CX,BX;Or CL,16;MOV EDX,EAX;Shr EDX,16;
'CMP DL,10;CMOVNC BX,CX;MOV CX,BX;Or CX,256;CMP AL,9;CMOVNC BX,CX;MOV CX,BX;Or CX,4096;CMP AL,9;CMOVZ BX,CX;MOV CX,BX;Or CX,512;CMP AL,15;CMOVC BX,CX;
'MOV CX,BX;Or CX,1024;MOV DX,BX;And DL,129;CMP DL,1;CMOVZ BX,CX;MOV CX,BX;Or CX,2048;MOV DX,BX;And DX,1032;CMP DX,1032;CMOVZ BX,CX;MOV CX,BX;Or CX,8192;
'MOV DL,AL;Sub DL,6;CMP DL,3;CMOVZ BX,CX;MOV CX,BX;Or CX,16384;MOV DX,BX;And DX,12290;CMP DX,12288;CMOVZ BX,CX;MOV CX,BX;Or CX,32768;CMP DX,8192;CMOVZ BX,CX;
'ROR EAX,8;Shl AX,8;ROL EAX,8;MOV DX,BX;And DL,129;CMP DL,129;SETZ AH;MOV DX,BX;And DX,33792;CMP DX,33792;SETZ DL;Add AH,DL;MOV DX,BX;And DX,1090;CMP DX,1088;
'SETZ DL;Add AH,DL;MOV DX,BX;And DX,2818;CMP DX,2818;SETZ DL;Add AH,DL;MOV DX,BX;And DX,18436;CMP DX,18432;SETZ DL;Add AH,DL;MOV DX,BX;And DX,18452;CMP DX,18452;
'SETZ DL;Add AH,DL;MOV ECX,EAX;Sub CL,6;BTS ECX,24;Or AH,AH;CMOVNZ EAX,ECX;MOV DL,AL;Shl DL,4;Shr EAX,16;Or DL,AL;MOV UMRB,DL;MOV AL,AH;Or DL,DL;LAHF;
'And AH,0B11000100;And DL,0B00101000;Or AL,AH;Or AL,DL;And UWRB,2;Or UWRB,AL;REJUMP

 ;
MOVZX RAX,UXRW;MOV AL,UMRB;
MOV AX,[UPM+RAX*2+ODAA]
MOV UMRB,AL;MOV AL,AH;MOV UWRB,AL;REJUMP

'ALU=*(DAA+ALU+(FLG Shl 8)):FLG=ALU Shr 8:ALU And= &HFF':
' - - - PC SUBST UOPS - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'SIGUWZ=270,SIGUHL=271,SIGUIX=272,SIGUIY=273,SIGSK6=274,SIGSK6Z=275
.ALIGN 8
.JTL270: ROR USR,16;MOV USRB,12;ROL USR,16;ROR UWR,32;ROR UPR,32;MOV UPRW,UWRW;ROL UWR,32;ROL UPR,32;REJUMP'ISEXT=12:SUBST=TZ+(TW Shl 8)'"HIDDEN USEWZ":
.ALIGN 8
.JTL271: ROR USR,16;MOV USRB,12;ROL USR,16;ROR UMR,16;ROR UPR,32;MOV UPRW,UMRW;ROL UMR,16;ROL UPR,32;REJUMP'ISEXT=12:SUBST=TL+(TH Shl 8)'"HIDDEN USEHL":
.ALIGN 8
.JTL272: ROR USR,16;MOV USRB,12;ROL USR,16;ROR UXR,32;ROR UPR,32;MOV UPRW,UXRW;ROL UXR,32;ROL UPR,32;REJUMP'ISEXT=12:SUBST=XL+(XH Shl 8)'"HIDDEN USEIX":
.ALIGN 8
.JTL273: ROR USR,16;MOV USRB,12;ROL USR,16;ROR UXR,16;ROR UPR,32;MOV UPRW,UXRW;ROL UXR,16;ROL UPR,32;REJUMP'ISEXT=12:SUBST=YL+(YH Shl 8)'"HIDDEN USEIY":
'SKIP6PE: PV set if BC not 0 PO IS ZERO PE IS TRUE
.ALIGN 8
.JTL274: ROR USR,16;MOV USRB,12;ROL USR,16;MOV AL,ALDIR;MOVZX RAX,AL;ADD RAX,UXC;BT UWR,2;CMOVNC UXC,RAX;REJUMP'ISEXT=12:If(FLG And XFP)=0 Then MCUR+=XLDIR '"HIDD SKIP6PO":
.ALIGN 8
.JTL275: ROR USR,16;MOV USRB,12;ROL USR,16;MOV AL,ACPIR;MOVZX RAX,AL;ADD RAX,UXC;BT UWR,2;SETNC CL;BT UWR,6;SETC CH;Or CX,CX;CMOVNZ UXC,RAX;REJUMP'ISEXT=12:If(FLG And XFP)=0 Or (FLG And XFZ) Then MCUR+=XCPIR '"HIDD SKIP6POZ":
' CONDITIONAL ENDINGS - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' IECCZ=276,IECCNZ=277,IECCC=278,IECCNC=279,IECCPE=280,IECCPO=281,IECCM=282,IECCP=283
.ALIGN 8
.JTL276: ROR USR,16;MOV USRB,12;ROL USR,16;MOV RAX,UXC;BSWAP RAX;MOV EAX,EAX;BSWAP RAX;BT UWR,6;CMOVC UXC,RAX;REJUMP'ISEXT=12:If FLG And XFZ Then MCUR=PMOS ' "HIDDEN ECCZ":
.ALIGN 8
.JTL277: ROR USR,16;MOV USRB,12;ROL USR,16;MOV RAX,UXC;BSWAP RAX;MOV EAX,EAX;BSWAP RAX;BT UWR,6;CMOVNC UXC,RAX;REJUMP'ISEXT=12:If (FLG And XFZ)=0 Then MCUR=PMOS' "HIDDEN ECCNZ":
.ALIGN 8
.JTL278: ROR USR,16;MOV USRB,12;ROL USR,16;MOV RAX,UXC;BSWAP RAX;MOV EAX,EAX;BSWAP RAX;BT UWR,0;CMOVC UXC,RAX;REJUMP'ISEXT=12:If FLG And XFC Then MCUR=PMOS' "HIDDEN ECCC":
.ALIGN 8
.JTL279: ROR USR,16;MOV USRB,12;ROL USR,16;MOV RAX,UXC;BSWAP RAX;MOV EAX,EAX;BSWAP RAX;BT UWR,0;CMOVNC UXC,RAX;REJUMP'ISEXT=12:If (FLG And XFC)=0 Then MCUR=PMOS' "HIDDEN ECCNC":
.ALIGN 8
.JTL280: ROR USR,16;MOV USRB,12;ROL USR,16;MOV RAX,UXC;BSWAP RAX;MOV EAX,EAX;BSWAP RAX;BT UWR,2;CMOVC UXC,RAX;REJUMP'ISEXT=12:If FLG And XFP Then MCUR=PMOS' "HIDDEN ECCPE":
.ALIGN 8
.JTL281: ROR USR,16;MOV USRB,12;ROL USR,16;MOV RAX,UXC;BSWAP RAX;MOV EAX,EAX;BSWAP RAX;BT UWR,2;CMOVNC UXC,RAX;REJUMP'ISEXT=12:If (FLG And XFP)=0 Then MCUR=PMOS' "HIDDEN ECCPO":
.ALIGN 8
.JTL282: ROR USR,16;MOV USRB,12;ROL USR,16;MOV RAX,UXC;BSWAP RAX;MOV EAX,EAX;BSWAP RAX;BT UWR,7;CMOVC UXC,RAX;REJUMP'ISEXT=12:If FLG And XFS Then MCUR=PMOS' "HIDDEN ECCM":
.ALIGN 8
.JTL283: ROR USR,16;MOV USRB,12;ROL USR,16;MOV RAX,UXC;BSWAP RAX;MOV EAX,EAX;BSWAP RAX;BT UWR,7;CMOVNC UXC,RAX;REJUMP'ISEXT=12:If (FLG And XFS)=0 Then MCUR=PMOS' "HIDDEN ECCP":
' ISWCCNZ=284,ISWCCZ=285,ISWCCNC=286,ISWCCC=287,ISWCCPE=288,ISWCCPO=289,ISWCCP=290,ISWCCM=291
.ALIGN 8
.JTL284: ROR USR,16;MOV USRB,12;ROL USR,16;MOV RAX,UPR;ROR RAX,32;ROR UWR,32;MOV AX,UWRW;ROL UWR,32;ROL RAX,32;BT UWR,6;CMOVNC UPR,RAX;REJUMP'ISEXT=12:If (FLG And XFZ)=0 Then SUBST=TZ+(TW Shl 8) '"HIDDEN SWCCNZ":
.ALIGN 8
.JTL285: ROR USR,16;MOV USRB,12;ROL USR,16;MOV RAX,UPR;ROR RAX,32;ROR UWR,32;MOV AX,UWRW;ROL UWR,32;ROL RAX,32;BT UWR,6;CMOVC UPR,RAX;REJUMP'ISEXT=12:If FLG And XFZ Then SUBST=TZ+(TW Shl 8)'"HIDDEN SWCCZ":
.ALIGN 8
.JTL286: ROR USR,16;MOV USRB,12;ROL USR,16;MOV RAX,UPR;ROR RAX,32;ROR UWR,32;MOV AX,UWRW;ROL UWR,32;ROL RAX,32;BT UWR,0;CMOVNC UPR,RAX;REJUMP'ISEXT=12:If (FLG And XFC)=0 Then SUBST=TZ+(TW Shl 8)'"HIDDEN SWCCNC":
.ALIGN 8
.JTL287: ROR USR,16;MOV USRB,12;ROL USR,16;MOV RAX,UPR;ROR RAX,32;ROR UWR,32;MOV AX,UWRW;ROL UWR,32;ROL RAX,32;BT UWR,0;CMOVC UPR,RAX;REJUMP'ISEXT=12:If FLG And XFC Then SUBST=TZ+(TW Shl 8)'"HIDDEN SWCCC":
.ALIGN 8
.JTL288: ROR USR,16;MOV USRB,12;ROL USR,16;MOV RAX,UPR;ROR RAX,32;ROR UWR,32;MOV AX,UWRW;ROL UWR,32;ROL RAX,32;BT UWR,2;CMOVC UPR,RAX;REJUMP'ISEXT=12:If FLG And XFP Then SUBST=TZ+(TW Shl 8)'"HIDDEN SWCCPE":
.ALIGN 8
.JTL289: ROR USR,16;MOV USRB,12;ROL USR,16;MOV RAX,UPR;ROR RAX,32;ROR UWR,32;MOV AX,UWRW;ROL UWR,32;ROL RAX,32;BT UWR,2;CMOVNC UPR,RAX;REJUMP'ISEXT=12:If (FLG And XFP)=0 Then SUBST=TZ+(TW Shl 8)'"HIDDEN SWCCPO":
.ALIGN 8
.JTL290: ROR USR,16;MOV USRB,12;ROL USR,16;MOV RAX,UPR;ROR RAX,32;ROR UWR,32;MOV AX,UWRW;ROL UWR,32;ROL RAX,32;BT UWR,7;CMOVNC UPR,RAX;REJUMP'ISEXT=12:If (FLG And XFS)=0 Then SUBST=TZ+(TW Shl 8)'"HIDDEN SWCCP":
.ALIGN 8
.JTL291: ROR USR,16;MOV USRB,12;ROL USR,16;MOV RAX,UPR;ROR RAX,32;ROR UWR,32;MOV AX,UWRW;ROL UWR,32;ROL RAX,32;BT UWR,7;CMOVC UPR,RAX;REJUMP'ISEXT=12:If FLG And XFS Then SUBST=TZ+(TW Shl 8) '"HIDDEN SWCCM":
' - - - CPL - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' CPL --*1*-1- 5, 3 from A registeX.
.ALIGN 8
.JTL292: '"UOCPL":
 ;BTS USR,24;Xor UMRB,255;And UWRB,0B11000101;MOV AL,UMRB;And AL,0B00101000;Or AL,0B00010010;Or UWRB,AL;REJUMP'ALU Xor= 255:FLG=(FLG And &B11000101)+(ALU And &B00101000)+&B00010010:DSA=1

'if <previous instruction modified the flags> then F53 COPY ELSE F53 OR
' SO Q SET IF FLG MOD OCCUR, SO SCF/CCF ALWAYS DOES OR ACTUALLY, AND COPY IS THE DEFINED STATE SO EACH UAPCI WILL RESET Q TO UNDEFINED STATE IE ZERO
' - - - IUOSCF=293,IUOCCF=294 the content of A is ORED OR MOVED ACC WITH Q STATE to flags 5+3 after SCF/CCF - - - - - 
.ALIGN 8
.JTL293: '"UOSCF": 
 ;BTS USR,24;BTS UWR,0;MOV AL,0B11101101;MOV BL,0B11000101;BT USR,25;CMOVC AX,BX;And UWRB,AL;MOV AL,UXRB;And AL,0B00101000;Or UWRB,AL;REJUMP
'FLG =((FLG And &B11101100)+1) Or (TA And &B00101000) ' OR STATE AKA UNDEF
'TEMP=((FLG And &B11000100)+1) +(TA And &B00101000) ' COPY STATE
'DSA=1:If FQ Then FLG=TEMP ' IF Q AKA DEFINED THEN COPY

.ALIGN 8
.JTL294: ' "UOCCF": ' CCF C=1-C, H as old C. 5, 3 from A register --***-0* MAY OR A53 BITS MAY COPY
 ;BTS USR,24;BTC UWR,0;SETC DL;Shl DL,4;MOV AL,0B11101101;MOV BL,0B11000101;BT USR,25;CMOVC AX,BX;And UWRB,AL;MOV AL,UXRB;And AL,0B00101000;Or UWRB,AL;Or UWRB,DL;REJUMP
'DSA=1:FLG=(FLG And &B11101101)+((FLG And 1)Shl 4) ' SET H AS OLD C CLEAR N
'FLG Xor= XFC ' INVERT C
'FLG Or= (TA And &B00101000) ' UNDEF STATE
'TEMP=(FLG And &B11010111)+(TA And &B00101000) ' DEF STATE
'If FQ Then FLG=TEMP ' IF Q AKA DEFINED THEN COPY

' - - IUEXA=295,IUEXX=296 NO AFF
.ALIGN 8
.JTL295: MOVD RAX,UER;MOV BX,UXRW;MOV UXRW,AX;MOV AX,BX;MOVD UER,RAX;REJUMP'TAF=(TA Shl 32)+TF:TF=EAF And 255:TA=(EAF Shr 32):EAF=TAF'"AF UEXA":
.ALIGN 8
.JTL296: MOVD RAX,UER;MOV BX,AX;XCHG UMR,RAX;MOV AX,BX;MOVD UER,RAX;REJUMP'TBC=(TB Shl 32)+TC:TC=EBC And 255:TB=(EBC Shr 32):EBC=TBC:TDE=(TD Shl 32)+TE:TE=EDE And 255:TD=(EDE Shr 32):EDE=TDE:THL=(TH Shl 32)+TL:TL=EHL And 255:TH=(EHL Shr 32):EHL=THL '" UEXX":
' - - - IUDFF=297,IUSFF=298,IUCFF=299
.ALIGN 8
.JTL297: BTR USR,29;BTR USR,30;REJUMP'IFF1=0:IFF2=0:'"DIS/INT UDFF":
.ALIGN 8
.JTL298: BTS USR,29;BTS USR,30;REJUMP'IFF1=1:IFF2=1:'"ENA/INT USFF":
.ALIGN 8
.JTL299: BTR USR,30;Xor RAX,RAX;BT USR,29;RCL RAX,30;Or USR,RAX;REJUMP'IFF1=IFF2:'"REST/INT UCFF":
' - - -IUXHD=300
.ALIGN 8
.JTL300: ROR UMR,16;MOV AX,UMRW;ROR UMR,16;MOV BX,UMRW;MOV UMRW,AX;ROL UMR,16;MOV UMRW,BX;ROL UMR,16;REJUMP'T=TL:TL=TE:TE=TT=TH:TH=TD:TD=T'"HL-DE UXHD":
' - - - PORT IO UOPS 'IUNWR=301,IUTIO=302,IUPOW=303 - - - - - - - - - - - - 
.ALIGN 8
.JTL301: MOV AX,UWRW;Xor AH,AH;MOV UWRW,AX;REJUMP'BUS=0:'"NULL UNWR":
.ALIGN 8
.JTL302: MOVZX RAX,UPRW;LEA RAX,[UPM+RAX+OIORD];MOV USRB,[RAX];MOV BL,255;MOV [RAX],BL;REJUMP
'T=*(IORD+ADDR):*(IORD+ADDR)=255':SCROLLOC:Print ADDR;" "';:SLEEP'"RD("+Hex$(ADDR,4)+")="+Hex$(T,2)+" UTIO":
.ALIGN 8
.JTL303: MOVZX RAX,UPRW;MOV BX,UWRW;MOV BL,BH;MOV [UPM+RAX+OIOWR],BL;REJUMP '*(IOWR+ADDR)=BUS:'"WR("+Hex$(ADDR,4)+")="+Hex$(BUS,2)+" UPOW":
' - - IUFWR=304 - - 
.ALIGN 8
.JTL304: MOV AX,UWRW;MOV BX,UXRW;MOV AH,BH;MOV UWRW,AX;REJUMP'BUS=TF:'"FLG UFWR":
' - - IUONEG=305 NEG SZ5H3V1C
.ALIGN 8
.JTL305: BTS USR,24;MOV DL,UMRB;Shl DX,8;MOV CX,DX;Shl CX,4;Sub CL,CH;SETC CL;Shl CL,4;Sub DL,DH;LAHF;CMP DL,128;SETZ AL;Shl AL,2;Or AL,2;MOV UMRB,DL;And DL,0B00101000;And AH,0B11000001;Or DL,AH;Or DL,CL;Or DL,AL;MOV UWRB,DL;REJUMP'FLG=(*(LUT+CSUB+(ALU Shl 9))And &B11111011):If ALU=&H80 Then FLG+=XFP Else EndIf:ALU=((0-ALU) And &HFF):'"UONEG":
' - - - IULTRI=306,IULTRR=307,IUFQIR=308 LD A,R/LD A,I SZ503*0- PV as IFF2, ALIKE DO OR/XOR r SZ503P00
.ALIGN 8
.JTL306: BSWAP UWR;MOV UMRB,UWRB;BSWAP UWR;REJUMP'ALU=TI:'"I-REG ULLRI":
.ALIGN 8
.JTL307: BSWAP UWR;MOV AX,UWRW;BSWAP UWR;MOV AL,AH;MOV UMRB,AL;REJUMP'ALU=TR:'"R-REG ULLRR":
.ALIGN 8
.JTL308: MOV BL,UMRB;OR BL,BL;LAHF;BT USR,29;SETC AL;And AH,0B11000000;And BL,0B00101000;Shl AL,2;Or AL,AH;Or AL,BL;And UWRB,1;Or UWRB,AL;REJUMP'FLG=(*(LUT+COR+ALU) And &B11111010)+(FLG And 1)+(IFF2 Shl 2):'"QUIRK UFQIR" 'SZ503P0-
' - - - IUOQIO=309 - - IN r,(C) AFFECTION SZ50300- Also true for IN F(NULL),(C), LIKE OR VALUE,0
.ALIGN 8
.JTL309: MOV BL,UMRB;OR BL,BL;LAHF;And AH,0B11000000;And BL,0B00101000;Or BL,AH;And UWRB,1;Or UWRB,BL;REJUMP'FLG=(*(LUT+COR+ALU) And &B11111010)+(FLG And 1):'"QUIRK UFQIO":
' - - - RLD AND RRD ALU NIBBLE OPS - 
' IUORVN=310(NIBB REVERSE)
' IULANLL=311(LOWN=A-LOWN),IULTNLL=312(LOWN=T-LOWN)
' IULANLH=313(HIGHN=A-LOWN),IULTNHL=314(LOWN=T-HIGHN)
.ALIGN 8
.JTL310: MOV AL,UMRB;MOV AH,AL;Shr AX,4;MOV UMRB,AL;REJUMP'ALU=((ALU And &H0F)Shl 4)+((ALU SHR 4)And &H0F):'"REV UORVN":
.ALIGN 8
.JTL311: And UMRB,240;MOV AL,UXRB;And AL,15;Or UMRB,AL;REJUMP''ALU=(ALU And &HF0)+(TA And &H0F)'"L=AL ULANLL":
.ALIGN 8
.JTL312: And UMRB,240;MOV AL,USRB;And AL,15;Or UMRB,AL;REJUMP''ALU=(ALU And &HF0)+(T And &H0F):'"L=TL ULTNLL":
.ALIGN 8
.JTL313: And UMRB,15;MOV AL,UXRB;Shl AL,4;Or UMRB,AL;REJUMP''ALU=(ALU And &H0F)+((TA And &H0F)Shl 4):'"H=AL ULANLH":
.ALIGN 8
.JTL314: And UMRB,240;MOV AL,USRB;Shr AL,4;Or UMRB,AL;REJUMP'ALU=(ALU And &HF0)+((T Shr 4)And &H0F):'"L=TH ULTNHL":
' - - IM X SETTING SIMPLEST OP - - - - 
'IUIM0=315,IUIM1=316,IUIM2=317
.ALIGN 8
.JTL315: BTR USR,33;BTR USR,32;MOVD RAX,UVE;ROR RAX,48;MOV BX,AX;ROL RAX,48;MOV AX,BX;MOVD UVE,RAX;REJUMP'IMM=0:INTC=INT0 '"IM=0 UIM0":
.ALIGN 8
.JTL316: BTR USR,33;BTS USR,32;MOVD RAX,UVE;ROR RAX,32;MOV BX,AX;ROL RAX,32;MOV AX,BX;MOVD UVE,RAX;REJUMP'IMM=1:INTC=INT1 '"IM=1 UIM1":
.ALIGN 8
.JTL317: BTS USR,33;BTR USR,32;MOVD RAX,UVE;ROR RAX,16;MOV BX,AX;ROL RAX,16;MOV AX,BX;MOVD UVE,RAX;REJUMP'IMM=2:INTC=INT2 '"IM=2 UIM2":
' - - LDIR QUIRK AFF IULAQLD=318 - - - 
'LDI/LDIR/LDD/LDIR --*0**0- PV set if BC not 0 SO SAVE PV FROM UBCDPV 
'F5 is bit 1 of (transferred byte + A) 'F3 is bit 3 of (transferred byte + A)
.ALIGN 8
.JTL318: And UWRB,0B11000101;MOV AL,USRB;Add AL,UXRB;BT AX,1;SETC BL;Shl BL,5;And AL,0B00001000;Or AL,BL;Or UWRB,AL;REJUMP'TEMP=T+TA:FLG=(FLG And &B11000101)+(TEMP And &B00001000)+((TEMP And &B00000010)Shl 4)':"ULAQLD":
' - - - CPIR QUIRK AFF 
'IULTCPQ=319
'CPI/CPIR/CPD/CPDR SZ*H**1- PV set if BC not 0 'S,Z,H from (A - (HL) ) REJUMP BY ULTCP
'F3 is bit 3 of (A - (HL) - H), H as in F after CPIR's INTERNAL CP
'F5 is bit 1 of (A - (HL) - H) 
.ALIGN 8
.JTL319: MOV AL,UXRB;BT UWR,4;SBB AL,USRB;And UWRB,0B11010111;BT AX,1;SETC BL;Shl BL,5;And AL,0B00001000;Or AL,BL;Or UWRB,AL;REJUMP
'TEMP=(FLG And XFH) Shr 4 ' GET FH AS ADD VALUE 0/1 'TEMP=TA-T-TEMP' T = (HL) THIS TIME
'FLG=(FLG And &B11010111)+(TEMP And &B00001000)+((TEMP And &B00000010)Shl 4):'"QUIRK ULTCPQ"

' - - INIR OTIR ENDING PARITY QUIRK 'IUBXORQ=320 'NEW FMLA 
.ALIGN 8
.JTL320: ' "UBXORQ" 
 ;MOV RBX,UMR;BSWAP RBX;And UMRB,7;Xor UMRB,BL;SETP AL;Shl AL,2;Or UWRB,AL;REJUMP'ALU=(ALU And 7) Xor TB:FLG OR= *(PFLAG+ALU) 'flagpv = partab[((iodata + regother) & 7) ^ regb];

.ALIGN 8
.JTL321: ROR UWR,32;ROR UPR,16;DEC UPRW;MOV UWRW,UPRW;ROL UPR,16;ROL UWR,32;REJUMP'ADDER-=1:TEMP=ADDER:TZ=TEMP And &hFF:TEMP Shr= 8:TW=TEMP And &hFF:'"CROSS UADDWZ":

' - - - - - IUTADDQ=322 INIR OTIR ENDING NEW FMLA
.ALIGN 8
.JTL322: '"QUIRK UTADDQ"
 ;BTS USR,24;Xor AX,AX;Add UMRB,USRB;SETC AL;RCL AH,5;Or AL,AH;'DSA=1:ALU=ALU+T:TEMP=ALU Shr 8 ' DO ADD AND MASK GET CARRY FOR C AND H SETTING
And UWRB,0B11101000;Or UWRB,AL;BT USR,7;SETC AL;Shl AL,1;Or UWRB,AL;REJUMP
'FLG=(FLG And &B11101000)+((T And XFS) Shr 6)+TEMP+(TEMP Shl 4): ' CLEAR H,P,N,C, SET N AS MSB T, SET C,H BOTH 
 
.ALIGN 8
.JTL323: ' "PIPE PARALLEL TRIPLE":
 ;ROR USR,16;And USRB,1;Add USRB,14;ROL USR,16;REJUMP 'If ISEXT And 1 Then ISEXT=15 Else ISEXT=14' "TRI:":

.ALIGN 8
.JTL324:' - - LD ALU,Z 
 ;MOV RAX,UWR;Shr RAX,32;MOV UMRB,AL;REJUMP'ALU=TZ:' "ULLRZ":

' - - REJUMP NOW UOP NOT SIGNAL - - - 
.ALIGN 8
.JTL325: 
 ;
 ;
ROR USR,16;MOV RAX,USR;MOV AL,11;BT USR,0;SETNC DL;CMOVC USR,RAX;'If ISEXT And 1 Then ISEXT=11 BR1DLENABLE
MOV RAX,USR;MOV AL,12;CMP USRB,10;SETNZ CL;And CL,DL;CMOVNZ USR,RAX;ROL USR,16;'If ISEXT=10 Then Else ISEXT=12
ROR UWR,16;MOVZX RAX,UWRW;MOV RAX,[UPM+RAX*8+ROOTOFF];Sub RAX,UPM;ROL UWR,16;'GET *(PROOT+PREFIX) PTR TO MOS, AS U32 OFFS 
ROR RAX,32;MOV RBX,UXC;Shr RBX,32;Or RAX,RBX;ROL RAX,32;'GET NEW UXC WITH MCUR
BT USR,26;SETC CL;And CL,DL;CMOVNZ UXC,RAX;SETZ CL;And CL,DL;'If ISPFX Then MCUR=*(PROOT+PREFIX), BR2ENABLEIF BR1 =CL
MOVD RAX,UVE;MOVZX RAX,AX;Shl RAX,2;ROL RAX,32;MOV RBX,UXC;Shr RBX,32;Or RAX,RBX;ROL RAX,32;'GET MCUR=PMOS+INTC UXC READY
MOV RBX,USR;BTR RBX,28;BTR RBX,27;'READY SYS CHANGE
BT USR,28;SETC DH;BT USR,30;SETC DL;And DL,DH;And DL,CL;CMOVNZ USR,RBX;CMOVNZ UXC,RAX;SETZ DL;'If ISINT And IFF1 Then MCUR=PMOS+INTC:ISINT=0:ISHALT=0
MOV RBX,RAX;Shr RBX,32;Shl RBX,32;'PREP MCUR=PMOS 
And DL,CL;CMOVNZ UXC,RBX;'Else MCUR=PMOS 
MOV RAX,UPR;ROR RAX,32;DEC AX;ROL RAX,32;BT USR,27;CMOVC UPR,RAX;
REJUMP

'OCC=1:ASUBST=SUBST:AMCUR=MCUR:AISINT=ISINT:AISHALT=ISHALT:
'If ISEXT And 1 Then 
'AISEXT=11 
'Else 
'	If ISEXT=10 Then Else AISEXT=12 ENDIF	
'	If ISPFX Then 
'	AMCUR=*(PROOT+PREFIX) 
'	Else
'		If ISINT And IFF1 Then AMCUR=PMOS+INTC:AISINT=0:AISHALT=0 Else AMCUR=PMOS 
'		If ISHALT Then ASUBST=SUBST-1
'	EndIf
'EndIf

' "DONE":
' - - PAR NOW UOP NOT SIGNAL - - - 
.ALIGN 8
.JTL326: ROR USR,16;MOV BL,USRB;MOV USRB,6;MOV RAX,USR;MOV AL,3;And BL,1;CMOVNZ USR,RAX;ROL USR,16;REJUMP
'If ISEXT And 1 Then ISEXT=3 Else ISEXT=6' "PAR:":
' - - EXT NOW UOP NOT SIGNAL - - - NEED TO CATCH INT TOO 
.ALIGN 8
.JTL327: 
ROR USR,16;MOV USRB,2;MOV EAX,UXCD;Shl UXC,32;MOV RDX,UXC;Or UXC,RAX;'ISEXT=2:ECUR=MCUR
ROR USR,8;MOV RAX,USR;And AL,0B11100111;'ISINT=0:ISHALT=0 RAX
MOVD RBX,UVE;MOVZX RBX,BX;Shl RBX,2;Or RBX,RDX;'MCUR=PMOS+INTC RBX
BT USR,4;SETC CH;BT USR,6;SETC CL;And CL,CH;CMOVNZ USR,RAX;CMOVNZ UXC,RBX;SETZ CL;ROL USR,24;'If ISINT And IFF1 Then MCUR=PMOS+INTC:ISINT=0:ISHALT=0
MOV EAX,UWRD;Shr EAX,16;Xor EBX,EBX;BT USR,26;CMOVNC EAX,EBX;
MOV RAX,[UPM+RAX*8+ROOTOFF];Sub RAX,UPM;Or RAX,RDX;Or CL,CL;CMOVNZ UXC,RAX;REJUMP'MCUR=*(PROOT+(PREFIX*ISPFX))
'ISEXT=2:ECUR=MCUR ' "EXT:":
'	If ISINT And IFF1 Then 
'			MCUR=PMOS+INTC:ISINT=0:ISHALT=0
'		Else 
'			MCUR=*(PROOT+(PREFIX*ISPFX))
'		EndIf

' - INTERRUPT OPERATORS
.ALIGN 8
.JTL328: ROR UPR,32;MOV AX,UPRW;ROR UPR,16;MOV UPRW,AX;ROL UPR,48;BTR USR,30;BTR USR,24;REJUMP 
'PC=SUBST:IFF1=0:DSA=0 ' "UIFF" ' USEWZ/RR IN FACT REJUMP BY Z80 ON INT START, AND CLEAR Q 

.ALIGN 8
.JTL329: REJUMP ' "UIMRQ" DUMMY HERE LIKE UNOP
.ALIGN 8
.JTL330: MOV USRB,255;REJUMP'T=&HFF ' "UIMFET" RECEIVE VECTOR HERE DEFAULTS TO &HFF FOR ALL IMs
.ALIGN 8
.JTL331: ROL UWR,8;MOV AL,UWRB;ROR UWR,48;MOV UWRB,AL;ROL UWR,40;REJUMP'TW=TI ' "ULWI" LD W,I
.ALIGN 8
.JTL332: ROR UWR,32;MOV UWRB,0X00;ROL UWR,32;REJUMP'TZ=&H00 ' "ULZ00"
.ALIGN 8
.JTL333: ROR UWR,32;MOV UWRB,0X08;ROL UWR,32;REJUMP'TZ=&H08 ' "ULZ08"
.ALIGN 8
.JTL334: ROR UWR,32;MOV UWRB,0X10;ROL UWR,32;REJUMP'TZ=&H10 ' "ULZ10"
.ALIGN 8
.JTL335: ROR UWR,32;MOV UWRB,0X18;ROL UWR,32;REJUMP'TZ=&H18 ' "ULZ18"
.ALIGN 8
.JTL336: ROR UWR,32;MOV UWRB,0X20;ROL UWR,32;REJUMP'TZ=&H20 ' "ULZ20"
.ALIGN 8
.JTL337: ROR UWR,32;MOV UWRB,0X28;ROL UWR,32;REJUMP'TZ=&H28 ' "ULZ28"
.ALIGN 8
.JTL338: ROR UWR,32;MOV UWRB,0X30;ROL UWR,32;REJUMP'TZ=&H30 ' "ULZ30"
.ALIGN 8
.JTL339: ROR UWR,32;MOV UWRB,0X38;ROL UWR,32;REJUMP'TZ=&H38 ' "ULZ38"
' UWBITQ CORRUPT F35 WITH COPY OF W 
.ALIGN 8
.JTL340: ' "UWBITQ" SO IN BIT THERE ARE TWO ALUOPS, IF USE INDIRECT ACCESS, SECOND LIKE QUIRKY "AND ALU,W"
' P/V, Z, S set as the other BIT instructions, but the 5 and 3 flags are different.
' They are a copy of an internal register of the Z80, which IS W
 ;And UWRB,0B11010111;MOV RAX,UWR;Shr RAX,40;And AL,0B00101000;Or UWRB,AL;REJUMP'FLG=(FLG And &B11010111)+(TW And &B00101000)

.ALIGN 8
.JTL341: 
 ;ROR USR,16;MOV USRB,12;ROL USR,16;
MOV RAX,UXC;Add RAX,ADJNZ;BT UWR,6;CMOVC UXC,RAX;REJUMP
'ISEXT=12:If FLG And XFZ Then MCUR+=XDJNZ '"SKIP6Z":

' CYCLE LDIR LDXR/CPXR --*0**0- F53 FROM W, P BY UBCDPV, N H CLEAR ,VZ80 SHOW THAT CPIR RESET H IN CYCLE TOO
.ALIGN 8
.JTL342: MOV RAX,UWR;And UWRB,0B11000101;Shr RAX,40;And AL,0B00101000;Or UWRB,AL;REJUMP'FLG=(FLG And &B11000101)+(TW And &B00101000) ' "IULWQLD"
' - -RLD RRD AFFECTION
.ALIGN 8
.JTL343: ' "UOFRXD" RRD/RLD SZ503P0- Flags set on result in A ALIKE OR/XOR r SZ503P00
 ;And UWRB,1;MOV AL,UMRB;MOV BL,UMRB;And BL,0B00101000;Or AL,AL;LAHF;And AH,0B11000100;Or BL,AH;Or UWRB,BL;REJUMP
'FLG=*(LUT+COR+ALU)+(FLG And XFC)
.ALIGN 8
.JTL344: ' CORRECT Z FOR ADC/SBC RR IF HL=0 THEN Z "UFHLZ"
 ;BTR UWR,6;MOV EAX,UMRD;Shr EAX,16;SETZ AL;Shl AL,6;Or UWRB,AL;REJUMP
'TEMP=0:If (TH+TL)=0 Then TEMP=XFZ
'FLG=(FLG And &B10111111)+TEMP
' - ULTCPX FOR CPIR SAVES CARRY
.ALIGN 8
.JTL345: MOV DL,UMRB;
MOV AL,USRB;MOV AH,DL;SHL AH,4;Shl AL,4;Sub AH,AL;MOV AL,0;RCL AL,5;Xor CX,CX;MOV BX,1024;Sub DL,USRB;LAHF;CMOVO CX,BX;MOV DL,USRB;
BTS AX,9;BTR AX,10;Or AX,CX;Or AH,AL;And DL,MASKF53;Or DL,AH;BTR DX,0;And UWRB,1;OR UWRB,DL;BTS USR,24;REJUMP '"ULTCPX":

.ALIGN 8
.JTL346: REJUMP '"ULLRW": NOT USED
.ALIGN 8
.JTL347:
.ENDSEL:
ADONE
