Sub SCROLLOC()Static
Static As ULongInt Ptr UP1,UP2,UP3,UP4

UP1=ScreenPtr()
UP1+=256
UP2=UP1:UP2+=((TSCRX*15) Shr 1) 
PSet (0,0):PSet (TSCRX-1,TSCRY-1)
For T2=0 To TSCRY-17 
For T1=0 To (TSCRX Shr 1)-257-4
*(UP1+T1)=*(UP2+T1)'
Next
T3=TSCRX Shr 1
UP1+=T3:UP2+=T3
:Next:
Locate 59,65:
End Sub

Sub SHOWINFO() Static

'SS4="MOS("+RIGHT("...."+Str(XPOFF),5)+")"
'SS8="UOP="+RIGHT("...."+Str(UOP),3)
'SS6="X.TAK="+Right("    "+Str(X.TAK),5)+"::"
SS9=LEFT("                                                          ",32)

If UOP=IUFET Then E0=2':SS9=RIGHT("........................."+" CO "+Hex(X.CUROFF,1)+" PF "+Hex(X.PREFIX,4)+" IP "+Hex(X.ISPFX,1)+" ",32)
If UOP=IUTRD Then SS9=RIGHT("........................."+"("+Hex(ADDR,4)+")="+Hex(T,2)+"   ",32)
If UOP=IUTIO Then SS9=RIGHT("......................... **** PORT READ *** "+"("+Hex(ADDR,4)+")="+Hex(T,2)+"   ",32)
If UOP=IUFET Then SS9=RIGHT("....................READ "+"("+Hex(ADDR,4)+")="+Hex(CODE,2)+" "+Mid$(O$,XMNEM(TEMP),XMLEN(TEMP)),32)  
If UOP=IUDOW Then SS9=RIGHT("....................WRITE "+"("+Hex(ADDR,4)+")="+Hex(BUS,2)+"   ",32)  
If UOP=IDONE Then SS9=RIGHT("..............................DONE: ",32)'+" CO "+Hex(X.CUROFF,1)+" PF "+Hex(X.PREFIX,4)+" IP "+Hex(X.ISPFX,1)+" "  
If UOP=IUODEC Then SS9=RIGHT(".........................ALU "+Hex$(ALU,2)+" ",32)  
If UOP=IUOINC Then SS9=RIGHT(".........................ALU "+Hex$(ALU,2)+" ",32)  
If UOP=IUIFF Then SS9=RIGHT("......................... **** INT ENABLED *** ",32)  
If UOP=IULTCPQ Then E4+=FLG  

If UOP=IUAIRIUF Then 
SS9=".................................................."
If TF And XFS Then SS9+="sz1" Else SS9+="sz0"
If TF And XFZ Then SS9+="1-5h3-" Else SS9+="0-5h3-"
If TF And XF5 Then SS9+="1" Else SS9+="0"
If TF And XFH Then SS9+="1" Else SS9+="0"
If TF And XF3 Then SS9+="1-pnc-" Else SS9+="0-pnc-"
If TF And XFP Then SS9+="1" Else SS9+="0"
If TF And XFN Then SS9+="1" Else SS9+="0"
If TF And XFC Then SS9+="1" Else SS9+="0"
SS9=RIGHT(SS9+" ",32)
Else EndIf  

If UOP=IDONE Then  ' Or UOP=IUOBIT Then 
SS9=".................................................. DONE "
If FLG And XFS Then SS9+="sz1" Else SS9+="sz0"
If FLG And XFZ Then SS9+="1-5h3-" Else SS9+="0-5h3-"
If FLG And XF5 Then SS9+="1" Else SS9+="0"
If FLG And XFH Then SS9+="1" Else SS9+="0"
If FLG And XF3 Then SS9+="1-pnc-" Else SS9+="0-pnc-"
If FLG And XFP Then SS9+="1" Else SS9+="0"
If FLG And XFN Then SS9+="1" Else SS9+="0"
If FLG And XFC Then SS9+="1" Else SS9+="0"
SS9=RIGHT(SS9+" ",32)
Else EndIf  

SS7=Right(".................................."+Mid$(Q$,UOPN(UOP),UOPL(UOP)),14)+" "

If ISEXT And 32 Then
Print Right("         "+Right("     "+Str(TAK),5)+":"+Right("     "+Str(ISEXT),2)+":"+Hex(PC-1,4)+":",16);
Else  
Print Right("         "+Right("      :",5)+Right("     "+Str(ISEXT),2)+":    :",16);
EndIf 
  

Print SS1;SS4;SS8;SS7;SS9;" ";

'Print "ACT-PC(";Hex$(X.PC,4);")-";
Print "WZ=";Hex$(TW,2);Hex$(TZ,2);" ";
'Print "T/A=";Hex$(X.T,2);"/";Hex$(X.ALU,2);"-*";Str(X.ALU);"* ";
'Print "ALU(";HEX(X.ALU,2);"-";Bin(X.ALU,8);")";
Print "FLG(";HEX(FLG,2);"-";Bin(FLG,8);"-";STR(FLG);")";
'Print "ADDER(";Hex$(X.ADDER,4);")-";
'Print "X.ADDR(";Hex$(X.ADDR,4);")-";
'Print "A(";BIN$(X.A,8);")-";
'Print "A(";HEX$(X.A,2);")-";
Print "AF=";Hex$(TA,2);Hex$(TF,2);" ";
Print "BC=";Hex$(TB,2);Hex$(TC,2);" ";
'Print "(";Hex$(*(XMEM+X.C+(X.B Shl 8)+1),2);Hex$(*(XMEM+X.C+(X.B Shl 8)),2);")"; '*BC
Print "DE=";Hex$(TD,2);Hex$(TE,2);" ";
'Print "(";Hex$(*(XMEM+X.E+(X.D Shl 8)+1),2);Hex$(*(XMEM+X.E+(X.D Shl 8)),2);")"; '*DE
Print "HL=";Hex$(TH,2);Hex$(TL,2);'" ";
Print "(";Hex$(*(XMEM+TL+(TH Shl 8)),2);")"; '*HL

'Print "XYS=";Hex$(X.XH,2);Hex$(X.XL,2);",";
'Print "";Hex$(X.YH,2);Hex$(X.YL,2);",";
'Print "";Hex$(X.S,2);Hex$(X.P,2);"";
'Print "*(";Hex$(*(XMEM+X.P+(X.S Shl 8)+1),2);Hex$(*(XMEM+X.P+(X.S Shl 8)),2);") ";

'Print "ABDH'";Hex$((X.EAF Shr 32),2);Hex$((X.EAF And 255),2);"";
'Print ",";Hex$((X.EBC Shr 32),2);Hex$((X.EBC And 255),2);"";
'Print ",";Hex$((X.EDE Shr 32),2);Hex$((X.EDE And 255),2);"";
'Print ",";Hex$((X.EHL Shr 32),2);Hex$((X.EHL And 255),2);" ";
'Print "IR=";Hex$(X.I,2);Hex$(X.R,2);"_";Hex$(X.ISINT,1);"/";Hex$(X.IMM,1);"-";Hex$(X.IFF1,1);
'Print " E4=";E4

If TAK=0 And IFF1 Then SCROLLOC:Print "INT ENABLED"

If TAK=0 And IFF1=0 Then SCROLLOC:Print "INT DISABLED"

If E1 Then If UOP=IDONE Or UOP=IEXT Then Sleep  

End Sub


Sub GENTEXT () Static
' - - - UOP MNEMONICS - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Q$=""
Q$+="0_ERROR ZERO_":Q$+="1_UADBC_":Q$+="2_UADDE_":Q$+="3_UAHL_":Q$+="4_UAWZ_":Q$+="5_UAAD_":Q$+="6_UADSP_":Q$+="7_UAIX_":Q$+="8_UAIY_":Q$+="9_UAPCI_":Q$+="10_UFET_":Q$+="11_UAIRIUF_":
Q$+="12_URALF_":Q$+="13_ULTRB_":Q$+="14_ULTRC_":Q$+="15_ULTRD_":Q$+="16_ULTRE_":Q$+="17_ULTRH_":Q$+="18_ULTRL_":Q$+="19_UALF_":Q$+="20_ULTRA_":Q$+="21_ULRBT_":Q$+="22_ULRCT_":Q$+="23_ULRDT_":
Q$+="24_ULRET_":Q$+="25_ULRHT_":Q$+="26_ULRLT_":Q$+="27_UHALT_":Q$+="28_ULRAT_":Q$+="29_UBWR_":Q$+="30_UCWR_":Q$+="31_UDWR_":Q$+="32_UEWR_":Q$+="33_UHWR_":Q$+="34_ULWR_":Q$+="35_UOWR_":Q$+="36_UAWR_":
Q$+="37_URCW_":Q$+="38_UWCW_":Q$+="39_WRITE UDOW_":Q$+="40_UNOP_":Q$+="41_READ UTRD _":Q$+="42_UTWR_":Q$+="43_ULSLT_":Q$+="44_ULSHT_":Q$+="45_ULW ERRATIC_":Q$+="46_ULWA_":Q$+="47_ULWT_":Q$+="48_ULZT_":
Q$+="49_ULZN_":Q$+="50_ULW0_":Q$+="51_UWZI_":Q$+="52_UBCI_":Q$+="53_UDEI_":Q$+="54_UHLI_":Q$+="55_USPI_":Q$+="56_UADI_":Q$+="57_UIXI_":Q$+="58_UIYI_":Q$+="59_UADIWZ_":Q$+="60_UADIPC_":
Q$+="61_UADD_":Q$+="62_UBCD_":Q$+="63_UBCDPV_":Q$+="64_UDED_":Q$+="65_UHLD_":Q$+="66_USPD_":Q$+="67_UWZD_":Q$+="68_UIXD_":Q$+="69_UIYD_":Q$+="70_ULDBC_":Q$+="71_ULDDE_":Q$+="72_ULDHL_":Q$+="73_ULDSP_":
Q$+="74_ULDWZ_":Q$+="75_ULDPC_":Q$+="76_ULDIX_":Q$+="77_ULDIY_":Q$+="78_ULBCD_":Q$+="79_ULDED_":Q$+="80_ULHLD_":Q$+="81_ULWZD_":Q$+="82_ULSPD_":Q$+="83_ULPCD_":Q$+="84_ULIXD_":Q$+="85_ULIYD_":
Q$+="86_UPFDD_":Q$+="87_UPFFD_":Q$+="88_UPFCB_":Q$+="89_UPFED_":Q$+="90_UPFDC_":Q$+="91_UPFFC_":Q$+="92_USLWR_":Q$+="93_USHWR_":Q$+="94_UPLWR_":Q$+="95_UPHWR_":Q$+="96_UXHWR_":
Q$+="97_UXLWR_":Q$+="98_UYHWR_":Q$+="99_UYLWR_":Q$+="100_ULLRB_":Q$+="101_ULLRC_":Q$+="102_ULLRD_":Q$+="103_ULLRE_":Q$+="104_ULLRH_":Q$+="105_ULLRL_":Q$+="106_ULLRT_":Q$+="107_ULLRA_":Q$+="108_ULLXL_":
Q$+="109_ULLXH_":Q$+="110_ULLYL_":Q$+="111_ULLYH_":Q$+="112_ULLPL_":Q$+="113_ULLPH_":Q$+="114_ULRIA_":Q$+="115_ULRRA_":Q$+="116_ULRBL_":Q$+="117_ULRCL_":Q$+="118_ULRDL_":Q$+="119_ULREL_":Q$+="120_ULRHL_":
Q$+="121_ULRLL_":Q$+="122_ULRTL_":Q$+="123_ULRAL_":Q$+="124_ULRZL_":Q$+="125_ULRWL_":Q$+="126_ULXLL_":Q$+="127_ULXHL_":Q$+="128_ULYLL_":Q$+="129_ULYHL_":Q$+="130_ULRFT_":Q$+="131_ULXLT_":Q$+="132_ULXHT_":
Q$+="133_ULYHT_":Q$+="134_ULYLT_":Q$+="135_ULTXL_":Q$+="136_ULTXH_":Q$+="137_ULTYL_":Q$+="138_ULTYH_":
Q$+="139_ULBADD_":Q$+="140_ULCADD_":Q$+="141_ULDADD_":Q$+="142_ULEADD_":Q$+="143_ULHADD_":
Q$+="144_ULLADD_":Q$+="145_ULTADD_":Q$+="146_ULAADD_":Q$+="147_ULXSADD_":Q$+="148_ULXPADD_":Q$+="149_ULXHADD_":Q$+="150_ULXLADD_":Q$+="151_ULYHADD_":Q$+="152_ULYLADD_":Q$+="153_ULBADC_":Q$+="154_ULCADC_":
Q$+="155_ULDADC_":Q$+="156_ULEADC_":Q$+="157_ULHADC_":Q$+="158_ULLADC_":Q$+="159_ULTADC_":Q$+="160_ULAADC_":Q$+="161_ULXSADC_":Q$+="162_ULXPADC_":Q$+="163_ULXHADC_":Q$+="164_ULXLADC_":Q$+="165_ULYHADC_":
Q$+="166_ULYLADC_":Q$+="167_ULBSUB_":Q$+="168_ULCSUB_":Q$+="169_ULDSUB_":Q$+="170_ULESUB_":Q$+="171_ULHSUB_":Q$+="172_ULLSUB_":Q$+="173_ULTSUB_":Q$+="174_ULASUB_":Q$+="175_ULXSSUB_":Q$+="176_ULXPSUB_":
Q$+="177_ULXHSUB_":Q$+="178_ULXLSUB_":Q$+="179_ULYHSUB_":Q$+="180_ULYLSUB_":Q$+="181_ULBSBC_":Q$+="182_ULCSBC_":Q$+="183_ULDSBC_":Q$+="184_ULESBC_":Q$+="185_ULHSBC_":Q$+="186_ULLSBC_":Q$+="187_ULTSBC_":
Q$+="188_ULASBC_":Q$+="189_ULXSSBC_":Q$+="190_ULXPSBC_":Q$+="191_ULXHSBC_":Q$+="192_ULXLSBC_":Q$+="193_ULYHSBC_":Q$+="194_ULYLSBC_":Q$+="195_UFQADD_":Q$+="196_UOINC_":Q$+="197_UODEC_":Q$+="198_UFQID_":
Q$+="199_ULBAND_":Q$+="200_ULCAND_":Q$+="201_ULDAND_":Q$+="202_ULEAND_":Q$+="203_ULHAND_":Q$+="204_ULLAND_":Q$+="205_ULTAND_":Q$+="206_ULAAND_":Q$+="207_ULXSAND_":Q$+="208_ULXPAND_":Q$+="209_ULXHAND_":
Q$+="210_ULXLAND_":Q$+="211_ULYHAND_":Q$+="212_ULYLAND_":Q$+="213_ULBXOR_":Q$+="214_ULCXOR_":Q$+="215_ULDXOR_":Q$+="216_ULEXOR_":Q$+="217_ULHXOR_":Q$+="218_ULLXOR_":Q$+="219_ULTXOR_":Q$+="220_ULAXOR_":
Q$+="221_ULXSXOR_":Q$+="222_ULXPXOR_":Q$+="223_ULXHXOR_":Q$+="224_ULXLXOR_":Q$+="225_ULYHXOR_":Q$+="226_ULYLXOR_":Q$+="227_ULBOR_":Q$+="228_ULCOR_":Q$+="229_ULDOR_":Q$+="230_ULEOR_":Q$+="231_ULHOR_":
Q$+="232_ULLOR_":Q$+="233_ULTOR_":Q$+="234_ULAOR_":Q$+="235_ULXSOR_":Q$+="236_ULXPOR_":Q$+="237_ULXHOR_":Q$+="238_ULXLOR_":Q$+="239_ULYHOR_":Q$+="240_ULYLOR_":Q$+="241_ULBCP_":Q$+="242_ULCCP_":
Q$+="243_ULDCP_":Q$+="244_ULECP_":Q$+="245_ULHCP_":Q$+="246_ULLCP_":Q$+="247_ULTCP_":Q$+="248_ULACP_":Q$+="249_ULXSCP_":Q$+="250_ULXPCP_":Q$+="251_ULXHCP_":Q$+="252_ULXLCP_":Q$+="253_ULYHCP_":
Q$+="254_ULYLCP_":Q$+="255_UFQSH_":Q$+="256_UORLC_":Q$+="257_UORRC_":Q$+="258_UORL_":Q$+="259_UORR_":Q$+="260_UOSLA_":Q$+="261_UOSRA_":Q$+="262_UOSLL_":Q$+="263_UOSRL_":Q$+="264_UORES_":Q$+="265_UOSET_":
Q$+="266_ULTSADD_":Q$+="267_UOSADDC_":Q$+="268_UOBIT_":Q$+="269_UODAA_":Q$+="270_USEWZ_":Q$+="271_USEHL_":Q$+="272_USEIX_":Q$+="273_USEIY_":Q$+="274_SKIP6PO_":Q$+="275_SKIP6POZ_":Q$+="276_ECCZ_":Q$+="277_ECCNZ_":
Q$+="278_ECCC_":Q$+="279_ECCNC_":Q$+="280_ECCPE_":Q$+="281_ECCPO_":Q$+="282_ECCM_":Q$+="283_ECCP_":Q$+="284_SWCCNZ_":Q$+="285_SWCCZ_":Q$+="286_SWCCNC_":Q$+="287_SWCCC_":Q$+="288_SWCCPE_":Q$+="289_SWCCPO_":
Q$+="290_SWCCP_":Q$+="291_SWCCM_":Q$+="292_UOCPL_":Q$+="293_UOSCF_":Q$+="294_UOCCF_":Q$+="295_AF UEXA_":Q$+="296_RR UEXX_":Q$+="297_UDFF_":Q$+="298_USFF_":Q$+="299_UCFF_":Q$+="300_UXHD_":Q$+="301_UNWR_":
Q$+="302_UTIO_":Q$+="303_UPOW_":Q$+="304_UFWR_":Q$+="305_UONEG_":Q$+="306_ULLRI_":Q$+="307_ULLRR_":Q$+="308_UFQIR_":Q$+="309_UFQIO_":Q$+="310_UORVN_":Q$+="311_ULANLL_":Q$+="312_ULTNLL_":
Q$+="313_ULANLH_":Q$+="314_ULTNHL_":Q$+="315_UIM0_":Q$+="316_UIM1_":Q$+="317_UIM2_":Q$+="318_ULAQLD_":Q$+="319_QUIRK ULTCPQ_":Q$+="320_QUIRK UBXORQ_":Q$+="321_CROSS UADDWZ_":Q$+="322_UTADDQ_":
Q$+="323_PIPE TRI:_":Q$+="324_ULLRZ_":Q$+="325_DONE_":Q$+="326_PAR:_":Q$+="327_PIPE EXT:_":

Q$+="328_UIFF_":
Q$+="329_UIMRQ_":
Q$+="330_UIMFET_":
Q$+="331_ULWI_":

Q$+="332_ULZ00_":
Q$+="333_ULZ08_":
Q$+="334_ULZ10_":
Q$+="335_ULZ18_":
Q$+="336_ULZ20_":
Q$+="337_ULZ28_":
Q$+="338_ULZ30_":
Q$+="339_ULZ38_":
Q$+="340_UWBITQ_":
Q$+="341_SKIP6Z_":
Q$+="342_ULWQLD_":
Q$+="343_UOFRXD_":
Q$+="344_UFHLZ_":
Q$+="345_ULTCPX_":
Q$+="346_ULLRW_":

Q$+="!"

T3=1 ' POS AT Q$
T1=0:DO
T2=0: ' SEEK OFFS
T5=0:Do ' FIND NUMBER OF ENTRY
'If Mid$(Q$,T3+T2,1)="_" Then T5=1:T4=Val$(Mid$(Q$,T3,T2)):Print T4;" "; Else T2+=1
If Mid$(Q$,T3+T2,1)="_" Then T5=1:T4=Val$(Mid$(Q$,T3,T2)) Else T2+=1
Loop While T5=0
T3+=T2+1:' GET WORD POS
T2=0:'SEEK OFFS
T5=0:Do' FIND TEXT OF ENTRY
'If Mid$(Q$,T2+T3,1)="_" Then T5=1:Print Mid$(Q$,T3,T2);" "; Else T2+=1
If Mid$(Q$,T2+T3,1)="_" Then T5=1 Else T2+=1
Loop While T5=0
UOPN(T4)=T3:UOPL(T4)=T2
T3+=T2+1
If Mid$(Q$,T3,1)="!" Then T1=1
Loop While T1=0 ' SEEK ALL

' - - - Z80 MNEMONICS - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' ORDER OF ADDITION MAIN=0,XDD=256,XFD=512,XCB=768,XED=1024,XDDCB=1280,XFDCB=1536
O$="" ' MAIN
O$+="NOP_":O$+="LD BC,**_":O$+="LD (BC),A_":O$+="INC BC_":O$+="INC B_":O$+="DEC B_":O$+="LD B,*_":O$+="RLCA_":O$+="EX AF,AF'_":O$+="ADD HL,BC_":O$+="LD A,(BC)_":O$+="DEC BC_":O$+="INC C_":O$+="DEC C_":O$+="LD C,*_":O$+="RRCA_":
O$+="DJNZ *_":O$+="LD DE,**_":O$+="LD (DE),A_":O$+="INC DE_":O$+="INC D_":O$+="DEC D_":O$+="LD D,*_":O$+="RLA_":O$+="JR *_":O$+="ADD HL,DE_":O$+="LD A,(DE)_":O$+="DEC DE_":O$+="INC E_":O$+="DEC E_":O$+="LD E,*_":O$+="RRA_":
O$+="JR NZ,*_":O$+="LD HL,**_":O$+="LD (**),HL_":O$+="INC HL_":O$+="INC H_":O$+="DEC H_":O$+="LD H,*_":O$+="DAA_":O$+="JR Z,*_":O$+="ADD HL,HL_":O$+="LD HL,(**)_":O$+="DEC HL_":O$+="INC L_":O$+="DEC L_":O$+="LD L,*_":O$+="CPL_":
O$+="JR NC,*_":O$+="LD SP,**_":O$+="LD (**),A_":O$+="INC SP_":O$+="INC (HL)_":O$+="DEC (HL)_":O$+="LD (HL),*_":O$+="SCF_":O$+="JR C,*_":O$+="ADD HL,SP_":O$+="LD A,(**)_":O$+="DEC SP_":O$+="INC A_":O$+="DEC A_":O$+="LD A,*_":O$+="CCF_":
O$+="LD B,B_":O$+="LD B,C_":O$+="LD B,D_":O$+="LD B,E_":O$+="LD B,H_":O$+="LD B,L_":O$+="LD B,(HL)_":O$+="LD B,A_":O$+="LD C,B_":O$+="LD C,C_":O$+="LD C,D_":O$+="LD C,E_":O$+="LD C,H_":O$+="LD C,L_":O$+="LD C,(HL)_":O$+="LD C,A_":
O$+="LD D,B_":O$+="LD D,C_":O$+="LD D,D_":O$+="LD D,E_":O$+="LD D,H_":O$+="LD D,L_":O$+="LD D,(HL)_":O$+="LD D,A_":O$+="LD E,B_":O$+="LD E,C_":O$+="LD E,D_":O$+="LD E,E_":O$+="LD E,H_":O$+="LD E,L_":O$+="LD E,(HL)_":O$+="LD E,A_":
O$+="LD H,B_":O$+="LD H,C_":O$+="LD H,D_":O$+="LD H,E_":O$+="LD H,H_":O$+="LD H,L_":O$+="LD H,(HL)_":O$+="LD H,A_":O$+="LD L,B_":O$+="LD L,C_":O$+="LD L,D_":O$+="LD L,E_":O$+="LD L,H_":O$+="LD L,L_":O$+="LD L,(HL)_":O$+="LD L,A_":
O$+="LD (HL),B_":O$+="LD (HL),C_":O$+="LD (HL),D_":O$+="LD (HL),E_":O$+="LD (HL),H_":O$+="LD (HL),L_":O$+="HALT_":O$+="LD (HL),A_":O$+="LD A,B_":O$+="LD A,C_":O$+="LD A,D_":O$+="LD A,E_":O$+="LD A,H_":O$+="LD A,L_":O$+="LD A,(HL)_":O$+="LD A,A_":
O$+="ADD A,B_":O$+="ADD A,C_":O$+="ADD A,D_":O$+="ADD A,E_":O$+="ADD A,H_":O$+="ADD A,L_":O$+="ADD A,(HL)_":O$+="ADD A,A_":O$+="ADC A,B_":O$+="ADC A,C_":O$+="ADC A,D_":O$+="ADC A,E_":O$+="ADC A,H_":O$+="ADC A,L_":O$+="ADC A,(HL)_":O$+="ADC A,A_":
O$+="SUB A,B_":O$+="SUB A,C_":O$+="SUB A,D_":O$+="SUB A,E_":O$+="SUB A,H_":O$+="SUB A,L_":O$+="SUB A,(HL)_":O$+="SUB A,A_":O$+="SBC A,B_":O$+="SBC A,C_":O$+="SBC A,D_":O$+="SBC A,E_":O$+="SBC A,H_":O$+="SBC A,L_":O$+="SBC A,(HL)_":O$+="SBC A,A_":
O$+="AND A,B_":O$+="AND A,C_":O$+="AND A,D_":O$+="AND A,E_":O$+="AND A,H_":O$+="AND A,L_":O$+="AND A,(HL)_":O$+="AND A,A_":O$+="XOR A,B_":O$+="XOR A,C_":O$+="XOR A,D_":O$+="XOR A,E_":O$+="XOR A,H_":O$+="XOR A,L_":O$+="XOR A,(HL)_":O$+="XOR A,A_":
O$+="OR A,B_":O$+="OR A,C_":O$+="OR A,D_":O$+="OR A,E_":O$+="OR A,H_":O$+="OR A,L_":O$+="OR A,(HL)_":O$+="OR A,A_":O$+="CP A,B_":O$+="CP A,C_":O$+="CP A,D_":O$+="CP A,E_":O$+="CP A,H_":O$+="CP A,L_":O$+="CP A,(HL)_":O$+="CP A,A_":
O$+="RET NZ_":O$+="POP BC_":O$+="JP NZ,**_":O$+="JP **_":O$+="CALL NZ,**_":O$+="PUSH BC_":O$+="ADD A,*_":O$+="RST 00H_":O$+="RET Z_":O$+="RET_":O$+="JP Z,**_":O$+="#CB_":O$+="CALL Z,**_":O$+="CALL **_":O$+="ADC A,*_":O$+="RST 08H_":
O$+="RET NC_":O$+="POP DE_":O$+="JP NC,**_":O$+="OUT (**),A_":O$+="CALL NC,**_":O$+="PUSH DE_":O$+="SUB A,*_":O$+="RST 10H_":O$+="RET C_":O$+="EXX_":O$+="JP C,**_":O$+="IN A,(*)_":O$+="CALL C,**_":O$+="#DD_":O$+="SBC A,*_":O$+="RST 18H_":
O$+="RET PO_":O$+="POP HL_":O$+="JP PO,**_":O$+="EX (SP),HL_":O$+="CALL PO,**_":O$+="PUSH HL_":O$+="AND A,*_":O$+="RST 20H_":O$+="RET PE_":O$+="JP (HL)_":O$+="JP PE,**_":O$+="EX DE,HL_":O$+="CALL PE,**_":O$+="#ED_":O$+="XOR A,*_":O$+="RST 28H_":
O$+="RET P_":O$+="POP AF_":O$+="JP P,**_":O$+="DI_":O$+="CALL P,**_":O$+="PUSH AF_":O$+="OR A,*_":O$+="RST 30H_":O$+="RET M_":O$+="LD SP,HL_":O$+="JP M,**_":O$+="EI_":O$+="CALL M,**_":O$+="#FD_":O$+="CP *_":O$+="RST 38H_":
' ORDER OF ADDITION XDD=256,XFD=512,XCB=768,XED=1024,XDDCB=1280,XFDCB=1536
O$+="NOP_":O$+="LD BC,**_":O$+="LD (BC),A_":O$+="INC BC_":O$+="INC B_":O$+="DEC B_":O$+="LD B,*_":O$+="RLCA_":O$+="EX AF,AF'_":O$+="ADD IX,BC_":O$+="LD A,(BC)_":O$+="DEC BC_":O$+="INC C_":O$+="DEC C_":O$+="LD C,*_":O$+="RRCA_":
O$+="DJNZ *_":O$+="LD DE,**_":O$+="LD (DE),A_":O$+="INC DE_":O$+="INC D_":O$+="DEC D_":O$+="LD D,*_":O$+="RLA_":O$+="JR *_":O$+="ADD IX,DE_":O$+="LD A,(DE)_":O$+="DEC DE_":O$+="INC E_":O$+="DEC E_":O$+="LD E,*_":O$+="RRA_":
O$+="JR NZ,*_":O$+="LD IX,**_":O$+="LD (**),IX_":O$+="INC IX_":O$+="INC IXH_":O$+="DEC IXH_":O$+="LD IXH,*_":O$+="DAA_":O$+="JR Z,*_":O$+="ADD IX,IX_":O$+="LD IX,(**)_":O$+="DEC IX_":O$+="INC IXL_":O$+="DEC IXL_":O$+="LD IXL,*_":O$+="CPL_":
O$+="JR NC,*_":O$+="LD SP,**_":O$+="LD (**),A_":O$+="INC SP_":O$+="INC (IX+*)_":O$+="DEC (IX+*)_":O$+="LD (IX+*),*_":O$+="SCF_":O$+="JR C,*_":O$+="ADD IX,SP_":O$+="LD A,(**)_":O$+="DEC SP_":O$+="INC A_":O$+="DEC A_":O$+="LD A,*_":O$+="CCF_":
O$+="LD B,B_":O$+="LD B,C_":O$+="LD B,D_":O$+="LD B,E_":O$+="LD B,IXH_":O$+="LD B,IXL_":O$+="LD B,(IX+*)_":O$+="LD B,A_":O$+="LD C,B_":O$+="LD C,C_":O$+="LD C,D_":O$+="LD C,E_":O$+="LD C,IXH_":O$+="LD C,IXL_":O$+="LD C,(IX+*)_":O$+="LD C,A_":
O$+="LD D,B_":O$+="LD D,C_":O$+="LD D,D_":O$+="LD D,E_":O$+="LD D,IXH_":O$+="LD D,IXL_":O$+="LD D,(IX+*)_":O$+="LD D,A_":O$+="LD E,B_":O$+="LD E,C_":O$+="LD E,D_":O$+="LD E,E_":O$+="LD E,IXH_":O$+="LD E,IXL_":O$+="LD E,(IX+*)_":O$+="LD E,A_":
O$+="LD IXH,B_":O$+="LD IXH,C_":O$+="LD IXH,D_":O$+="LD IXH,E_":O$+="LD IXH,IXH_":O$+="LD IXH,IXL_":O$+="LD H,(IX+*)_":O$+="LD IXH,A_":O$+="LD IXL,B_":O$+="LD IXL,C_":O$+="LD IXL,D_":O$+="LD IXL,E_":O$+="LD IXL,IXH_":O$+="LD IXL,IXL_":O$+="LD L,(IX+*)_":O$+="LD IXL,A_":
O$+="LD (IX+*),B_":O$+="LD (IX+*),C_":O$+="LD (IX+*),D_":O$+="LD (IX+*),E_":O$+="LD (IX+*),H_":O$+="LD (IX+*),L_":O$+="HALT_":O$+="LD (IX+*),A_":O$+="LD A,B_":O$+="LD A,C_":O$+="LD A,D_":O$+="LD A,E_":O$+="LD A,IXH_":O$+="LD A,IXL_":O$+="LD A,(IX+*)_":O$+="LD A,A_":
O$+="ADD A,B_":O$+="ADD A,C_":O$+="ADD A,D_":O$+="ADD A,E_":O$+="ADD A,IXH_":O$+="ADD A,IXL_":O$+="ADD A,(IX+*)_":O$+="ADD A,A_":O$+="ADC A,B_":O$+="ADC A,C_":O$+="ADC A,D_":O$+="ADC A,E_":O$+="ADC A,IXH_":O$+="ADC A,IXL_":O$+="ADC A,(IX+*)_":O$+="ADC A,A_":
O$+="SUB A,B_":O$+="SUB A,C_":O$+="SUB A,D_":O$+="SUB A,E_":O$+="SUB IXH_":O$+="SUB IXL_":O$+="SUB (IX+*)_":O$+="SUB A,A_":O$+="SBC A,B_":O$+="SBC A,C_":O$+="SBC A,D_":O$+="SBC A,E_":O$+="SBC A,IXH_":O$+="SBC A,IXL_":O$+="SBC A,(IX+*)_":O$+="SBC A,A_":
O$+="AND A,B_":O$+="AND A,C_":O$+="AND A,D_":O$+="AND A,E_":O$+="AND IXH_":O$+="AND IXL_":O$+="AND (IX+*)_":O$+="AND A,A_":O$+="XOR A,B_":O$+="XOR A,C_":O$+="XOR A,D_":O$+="XOR A,E_":O$+="XOR IXH_":O$+="XOR IXL_":O$+="XOR (IX+*)_":O$+="XOR A,A_":
O$+="OR A,B_":O$+="OR A,C_":O$+="OR A,D_":O$+="OR A,E_":O$+="OR IXH_":O$+="OR IXL_":O$+="OR (IX+*)_":O$+="OR A,A_":O$+="CP A,B_":O$+="CP A,C_":O$+="CP A,D_":O$+="CP A,E_":O$+="CP IXH_":O$+="CP IXL_":O$+="CP (IX+*)_":O$+="CP A,A_":
O$+="RET NZ_":O$+="POP BC_":O$+="JP NZ,**_":O$+="JP **_":O$+="CALL NZ,**_":O$+="PUSH BC_":O$+="ADD A,*_":O$+="RST 00H_":O$+="RET Z_":O$+="RET_":O$+="JP Z,**_":O$+="#DDCB_":O$+="CALL Z,**_":O$+="CALL **_":O$+="ADC A,*_":O$+="RST 08H_":
O$+="RET NC_":O$+="POP DE_":O$+="JP NC,**_":O$+="OUT (*),A_":O$+="CALL NC,**_":O$+="PUSH DE_":O$+="SUB A,*_":O$+="RST 10H_":O$+="RET C_":O$+="EXX_":O$+="JP C,**_":O$+="IN A,(*)_":O$+="CALL C,**_":O$+="#DD_":O$+="SBC A,*_":O$+="RST 18H_":
O$+="RET PO_":O$+="POP IX_":O$+="JP PO,**_":O$+="EX (SP),IX_":O$+="CALL PO,**_":O$+="PUSH IX_":O$+="AND A,*_":O$+="RST 20H_":O$+="RET PE_":O$+="JP (IX)_":O$+="JP PE,**_":O$+="EX DE,HL_":O$+="CALL PE,**_":O$+="#ED_":O$+="XOR A,*_":O$+="RST 28H_":
O$+="RET P_":O$+="POP AF_":O$+="JP P,**_":O$+="DI_":O$+="CALL P,**_":O$+="PUSH AF_":O$+="OR A,*_":O$+="RST 30H_":O$+="RET M_":O$+="LD SP,IX_":O$+="JP M,**_":O$+="EI_":O$+="CALL M,**_":O$+="#FD_":O$+="CP A,*_":O$+="RST 38H_":
' ORDER OF ADDITION XFD=512,XCB=768,XED=1024,XDDCB=1280,XFDCB=1536
O$+="NOP_":O$+="LD BC,**_":O$+="LD (BC),A_":O$+="INC BC_":O$+="INC B_":O$+="DEC B_":O$+="LD B,*_":O$+="RLCA_":O$+="EX AF,AF'_":O$+="ADD IY,BC_":O$+="LD A,(BC)_":O$+="DEC BC_":O$+="INC C_":O$+="DEC C_":O$+="LD C,*_":O$+="RRCA_":
O$+="DJNZ *_":O$+="LD DE,**_":O$+="LD (DE),A_":O$+="INC DE_":O$+="INC D_":O$+="DEC D_":O$+="LD D,*_":O$+="RLA_":O$+="JR *_":O$+="ADD IY,DE_":O$+="LD A,(DE)_":O$+="DEC DE_":O$+="INC E_":O$+="DEC E_":O$+="LD E,*_":O$+="RRA_":
O$+="JR NZ,*_":O$+="LD IY,**_":O$+="LD (**),IY_":O$+="INC IY_":O$+="INC IYH_":O$+="DEC IYH_":O$+="LD IYH,*_":O$+="DAA_":O$+="JR Z,*_":O$+="ADD IY,IY_":O$+="LD IY,(**)_":O$+="DEC IY_":O$+="INC IYL_":O$+="DEC IYL_":O$+="LD IYL,*_":O$+="CPL_":
O$+="JR NC,*_":O$+="LD SP,**_":O$+="LD (**),A_":O$+="INC SP_":O$+="INC (IY+*)_":O$+="DEC (IY+*)_":O$+="LD (IY+*),*_":O$+="SCF_":O$+="JR C,*_":O$+="ADD IY,SP_":O$+="LD A,(**)_":O$+="DEC SP_":O$+="INC A_":O$+="DEC A_":O$+="LD A,*_":O$+="CCF_":
O$+="LD B,B_":O$+="LD B,C_":O$+="LD B,D_":O$+="LD B,E_":O$+="LD B,IYH_":O$+="LD B,IYL_":O$+="LD B,(IY+*)_":O$+="LD B,A_":O$+="LD C,B_":O$+="LD C,C_":O$+="LD C,D_":O$+="LD C,E_":O$+="LD C,IYH_":O$+="LD C,IYL_":O$+="LD C,(IY+*)_":O$+="LD C,A_":
O$+="LD D,B_":O$+="LD D,C_":O$+="LD D,D_":O$+="LD D,E_":O$+="LD D,IYH_":O$+="LD D,IYL_":O$+="LD D,(IY+*)_":O$+="LD D,A_":O$+="LD E,B_":O$+="LD E,C_":O$+="LD E,D_":O$+="LD E,E_":O$+="LD E,IYH_":O$+="LD E,IYL_":O$+="LD E,(IY+*)_":O$+="LD E,A_":
O$+="LD IYH,B_":O$+="LD IYH,C_":O$+="LD IYH,D_":O$+="LD IYH,E_":O$+="LD IYH,IYH_":O$+="LD IYH,IYL_":O$+="LD H,(IY+*)_":O$+="LD IYH,A_":O$+="LD IYL,B_":O$+="LD IYL,C_":O$+="LD IYL,D_":O$+="LD IYL,E_":O$+="LD IYL,IYH_":O$+="LD IYL,IYL_":O$+="LD L,(IY+*)_":O$+="LD IYL,A_":
O$+="LD (IY+*),B_":O$+="LD (IY+*),C_":O$+="LD (IY+*),D_":O$+="LD (IY+*),E_":O$+="LD (IY+*),H_":O$+="LD (IY+*),L_":O$+="HALT_":O$+="LD (IY+*),A_":O$+="LD A,B_":O$+="LD A,C_":O$+="LD A,D_":O$+="LD A,E_":O$+="LD A,IYH_":O$+="LD A,IYL_":O$+="LD A,(IY+*)_":O$+="LD A,A_":
O$+="ADD A,B_":O$+="ADD A,C_":O$+="ADD A,D_":O$+="ADD A,E_":O$+="ADD A,IYH_":O$+="ADD A,IYL_":O$+="ADD A,(IY+*)_":O$+="ADD A,A_":O$+="ADC A,B_":O$+="ADC A,C_":O$+="ADC A,D_":O$+="ADC A,E_":O$+="ADC A,IYH_":O$+="ADC A,IYL_":O$+="ADC A,(IY+*)_":O$+="ADC A,A_":
O$+="SUB A,B_":O$+="SUB A,C_":O$+="SUB A,D_":O$+="SUB A,E_":O$+="SUB IYH_":O$+="SUB IYL_":O$+="SUB (IY+*)_":O$+="SUB A,A_":O$+="SBC A,B_":O$+="SBC A,C_":O$+="SBC A,D_":O$+="SBC A,E_":O$+="SBC A,IYH_":O$+="SBC A,IYL_":O$+="SBC A,(IY+*)_":O$+="SBC A,A_":
O$+="AND A,B_":O$+="AND A,C_":O$+="AND A,D_":O$+="AND A,E_":O$+="AND IYH_":O$+="AND IYL_":O$+="AND (IY+*)_":O$+="AND A,A_":O$+="XOR A,B_":O$+="XOR A,C_":O$+="XOR A,D_":O$+="XOR A,E_":O$+="XOR IYH_":O$+="XOR IYL_":O$+="XOR (IY+*)_":O$+="XOR A,A_":
O$+="OR A,B_":O$+="OR A,C_":O$+="OR A,D_":O$+="OR A,E_":O$+="OR IYH_":O$+="OR IYL_":O$+="OR (IY+*)_":O$+="OR A,A_":O$+="CP A,B_":O$+="CP A,C_":O$+="CP A,D_":O$+="CP A,E_":O$+="CP IYH_":O$+="CP IYL_":O$+="CP (IY+*)_":O$+="CP A,A_":
O$+="RET NZ_":O$+="POP BC_":O$+="JP NZ,**_":O$+="JP **_":O$+="CALL NZ,**_":O$+="PUSH BC_":O$+="ADD A,*_":O$+="RST 00H_":O$+="RET Z_":O$+="RET_":O$+="JP Z,**_":O$+="#FDCB_":O$+="CALL Z,**_":O$+="CALL **_":O$+="ADC A,*_":O$+="RST 08H_":
O$+="RET NC_":O$+="POP DE_":O$+="JP NC,**_":O$+="OUT (*),A_":O$+="CALL NC,**_":O$+="PUSH DE_":O$+="SUB A,*_":O$+="RST 10H_":O$+="RET C_":O$+="EXX_":O$+="JP C,**_":O$+="IN A,(*)_":O$+="CALL C,**_":O$+="#DD_":O$+="SBC A,*_":O$+="RST 18H_":
O$+="RET PO_":O$+="POP IY_":O$+="JP PO,**_":O$+="EX (SP),IY_":O$+="CALL PO,**_":O$+="PUSH IY_":O$+="AND A,*_":O$+="RST 20H_":O$+="RET PE_":O$+="JP (IY)_":O$+="JP PE,**_":O$+="EX DE,HL_":O$+="CALL PE,**_":O$+="#ED_":O$+="XOR A,*_":O$+="RST 28H_":
O$+="RET P_":O$+="POP AF_":O$+="JP P,**_":O$+="DI_":O$+="CALL P,**_":O$+="PUSH AF_":O$+="OR A,*_":O$+="RST 30H_":O$+="RET M_":O$+="LD SP,IY_":O$+="JP M,**_":O$+="EI_":O$+="CALL M,**_":O$+="#FD_":O$+="CP A,*_":O$+="RST 38H_":
' ORDER OF ADDITION XCB=768,XED=1024,XDDCB=1280,XFDCB=1536
O$+="RLC B_":O$+="RLC C_":O$+="RLC D_":O$+="RLC E_":O$+="RLC H_":O$+="RLC L_":O$+="RLC (HL)_":O$+="RLC A_":O$+="RRC B_":O$+="RRC C_":O$+="RRC D_":O$+="RRC E_":O$+="RRC H_":O$+="RRC L_":O$+="RRC (HL)_":O$+="RRC A_":
O$+="RL B_":O$+="RL C_":O$+="RL D_":O$+="RL E_":O$+="RL H_":O$+="RL L_":O$+="RL (HL)_":O$+="RL A_":O$+="RR B_":O$+="RR C_":O$+="RR D_":O$+="RR E_":O$+="RR H_":O$+="RR L_":O$+="RR (HL)_":O$+="RR A_":
O$+="SLA B_":O$+="SLA C_":O$+="SLA D_":O$+="SLA E_":O$+="SLA H_":O$+="SLA L_":O$+="SLA (HL)_":O$+="SLA A_":O$+="SRA B_":O$+="SRA C_":O$+="SRA D_":O$+="SRA E_":O$+="SRA H_":O$+="SRA L_":O$+="SRA (HL)_":O$+="SRA A_":
O$+="SLL B_":O$+="SLL C_":O$+="SLL D_":O$+="SLL E_":O$+="SLL H_":O$+="SLL L_":O$+="SLL (HL)_":O$+="SLL A_":O$+="SRL B_":O$+="SRL C_":O$+="SRL D_":O$+="SRL E_":O$+="SRL H_":O$+="SRL L_":O$+="SRL (HL)_":O$+="SRL A_":
O$+="BIT 0,B_":O$+="BIT 0,C_":O$+="BIT 0,D_":O$+="BIT 0,E_":O$+="BIT 0,H_":O$+="BIT 0,L_":O$+="BIT 0,(HL)_":O$+="BIT 0,A_":O$+="BIT 1,B_":O$+="BIT 1,C_":O$+="BIT 1,D_":O$+="BIT 1,E_":O$+="BIT 1,H_":O$+="BIT 1,L_":O$+="BIT 1,(HL)_":O$+="BIT 1,A_":
O$+="BIT 2,B_":O$+="BIT 2,C_":O$+="BIT 2,D_":O$+="BIT 2,E_":O$+="BIT 2,H_":O$+="BIT 2,L_":O$+="BIT 2,(HL)_":O$+="BIT 2,A_":O$+="BIT 3,B_":O$+="BIT 3,C_":O$+="BIT 3,D_":O$+="BIT 3,E_":O$+="BIT 3,H_":O$+="BIT 3,L_":O$+="BIT 3,(HL)_":O$+="BIT 3,A_":
O$+="BIT 4,B_":O$+="BIT 4,C_":O$+="BIT 4,D_":O$+="BIT 4,E_":O$+="BIT 4,H_":O$+="BIT 4,L_":O$+="BIT 4,(HL)_":O$+="BIT 4,A_":O$+="BIT 5,B_":O$+="BIT 5,C_":O$+="BIT 5,D_":O$+="BIT 5,E_":O$+="BIT 5,H_":O$+="BIT 5,L_":O$+="BIT 5,(HL)_":O$+="BIT 5,A_":
O$+="BIT 6,B_":O$+="BIT 6,C_":O$+="BIT 6,D_":O$+="BIT 6,E_":O$+="BIT 6,H_":O$+="BIT 6,L_":O$+="BIT 6,(HL)_":O$+="BIT 6,A_":O$+="BIT 7,B_":O$+="BIT 7,C_":O$+="BIT 7,D_":O$+="BIT 7,E_":O$+="BIT 7,H_":O$+="BIT 7,L_":O$+="BIT 7,(HL)_":O$+="BIT 7,A_":
O$+="RES 0,B_":O$+="RES 0,C_":O$+="RES 0,D_":O$+="RES 0,E_":O$+="RES 0,H_":O$+="RES 0,L_":O$+="RES 0,(HL)_":O$+="RES 0,A_":O$+="RES 1,B_":O$+="RES 1,C_":O$+="RES 1,D_":O$+="RES 1,E_":O$+="RES 1,H_":O$+="RES 1,L_":O$+="RES 1,(HL)_":O$+="RES 1,A_":
O$+="RES 2,B_":O$+="RES 2,C_":O$+="RES 2,D_":O$+="RES 2,E_":O$+="RES 2,H_":O$+="RES 2,L_":O$+="RES 2,(HL)_":O$+="RES 2,A_":O$+="RES 3,B_":O$+="RES 3,C_":O$+="RES 3,D_":O$+="RES 3,E_":O$+="RES 3,H_":O$+="RES 3,L_":O$+="RES 3,(HL)_":O$+="RES 3,A_":
O$+="RES 4,B_":O$+="RES 4,C_":O$+="RES 4,D_":O$+="RES 4,E_":O$+="RES 4,H_":O$+="RES 4,L_":O$+="RES 4,(HL)_":O$+="RES 4,A_":O$+="RES 5,B_":O$+="RES 5,C_":O$+="RES 5,D_":O$+="RES 5,E_":O$+="RES 5,H_":O$+="RES 5,L_":O$+="RES 5,(HL)_":O$+="RES 5,A_":
O$+="RES 6,B_":O$+="RES 6,C_":O$+="RES 6,D_":O$+="RES 6,E_":O$+="RES 6,H_":O$+="RES 6,L_":O$+="RES 6,(HL)_":O$+="RES 6,A_":O$+="RES 7,B_":O$+="RES 7,C_":O$+="RES 7,D_":O$+="RES 7,E_":O$+="RES 7,H_":O$+="RES 7,L_":O$+="RES 7,(HL)_":O$+="RES 7,A_":
O$+="SET 0,B_":O$+="SET 0,C_":O$+="SET 0,D_":O$+="SET 0,E_":O$+="SET 0,H_":O$+="SET 0,L_":O$+="SET 0,(HL)_":O$+="SET 0,A_":O$+="SET 1,B_":O$+="SET 1,C_":O$+="SET 1,D_":O$+="SET 1,E_":O$+="SET 1,H_":O$+="SET 1,L_":O$+="SET 1,(HL)_":O$+="SET 1,A_":
O$+="SET 2,B_":O$+="SET 2,C_":O$+="SET 2,D_":O$+="SET 2,E_":O$+="SET 2,H_":O$+="SET 2,L_":O$+="SET 2,(HL)_":O$+="SET 2,A_":O$+="SET 3,B_":O$+="SET 3,C_":O$+="SET 3,D_":O$+="SET 3,E_":O$+="SET 3,H_":O$+="SET 3,L_":O$+="SET 3,(HL)_":O$+="SET 3,A_":
O$+="SET 4,B_":O$+="SET 4,C_":O$+="SET 4,D_":O$+="SET 4,E_":O$+="SET 4,H_":O$+="SET 4,L_":O$+="SET 4,(HL)_":O$+="SET 4,A_":O$+="SET 5,B_":O$+="SET 5,C_":O$+="SET 5,D_":O$+="SET 5,E_":O$+="SET 5,H_":O$+="SET 5,L_":O$+="SET 5,(HL)_":O$+="SET 5,A_":
O$+="SET 6,B_":O$+="SET 6,C_":O$+="SET 6,D_":O$+="SET 6,E_":O$+="SET 6,H_":O$+="SET 6,L_":O$+="SET 6,(HL)_":O$+="SET 6,A_":O$+="SET 7,B_":O$+="SET 7,C_":O$+="SET 7,D_":O$+="SET 7,E_":O$+="SET 7,H_":O$+="SET 7,L_":O$+="SET 7,(HL)_":O$+="SET 7,A_":
' ORDER OF ADDITION XED=1024,XDDCB=1280,XFDCB=1536
O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":
O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":
O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":
O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":
O$+="IN B,(C)_":O$+="OUT (C),B_":O$+="SBC HL,BC_":O$+="LD (**),BC_":O$+="NEG_":O$+="RETN_":O$+="IM 0_":O$+="LD I,A_":O$+="IN C,(C)_":O$+="OUT (C),C_":O$+="ADC HL,BC_":O$+="LD BC,(**)_":O$+="NEG_":O$+="RETI_":O$+="IM 0_":O$+="LD R,A_":
O$+="IN D,(C)_":O$+="OUT (C),D_":O$+="SBC HL,DE_":O$+="LD (**),DE_":O$+="NEG_":O$+="RETN_":O$+="IM 1_":O$+="LD A,I_":O$+="IN E,(C)_":O$+="OUT (C),E_":O$+="ADC HL,DE_":O$+="LD DE,(**)_":O$+="NEG_":O$+="RETN_":O$+="IM 2_":O$+="LD A,R_":
O$+="IN H,(C)_":O$+="OUT (C),H_":O$+="SBC HL,HL_":O$+="LD (**),HL_":O$+="NEG_":O$+="RETN_":O$+="IM 0_":O$+="RRD_":O$+="IN L,(C)_":O$+="OUT (C),L_":O$+="ADC HL,HL_":O$+="LD HL,(**)_":O$+="NEG_":O$+="RETN_":O$+="IM 0_":O$+="RLD_":
O$+="IN NULL,(C)_":O$+="OUT (C),00H_":O$+="SBC HL,SP_":O$+="LD (**),SP_":O$+="NEG_":O$+="RETN_":O$+="IM 1_":O$+="NONI_":O$+="IN A,(C)_":O$+="OUT (C),A_":O$+="ADC HL,SP_":O$+="LD SP,(**)_":O$+="NEG_":O$+="RETN_":O$+="IM 2_":O$+="NONI_":
O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":
O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":
O$+="LDI_":O$+="CPI_":O$+="INI_":O$+="OUTI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="LDD_":O$+="CPD_":O$+="IND_":O$+="OUTD_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":
O$+="LDIR_":O$+="CPIR_":O$+="INIR_":O$+="OTIR_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="LDDR_":O$+="CPDR_":O$+="INDR_":O$+="OTDR_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":
O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":
O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":
O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":
O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":O$+="NONI_":
' ORDER OF ADDITION XDDCB=1280,XFDCB=1536
O$+="RLC (IX+*),B_":O$+="RLC (IX+*),C_":O$+="RLC (IX+*),D_":O$+="RLC (IX+*),E_":O$+="RLC (IX+*),H_":O$+="RLC (IX+*),L_":O$+="RLC (IX+*)_":O$+="RLC (IX+*),A_":O$+="RRC (IX+*),B_":O$+="RRC (IX+*),C_":O$+="RRC (IX+*),D_":O$+="RRC (IX+*),E_":O$+="RRC (IX+*),H_":O$+="RRC (IX+*),L_":O$+="RRC (IX+*)_":O$+="RRC (IX+*),A_":
O$+="RL (IX+*),B_":O$+="RL (IX+*),C_":O$+="RL (IX+*),D_":O$+="RL (IX+*),E_":O$+="RL (IX+*),H_":O$+="RL (IX+*),L_":O$+="RL (IX+*)_":O$+="RL (IX+*),A_":O$+="RR (IX+*),B_":O$+="RR (IX+*),C_":O$+="RR (IX+*),D_":O$+="RR (IX+*),E_":O$+="RR (IX+*),H_":O$+="RR (IX+*),L_":O$+="RR (IX+*)_":O$+="RR (IX+*),A_":
O$+="SLA (IX+*),B_":O$+="SLA (IX+*),C_":O$+="SLA (IX+*),D_":O$+="SLA (IX+*),E_":O$+="SLA (IX+*),H_":O$+="SLA (IX+*),L_":O$+="SLA (IX+*)_":O$+="SLA (IX+*),A_":O$+="SRA (IX+*),B_":O$+="SRA (IX+*),C_":O$+="SRA (IX+*),D_":O$+="SRA (IX+*),E_":O$+="SRA (IX+*),H_":O$+="SRA (IX+*),L_":O$+="SRA (IX+*)_":O$+="SRA (IX+*),A_":
O$+="SLL (IX+*),B_":O$+="SLL (IX+*),C_":O$+="SLL (IX+*),D_":O$+="SLL (IX+*),E_":O$+="SLL (IX+*),H_":O$+="SLL (IX+*),L_":O$+="SLL (IX+*)_":O$+="SLL (IX+*),A_":O$+="SRL (IX+*),B_":O$+="SRL (IX+*),C_":O$+="SRL (IX+*),D_":O$+="SRL (IX+*),E_":O$+="SRL (IX+*),H_":O$+="SRL (IX+*),L_":O$+="SRL (IX+*)_":O$+="SRL (IX+*),A_":
O$+="BIT 0,(IX+*)_":O$+="BIT 0,(IX+*)_":O$+="BIT 0,(IX+*)_":O$+="BIT 0,(IX+*)_":O$+="BIT 0,(IX+*)_":O$+="BIT 0,(IX+*)_":O$+="BIT 0,(IX+*)_":O$+="BIT 0,(IX+*)_":O$+="BIT 1,(IX+*)_":O$+="BIT 1,(IX+*)_":O$+="BIT 1,(IX+*)_":O$+="BIT 1,(IX+*)_":O$+="BIT 1,(IX+*)_":O$+="BIT 1,(IX+*)_":O$+="BIT 1,(IX+*)_":O$+="BIT 1,(IX+*)_":
O$+="BIT 2,(IX+*)_":O$+="BIT 2,(IX+*)_":O$+="BIT 2,(IX+*)_":O$+="BIT 2,(IX+*)_":O$+="BIT 2,(IX+*)_":O$+="BIT 2,(IX+*)_":O$+="BIT 2,(IX+*)_":O$+="BIT 2,(IX+*)_":O$+="BIT 3,(IX+*)_":O$+="BIT 3,(IX+*)_":O$+="BIT 3,(IX+*)_":O$+="BIT 3,(IX+*)_":O$+="BIT 3,(IX+*)_":O$+="BIT 3,(IX+*)_":O$+="BIT 3,(IX+*)_":O$+="BIT 3,(IX+*)_":
O$+="BIT 4,(IX+*)_":O$+="BIT 4,(IX+*)_":O$+="BIT 4,(IX+*)_":O$+="BIT 4,(IX+*)_":O$+="BIT 4,(IX+*)_":O$+="BIT 4,(IX+*)_":O$+="BIT 4,(IX+*)_":O$+="BIT 4,(IX+*)_":O$+="BIT 5,(IX+*)_":O$+="BIT 5,(IX+*)_":O$+="BIT 5,(IX+*)_":O$+="BIT 5,(IX+*)_":O$+="BIT 5,(IX+*)_":O$+="BIT 5,(IX+*)_":O$+="BIT 5,(IX+*)_":O$+="BIT 5,(IX+*)_":
O$+="BIT 6,(IX+*)_":O$+="BIT 6,(IX+*)_":O$+="BIT 6,(IX+*)_":O$+="BIT 6,(IX+*)_":O$+="BIT 6,(IX+*)_":O$+="BIT 6,(IX+*)_":O$+="BIT 6,(IX+*)_":O$+="BIT 6,(IX+*)_":O$+="BIT 7,(IX+*)_":O$+="BIT 7,(IX+*)_":O$+="BIT 7,(IX+*)_":O$+="BIT 7,(IX+*)_":O$+="BIT 7,(IX+*)_":O$+="BIT 7,(IX+*)_":O$+="BIT 7,(IX+*)_":O$+="BIT 7,(IX+*)_":
O$+="RES 0,(IX+*),B_":O$+="RES 0,(IX+*),C_":O$+="RES 0,(IX+*),D_":O$+="RES 0,(IX+*),E_":O$+="RES 0,(IX+*),H_":O$+="RES 0,(IX+*),L_":O$+="RES 0,(IX+*)_":O$+="RES 0,(IX+*),A_":O$+="RES 1,(IX+*),B_":O$+="RES 1,(IX+*),C_":O$+="RES 1,(IX+*),D_":O$+="RES 1,(IX+*),E_":O$+="RES 1,(IX+*),H_":O$+="RES 1,(IX+*),L_":O$+="RES 1,(IX+*)_":O$+="RES 1,(IX+*),A_":
O$+="RES 2,(IX+*),B_":O$+="RES 2,(IX+*),C_":O$+="RES 2,(IX+*),D_":O$+="RES 2,(IX+*),E_":O$+="RES 2,(IX+*),H_":O$+="RES 2,(IX+*),L_":O$+="RES 2,(IX+*)_":O$+="RES 2,(IX+*),A_":O$+="RES 3,(IX+*),B_":O$+="RES 3,(IX+*),C_":O$+="RES 3,(IX+*),D_":O$+="RES 3,(IX+*),E_":O$+="RES 3,(IX+*),H_":O$+="RES 3,(IX+*),L_":O$+="RES 3,(IX+*)_":O$+="RES 3,(IX+*),A_":
O$+="RES 4,(IX+*),B_":O$+="RES 4,(IX+*),C_":O$+="RES 4,(IX+*),D_":O$+="RES 4,(IX+*),E_":O$+="RES 4,(IX+*),H_":O$+="RES 4,(IX+*),L_":O$+="RES 4,(IX+*)_":O$+="RES 4,(IX+*),A_":O$+="RES 5,(IX+*),B_":O$+="RES 5,(IX+*),C_":O$+="RES 5,(IX+*),D_":O$+="RES 5,(IX+*),E_":O$+="RES 5,(IX+*),H_":O$+="RES 5,(IX+*),L_":O$+="RES 5,(IX+*)_":O$+="RES 5,(IX+*),A_":
O$+="RES 6,(IX+*),B_":O$+="RES 6,(IX+*),C_":O$+="RES 6,(IX+*),D_":O$+="RES 6,(IX+*),E_":O$+="RES 6,(IX+*),H_":O$+="RES 6,(IX+*),L_":O$+="RES 6,(IX+*)_":O$+="RES 6,(IX+*),A_":O$+="RES 7,(IX+*),B_":O$+="RES 7,(IX+*),C_":O$+="RES 7,(IX+*),D_":O$+="RES 7,(IX+*),E_":O$+="RES 7,(IX+*),H_":O$+="RES 7,(IX+*),L_":O$+="RES 7,(IX+*)_":O$+="RES 7,(IX+*),A_":
O$+="SET 0,(IX+*),B_":O$+="SET 0,(IX+*),C_":O$+="SET 0,(IX+*),D_":O$+="SET 0,(IX+*),E_":O$+="SET 0,(IX+*),H_":O$+="SET 0,(IX+*),L_":O$+="SET 0,(IX+*)_":O$+="SET 0,(IX+*),A_":O$+="SET 1,(IX+*),B_":O$+="SET 1,(IX+*),C_":O$+="SET 1,(IX+*),D_":O$+="SET 1,(IX+*),E_":O$+="SET 1,(IX+*),H_":O$+="SET 1,(IX+*),L_":O$+="SET 1,(IX+*)_":O$+="SET 1,(IX+*),A_":
O$+="SET 2,(IX+*),B_":O$+="SET 2,(IX+*),C_":O$+="SET 2,(IX+*),D_":O$+="SET 2,(IX+*),E_":O$+="SET 2,(IX+*),H_":O$+="SET 2,(IX+*),L_":O$+="SET 2,(IX+*)_":O$+="SET 2,(IX+*),A_":O$+="SET 3,(IX+*),B_":O$+="SET 3,(IX+*),C_":O$+="SET 3,(IX+*),D_":O$+="SET 3,(IX+*),E_":O$+="SET 3,(IX+*),H_":O$+="SET 3,(IX+*),L_":O$+="SET 3,(IX+*)_":O$+="SET 3,(IX+*),A_":
O$+="SET 4,(IX+*),B_":O$+="SET 4,(IX+*),C_":O$+="SET 4,(IX+*),D_":O$+="SET 4,(IX+*),E_":O$+="SET 4,(IX+*),H_":O$+="SET 4,(IX+*),L_":O$+="SET 4,(IX+*)_":O$+="SET 4,(IX+*),A_":O$+="SET 5,(IX+*),B_":O$+="SET 5,(IX+*),C_":O$+="SET 5,(IX+*),D_":O$+="SET 5,(IX+*),E_":O$+="SET 5,(IX+*),H_":O$+="SET 5,(IX+*),L_":O$+="SET 5,(IX+*)_":O$+="SET 5,(IX+*),A_":
O$+="SET 6,(IX+*),B_":O$+="SET 6,(IX+*),C_":O$+="SET 6,(IX+*),D_":O$+="SET 6,(IX+*),E_":O$+="SET 6,(IX+*),H_":O$+="SET 6,(IX+*),L_":O$+="SET 6,(IX+*)_":O$+="SET 6,(IX+*),A_":O$+="SET 7,(IX+*),B_":O$+="SET 7,(IX+*),C_":O$+="SET 7,(IX+*),D_":O$+="SET 7,(IX+*),E_":O$+="SET 7,(IX+*),H_":O$+="SET 7,(IX+*),L_":O$+="SET 7,(IX+*)_":O$+="SET 7,(IX+*),A_":
' ORDER OF ADDITION XFDCB=1536
O$+="RLC (IY+*),B_":O$+="RLC (IY+*),C_":O$+="RLC (IY+*),D_":O$+="RLC (IY+*),E_":O$+="RLC (IY+*),H_":O$+="RLC (IY+*),L_":O$+="RLC (IY+*)_":O$+="RLC (IY+*),A_":O$+="RRC (IY+*),B_":O$+="RRC (IY+*),C_":O$+="RRC (IY+*),D_":O$+="RRC (IY+*),E_":O$+="RRC (IY+*),H_":O$+="RRC (IY+*),L_":O$+="RRC (IY+*)_":O$+="RRC (IY+*),A_":
O$+="RL (IY+*),B_":O$+="RL (IY+*),C_":O$+="RL (IY+*),D_":O$+="RL (IY+*),E_":O$+="RL (IY+*),H_":O$+="RL (IY+*),L_":O$+="RL (IY+*)_":O$+="RL (IY+*),A_":O$+="RR (IY+*),B_":O$+="RR (IY+*),C_":O$+="RR (IY+*),D_":O$+="RR (IY+*),E_":O$+="RR (IY+*),H_":O$+="RR (IY+*),L_":O$+="RR (IY+*)_":O$+="RR (IY+*),A_":
O$+="SLA (IY+*),B_":O$+="SLA (IY+*),C_":O$+="SLA (IY+*),D_":O$+="SLA (IY+*),E_":O$+="SLA (IY+*),H_":O$+="SLA (IY+*),L_":O$+="SLA (IY+*)_":O$+="SLA (IY+*),A_":O$+="SRA (IY+*),B_":O$+="SRA (IY+*),C_":O$+="SRA (IY+*),D_":O$+="SRA (IY+*),E_":O$+="SRA (IY+*),H_":O$+="SRA (IY+*),L_":O$+="SRA (IY+*)_":O$+="SRA (IY+*),A_":
O$+="SLL (IY+*),B_":O$+="SLL (IY+*),C_":O$+="SLL (IY+*),D_":O$+="SLL (IY+*),E_":O$+="SLL (IY+*),H_":O$+="SLL (IY+*),L_":O$+="SLL (IY+*)_":O$+="SLL (IY+*),A_":O$+="SRL (IY+*),B_":O$+="SRL (IY+*),C_":O$+="SRL (IY+*),D_":O$+="SRL (IY+*),E_":O$+="SRL (IY+*),H_":O$+="SRL (IY+*),L_":O$+="SRL (IY+*)_":O$+="SRL (IY+*),A_":
O$+="BIT 0,(IY+*)_":O$+="BIT 0,(IY+*)_":O$+="BIT 0,(IY+*)_":O$+="BIT 0,(IY+*)_":O$+="BIT 0,(IY+*)_":O$+="BIT 0,(IY+*)_":O$+="BIT 0,(IY+*)_":O$+="BIT 0,(IY+*)_":O$+="BIT 1,(IY+*)_":O$+="BIT 1,(IY+*)_":O$+="BIT 1,(IY+*)_":O$+="BIT 1,(IY+*)_":O$+="BIT 1,(IY+*)_":O$+="BIT 1,(IY+*)_":O$+="BIT 1,(IY+*)_":O$+="BIT 1,(IY+*)_":
O$+="BIT 2,(IY+*)_":O$+="BIT 2,(IY+*)_":O$+="BIT 2,(IY+*)_":O$+="BIT 2,(IY+*)_":O$+="BIT 2,(IY+*)_":O$+="BIT 2,(IY+*)_":O$+="BIT 2,(IY+*)_":O$+="BIT 2,(IY+*)_":O$+="BIT 3,(IY+*)_":O$+="BIT 3,(IY+*)_":O$+="BIT 3,(IY+*)_":O$+="BIT 3,(IY+*)_":O$+="BIT 3,(IY+*)_":O$+="BIT 3,(IY+*)_":O$+="BIT 3,(IY+*)_":O$+="BIT 3,(IY+*)_":
O$+="BIT 4,(IY+*)_":O$+="BIT 4,(IY+*)_":O$+="BIT 4,(IY+*)_":O$+="BIT 4,(IY+*)_":O$+="BIT 4,(IY+*)_":O$+="BIT 4,(IY+*)_":O$+="BIT 4,(IY+*)_":O$+="BIT 4,(IY+*)_":O$+="BIT 5,(IY+*)_":O$+="BIT 5,(IY+*)_":O$+="BIT 5,(IY+*)_":O$+="BIT 5,(IY+*)_":O$+="BIT 5,(IY+*)_":O$+="BIT 5,(IY+*)_":O$+="BIT 5,(IY+*)_":O$+="BIT 5,(IY+*)_":
O$+="BIT 6,(IY+*)_":O$+="BIT 6,(IY+*)_":O$+="BIT 6,(IY+*)_":O$+="BIT 6,(IY+*)_":O$+="BIT 6,(IY+*)_":O$+="BIT 6,(IY+*)_":O$+="BIT 6,(IY+*)_":O$+="BIT 6,(IY+*)_":O$+="BIT 7,(IY+*)_":O$+="BIT 7,(IY+*)_":O$+="BIT 7,(IY+*)_":O$+="BIT 7,(IY+*)_":O$+="BIT 7,(IY+*)_":O$+="BIT 7,(IY+*)_":O$+="BIT 7,(IY+*)_":O$+="BIT 7,(IY+*)_":
O$+="RES 0,(IY+*),B_":O$+="RES 0,(IY+*),C_":O$+="RES 0,(IY+*),D_":O$+="RES 0,(IY+*),E_":O$+="RES 0,(IY+*),H_":O$+="RES 0,(IY+*),L_":O$+="RES 0,(IY+*)_":O$+="RES 0,(IY+*),A_":O$+="RES 1,(IY+*),B_":O$+="RES 1,(IY+*),C_":O$+="RES 1,(IY+*),D_":O$+="RES 1,(IY+*),E_":O$+="RES 1,(IY+*),H_":O$+="RES 1,(IY+*),L_":O$+="RES 1,(IY+*)_":O$+="RES 1,(IY+*),A_":
O$+="RES 2,(IY+*),B_":O$+="RES 2,(IY+*),C_":O$+="RES 2,(IY+*),D_":O$+="RES 2,(IY+*),E_":O$+="RES 2,(IY+*),H_":O$+="RES 2,(IY+*),L_":O$+="RES 2,(IY+*)_":O$+="RES 2,(IY+*),A_":O$+="RES 3,(IY+*),B_":O$+="RES 3,(IY+*),C_":O$+="RES 3,(IY+*),D_":O$+="RES 3,(IY+*),E_":O$+="RES 3,(IY+*),H_":O$+="RES 3,(IY+*),L_":O$+="RES 3,(IY+*)_":O$+="RES 3,(IY+*),A_":
O$+="RES 4,(IY+*),B_":O$+="RES 4,(IY+*),C_":O$+="RES 4,(IY+*),D_":O$+="RES 4,(IY+*),E_":O$+="RES 4,(IY+*),H_":O$+="RES 4,(IY+*),L_":O$+="RES 4,(IY+*)_":O$+="RES 4,(IY+*),A_":O$+="RES 5,(IY+*),B_":O$+="RES 5,(IY+*),C_":O$+="RES 5,(IY+*),D_":O$+="RES 5,(IY+*),E_":O$+="RES 5,(IY+*),H_":O$+="RES 5,(IY+*),L_":O$+="RES 5,(IY+*)_":O$+="RES 5,(IY+*),A_":
O$+="RES 6,(IY+*),B_":O$+="RES 6,(IY+*),C_":O$+="RES 6,(IY+*),D_":O$+="RES 6,(IY+*),E_":O$+="RES 6,(IY+*),H_":O$+="RES 6,(IY+*),L_":O$+="RES 6,(IY+*)_":O$+="RES 6,(IY+*),A_":O$+="RES 7,(IY+*),B_":O$+="RES 7,(IY+*),C_":O$+="RES 7,(IY+*),D_":O$+="RES 7,(IY+*),E_":O$+="RES 7,(IY+*),H_":O$+="RES 7,(IY+*),L_":O$+="RES 7,(IY+*)_":O$+="RES 7,(IY+*),A_":
O$+="SET 0,(IY+*),B_":O$+="SET 0,(IY+*),C_":O$+="SET 0,(IY+*),D_":O$+="SET 0,(IY+*),E_":O$+="SET 0,(IY+*),H_":O$+="SET 0,(IY+*),L_":O$+="SET 0,(IY+*)_":O$+="SET 0,(IY+*),A_":O$+="SET 1,(IY+*),B_":O$+="SET 1,(IY+*),C_":O$+="SET 1,(IY+*),D_":O$+="SET 1,(IY+*),E_":O$+="SET 1,(IY+*),H_":O$+="SET 1,(IY+*),L_":O$+="SET 1,(IY+*)_":O$+="SET 1,(IY+*),A_":
O$+="SET 2,(IY+*),B_":O$+="SET 2,(IY+*),C_":O$+="SET 2,(IY+*),D_":O$+="SET 2,(IY+*),E_":O$+="SET 2,(IY+*),H_":O$+="SET 2,(IY+*),L_":O$+="SET 2,(IY+*)_":O$+="SET 2,(IY+*),A_":O$+="SET 3,(IY+*),B_":O$+="SET 3,(IY+*),C_":O$+="SET 3,(IY+*),D_":O$+="SET 3,(IY+*),E_":O$+="SET 3,(IY+*),H_":O$+="SET 3,(IY+*),L_":O$+="SET 3,(IY+*)_":O$+="SET 3,(IY+*),A_":
O$+="SET 4,(IY+*),B_":O$+="SET 4,(IY+*),C_":O$+="SET 4,(IY+*),D_":O$+="SET 4,(IY+*),E_":O$+="SET 4,(IY+*),H_":O$+="SET 4,(IY+*),L_":O$+="SET 4,(IY+*)_":O$+="SET 4,(IY+*),A_":O$+="SET 5,(IY+*),B_":O$+="SET 5,(IY+*),C_":O$+="SET 5,(IY+*),D_":O$+="SET 5,(IY+*),E_":O$+="SET 5,(IY+*),H_":O$+="SET 5,(IY+*),L_":O$+="SET 5,(IY+*)_":O$+="SET 5,(IY+*),A_":
O$+="SET 6,(IY+*),B_":O$+="SET 6,(IY+*),C_":O$+="SET 6,(IY+*),D_":O$+="SET 6,(IY+*),E_":O$+="SET 6,(IY+*),H_":O$+="SET 6,(IY+*),L_":O$+="SET 6,(IY+*)_":O$+="SET 6,(IY+*),A_":O$+="SET 7,(IY+*),B_":O$+="SET 7,(IY+*),C_":O$+="SET 7,(IY+*),D_":O$+="SET 7,(IY+*),E_":O$+="SET 7,(IY+*),H_":O$+="SET 7,(IY+*),L_":O$+="SET 7,(IY+*)_":O$+="SET 7,(IY+*),A_":

T3=1 ' O$ INDEX
For T1=0 To 6
For T2=0 To 255

T4=0:T5=0:DO
If Mid$(O$,T3+T4,1)="_" Then T5=1 Else T4+=1
Loop While T5=0
XMNEM(T1*256+T2)=T3:XMLEN(T1*256+T2)=T4:
T3=T3+T4+1
'Print Mid$(O$,XMNEM(T1*256+T2),XMLEN(T1*256+T2));" ";
Next
'Sleep
'PRINT
Next
'Sleep

End Sub
GENTEXT


'- - - - - HERE MERGED GEN_IC_PC_PTOC,PAL_QPL,BTO_YTO,PQM,CLIM,BIG,SPP
Sub LUT_GFX_CREATE () Static

' - - ALLOCATE CHUNKS GRANULAR BY BYTES
PSPP=GETPTR(256*192,31) ' LUT PERPIXEL SIGNALS TO BLUR TO CHANGE FX MODE
PCLIM=GETPTR(16384*2,31) ' LUT FINAL INT LUMA LIMITER TO 255, IS DIVIDED BY DIVS
PPLIM=GETPTR(16384*2,31) ' LUT PATTERN LUMA LIMITER, IS DIVIDED BY DIVF
PMLIM=GETPTR(16384*2,31) ' LUT PATTERN LESS LUMA LIMITER, IS DIVIDED BY DIVM
PPTOC=GETPTR(16*8,31) ' LUT RGB48 OF ZX COLOURS, INKS
PPTOL=GETPTR(256*8,31) ' LUT 8PIX BYTE TO 8BYTE OF 0/255 VALUE SEQ FIR PCVZ
PPQM=GETPTR(16*16*16*16*8,31) ' LUT QUAD 4BPP RGB48 SUMM, DIVIDED BY DIVD
PQPX=GETPTR(4096*8,31) ' REPACK OF ZX SCR TO 4BPP FORMAT VIA PQPL LUT
PQPL=GETPTR(128*2*256*4,31) ' LUT CVT ATTR/PIX(16BIT) TO 8X AS 4BPP, TO CATCH FLASHES NOT HANG INCREASE BY TWO 
PBIG=GETPTR(128*2*512*4,31) ' LUT CVT ATTR+3*3PIX TO RGB32, TO CATCH FLASHES NOT HANG INCREASE BY TWO
PSS=GETPTR(256*192*4+4096,31) ' RENDER SCREEN 256*192*RGBA
TSS=GETPTR(256*192*4+4096,31) ' COPY PATTERN RESULT SCREEN 256*192*RGBA
PPC=GETPTR(256*4,31) ' LUT RGB32 PAPERS
PIC=GETPTR(256*4,31) ' LUT RGB32 INKS
PYTOP=GETPTR(256*4,31) ' LUT CVT Y-POS TO PHY-PIX OFFSET FROM 16384(DEF BY PBASE) 
PYTOA=GETPTR(256*4,31) ' LUT CVT Y-POS TO PHY-ATTR OFFSET FROM 22528(DEF BY ABASE)
PBTOX=GETPTR(6144*4,31) ' LUT CVT OFFSET TO XPOS MAIN SCREEN
PBTOY=GETPTR(6144*4,31) ' LUT CVT OFFSET TO YPOS MAIN SCREEN
PBTOS=GETPTR(6144*4,31) ' LUT CVT OFFSET TO PHY OFFSET PIX
PBTOT=GETPTR(6144*4,31) ' LUT CVT OFFSET TO PHY OFFSET ATTR
PPAL=GETPTR(128*2*256*8*4,31) ' LUT CVT ATTR/PIX(16BIT) TO 8X AS RGB32, TO CATCH FLASHES NOT HANG INCREASE BY TWO
PCVZ=GETPTR(256*192,31) ' BYTEPTR LINERIAZED 256*192 
PBLR=GETPTR(256*192*8,31) ' U64PTR SIGNAL BYTES TO EXTRA BLUR AFTER PATTERN CHECK VIA PCVZ
PNOI=GETPTR(256*192,31) ' BYTEPTR NOISE ADDER
PREV=GETPTR(256,31) ' MIRRORED BYTES
PPAT=GETPTR(512,31) ' BYTEPTR LUT FOR PATTERN SEEK


'- - - - LUT ULA6912 USE BBASE=224, PIX=1/IC(ATTR) PIX=0/PC(ATTR), PTOC(4BPP)=UINT64 RGB
'Sub GEN_01_IC_PC_PTOC Static
Dim As Unsigned Long BBI(8), BRT, CLC, EH, ER, EG, EB:For CLC = 0 To 255
If CLC And 64 Then BRT = 255 - BBASE: EH = 8 Else BRT = 0: EH = 0
If CLC And 1 Then BBI(0) = BBASE + BRT: EB = 1 Else BBI(0) = 0: EB = 0
If CLC And 2 Then BBI(1) = BBASE + BRT: ER = 4 Else BBI(1) = 0: ER = 0
If CLC And 4 Then BBI(2) = BBASE + BRT: EG = 2 Else BBI(2) = 0: EG = 0
If CLC And 8 Then BBI(3) = BBASE + BRT Else BBI(3) = 0
If CLC And 16 Then BBI(4) = BBASE + BRT Else BBI(4) = 0
If CLC And 32 Then BBI(5) = BBASE + BRT Else BBI(5) = 0
*(PPC+CLC)=RGB(BBI(4), BBI(5), BBI(3)):*(PIC+clc)=RGB(BBI(1), BBI(2), BBI(0)):*(PPTOC+EH + ER + EG + EB) = (BBI(1)Shl 32)+(BBI(2) Shl 16)+BBI(0):Next

' - - - - _NEWIMAGE/LUT/LUI VIA IC/PC PSET TO PAL(128*8/256),PACK 8PIX AS 4BPP TO QPL(ATTR(0..127)*PIX(0..255))=UINT32
'Sub GEN_02_PAL_QPL () Static
Dim As Unsigned Long TI, PPL, DDT, INKC, PAPC, SHC, CURC, PG, PB, PR, RES,DX,MSK:Dim As Unsigned Long Ptr LP
Dim As ULongINT Ptr WU1:Dim As ULongINT WF' GOT HERE PPTOL FILL VIA DDT AND BIT SCAN
Dim As Unsigned Byte Ptr WR
Dim As Unsigned Byte MIR
LP=PPAL:TI = 0:WU1=PPTOL:WR=PREV
For PPL = 0 To 1023 Step 8:
For DDT = 0 To 255:
INKC = *(PIC +(PPL SHR 3)): PAPC = *(PPC+(PPL SHR 3)):SHC=0:MSK=1:WF=0:MIR=0
For DX=0 To 7 :
WF SHL= 8:MIR Shl= 1
If DDT And MSK Then CURC = INKC:*(LP+7-DX)=INKC:*(LP+7-DX+262144)=PAPC:WF+=255:MIR+=1 Else CURC = PAPC:*(LP+7-DX)=PAPC:*(LP+7-DX+262144)=INKC:
MSK*=2:PR = CURC Shr 16 And 255: PG = CURC Shr 8 And 255: PB = CURC And 255
If PR = 0 Then RES = 0 Else If PR = 255 Then RES = 12 Else RES = 4
If PG = 0 Then Else If PG = 255 Then RES = RES Or 10 Else RES = RES Or 2
If PB = 0 Then Else If PB = 255 Then RES = RES Or 9 Else RES = RES Or 1
SHC = (SHC Shr 4):SHC = SHC Or (RES SHL 28):
Next:
'Print DDT;" ";MIR;", ";
'*(WR+DDT)=MIR:
*(WR+DDT)=DDT:
*(PQPL+TI) = SHC:
*(WU1+DDT)=WF
LP+=8:TI+=1:Next:

 Next

'- - - - LUT OFFSET X,Y AND PAL X,Y BTOX/Y/S/T(0..6143)=UINT32, ALSO CONVERT Y YTOP/A(0..191)=UINT32(0..65535) FOR PIX AND ATTR
'Sub GEN_03_BTO_YTO () Static
Dim As Unsigned Long TERT, TVER, VER, TMPY, TMPA, YCNT, HOR, ADX
ADX = 0: For TERT = 0 To 2: For TVER = 0 To 7: For VER = 0 To 7
TMPY = PBASE + TERT * 2048 + TVER * 32 + VER * 256: TMPA = ABASE + TERT * 256 + TVER * 32:*(PYTOP+YCNT) = TMPY: *(PYTOA+YCNT) = TMPA:YCNT = YCNT + 1
For HOR = 0 To 31:*(PBTOS+ADX) = TMPY + HOR:*(PBTOT+ADX) = TMPA + HOR:*(PBTOX+ADX) = HOR * 8:*(PBTOY+ADX) = TERT * 64 + TVER * 8 + VER: ADX = ADX + 1
Next: Next: Next: Next
' - - - - LUT 4BPP*4 TO COLOUR SUMM/DIVD PQM(0..65535)=UINT64 RGB
'Sub GEN_04_PQM () Static
Dim As Unsigned Long C1, C2, C3, C4 :Dim As ULongInt QMX
TI = 0: For C1 = 0 To 15: For C2 = 0 To 15: For C3 = 0 To 15: For C4 = 0 To 15
QMX = *(PPTOC+C4) + *(PPTOC+C3) + *(PPTOC+C2) + *(PPTOC+C1):ER = QMX SHR 32 And 65535: EG = QMX SHR 16 And 65535: EB = QMX And 65535
ER = ER / DIVD: EG = EG / DIVD: EB = EB / DIVD: 
QMX = ER SHL 32 Or EG SHL 16 Or EB: *(PPQM+TI) = QMX: TI = TI + 1:Next: Next: Next: Next
'- - - - LUT VIA DIVS FOR LUMINOSITY CLIM(0..4095)=UINT16, USED BY _RGB SUBSTITUTION FOR SPEED
'Sub GEN_05_CLIM Static
Dim As UShort UC1,UC2:Dim As UShort Ptr XLP,YLP,MLP
XLP=PCLIM:YLP=PPLIM:MLP=PMLIM:For UC1 = 0 To 16383: 
UC2=UC1/DIVS:If UC2 < 256 Then *(XLP) = UC2 Else *(XLP) = 255
UC2=UC1/DIVF:If UC2 < 256 Then *(YLP) = UC2 Else *(YLP) = 255
UC2=UC1/DIVM:If UC2 < 256 Then *(MLP) = UC2 Else *(MLP) = 255
XLP+=1:YLP+=1:MLP+=1:Next
' - - - LUT FOR BLUR VIA IC/PC,DIVD/S,CLIM FOR 3*3 PIX RGB32, BIG(128*(3BPP*3BPP*3BPP=512))=UINT32
'Sub GEN_06_BIG () Static
Dim As Unsigned Long IBG, GA, GP, TR1, TR2, TR3, TG1, TG2, TG3, TB1, TB2, TB3
IBG = 0: For GA = 0 To 127: For GP = 0 To 511:If GP And 16 Then C1 = 1 Else C1 = 0
C2 = (GP And 1) + ((GP Shr 1) And 1) + ((GP SHR 2) And 1) + ((GP SHR 3) And 1) + ((GP SHR 5) And 1) + ((GP SHR 6) And 1) + ((GP SHR 7) And 1) + ((GP SHR 8) And 1)
TR1 = (((*(PPC+GA) Shr 16)) And 255): TG1 = ((*(PPC+GA) Shr 8) And 255): TB1 = *(PPC+GA) And 255
TR2 = (((*(PIC+GA) Shr 16)) And 255): TG2 = ((*(PIC+GA) Shr 8) And 255): TB2 = *(PIC+GA) And 255
TR3 = TR1 * (8 - C2): TG3 = TG1 * (8 - C2): TB3 = TB1 * (8 - C2)
TR3 = TR3 + (TR2 * C2): TG3 = TG3 + (TG2 * C2): TB3 = TB3 + (TB2 * C2)
TR3 = TR3 / DIVD: TG3 = TG3 / DIVD: TB3 = TB3 / DIVD
If C1 Then TR3 = TR3 + TR2:TG3 = TG3 + TG2:TB3 = TB3 + TB2 Else TR3 = TR3 + TR1:TG3 = TG3 + TG1:TB3 = TB3 + TB1
TR3 = *(PCLIM+TR3): TG3 = *(PCLIM+TG3): TB3 = *(PCLIM+TB3):*(PBIG+IBG) = (TR3 Shl 16) + (TG3  Shl 8) + TB3: IBG+=1:Next: Next
' - - - - GENERATE PERPIXEL FX SIGNALING FOR BLURMOD
'Sub GEN_07_SPP () STATIC
Dim As Long SQ1,SQ2,SQ3,SQ4,SQ5:SQ5=0:For SQ1=0 TO 255 STEP 8:For SQ2=0 TO 191 STEP 8:*(PSPP+SQ2*256)=2:*(PSPP+SQ2*256+256*7)=2
For SQ3=1 TO 6:For SQ4=1 TO 6:*(PSPP+SQ1+SQ2*256+SQ3+SQ4*256)=1:Next:Next:If (SQ5 And 1)=0 Then *(PSPP+SQ1+SQ2*256+256+1)=3
Next:SQ5+=1:Next



' - - - DIRECT CODE HERE
' - - NOISE FILL 
For W2=0 To 49151:W1=Rnd*24:*(PNOI+W2)=W1:*(PBLR+W2)=PCLIM:Next
' - - PATTERN HIGHLIGHT SELECTOR
For W2=0 To 511:W1=Rnd*2:
W3=0
'If (W2 And &B010110010)=&B010100010 Then W3=2
'If (W2 And &B010011010)=&B010001010 Then W3=2
'If (W2 And &B000111010)=&B000101010 Then W3=2
'If (W2 And &B010111000)=&B010101000 Then W3=2

If W2=&B001100110 Then W3=2
If W2=&B100001011 Then W3=2
If W2=&B011001100 Then W3=2
If W2=&B110100001 Then W3=2

If W2=&B010101010 Then W3=2

If W2=&B110101010 Then W3=2
If W2=&B010101110 Then W3=2
If W2=&B010101011 Then W3=2
If W2=&B011101010 Then W3=2

If W2=&B111101010 Then W3=2
If W2=&B110101110 Then W3=2
If W2=&B010101111 Then W3=2
If W2=&B011101011 Then W3=2

'If W2=&B Then W3=2
'If W2=&B Then W3=2
'If W2=&B Then W3=2
'If W2=&B Then W3=2

If W2=&B010100100 Then W3=2
If W2=&B000100011 Then W3=2
If W2=&B001001010 Then W3=2
If W2=&B110001000 Then W3=2

If W2=&B001001100 Then W3=2
If W2=&B110000001 Then W3=2
If W2=&B001100100 Then W3=2
If W2=&B100000011 Then W3=2

If W2=&B001100001 Then W3=2
If W2=&B101000010 Then W3=2
If W2=&B100001100 Then W3=2
If W2=&B010000101 Then W3=2

If W2=&B010100001 Then W3=2
If W2=&B001100010 Then W3=2
If W2=&B100001010 Then W3=2
If W2=&B010001100 Then W3=2

If W2=&B001100000 Then W3=2
If W2=&B100000010 Then W3=2
If W2=&B000001100 Then W3=2
If W2=&B010000001 Then W3=2

If W2=&B011100000 Then W3=2
If W2=&B100100010 Then W3=2
If W2=&B000001110 Then W3=2
If W2=&B010001001 Then W3=2

If W2=&B000001010 Then W3=2
If W2=&B010001000 Then W3=2
If W2=&B010100000 Then W3=2
If W2=&B000100010 Then W3=2

If W2=&B000101000 Then W3=2
If W2=&B010000010 Then W3=2
If W2=&B000101000 Then W3=2
If W2=&B010000010 Then W3=2

If W2=&B000100000 Then W3=2
If W2=&B000000010 Then W3=2
If W2=&B000001000 Then W3=2
If W2=&B010000000 Then W3=2

If W2=&B100100111 Then W3=2 ' BOULDER DASH TRY
If W2=&B001001111 Then W3=2
If W2=&B111001001 Then W3=2
If W2=&B111100100 Then W3=2

If W2=&B101101101 Then W3=1 ' LINE LOWER DIVF
If W2=&B101100101 Then W3=1
If W2=&B101001101 Then W3=1
If W2=&B111000111 Then W3=1
If W2=&B101000111 Then W3=1
If W2=&B111000101 Then W3=1
If W2=&B111101111 Then W3=1
*(PPAT+W2)=W3:
Next



End Sub
'- - - - - - - - - -
'- - - - ' VIA P/ABASE CONVERT 6912 TO UINT64/16*4BPP TO QPX, SHIFTED R/DW 1 PIX, SCREEN(18*16,192+4)
Sub SCRPACK () Static
Dim As Unsigned Long TI, C1, C2, TERT, VLY, VLA, VLX:Dim As ULongInt v1,v2,v3,v4,v5,v6:Dim As ULongInt Ptr q1,q2,q3,q4:Dim As ULong Ptr T1,T2,T3,T4
C1 = PBASE: C2 = ABASE :V2=0:Q3=PQPX+18:  For TERT = 0 To 2: For VLY = 0 To 7: For VLA = 0 To 7: For VLX = 0 To 31 Step 8:q1=PMEM+C1:V3=*Q1:Q2=PMEM+C2:V4=*Q2
T1=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8:T2=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8:V1 = ((*T1) SHL 32) + (*T2):*Q3 = V2 + (V1 Shr 4): V2 = (V1 Shl 60):Q3+=1
T1=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8:T2=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8:V1 = ((*T1) SHL 32) + (*T2):*Q3 = V2 + (V1 Shr 4): V2 = (V1 Shl 60):Q3+=1
T1=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8:T2=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8:V1 = ((*T1) SHL 32) + (*T2):*Q3 = V2 + (V1 Shr 4): V2 = (V1 Shl 60):Q3+=1
T1=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8:T2=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V1 = ((*T1) SHL 32) + (*T2):*Q3 = V2 + (V1 Shr 4): V2 = (V1 Shl 60):Q3+=1
C1 = C1 + 8: C2 = C2 + 8:  Next: *Q3 = V2: V2 = 0: Q3+=2: C2 = C2 - 32: C1 = C1 + 224:Next: C2 = C2 + 32: C1 = C1 - 2016:Next: C1 = C1 +1792:Next
End Sub
'- - - - - - - -

' - - - SCALED SCRSHOW TEMP SUB
Sub SCRSHOW () Static
Dim As ULongInt SF1,SF2:Dim As ULongInt Ptr SU1,SU2:Dim As ULong Ptr SP1,SP2:Dim As ULong SQ1,SQ2
PSet (0,0):PSet(1023,767)
For SQ1=0 To 6143:SP1=PPAL+(*(PMEM+(*(PBTOT+SQ1))) And 255)*256*8+(*(PMEM+*(PBTOS+SQ1)) And 255)*8:SP2=ScreenPtr()+*(PBTOX+SQ1)*16+(*(PBTOY+SQ1)*16384)
For SQ2=0 To 7:SU1=SP2+SQ2*4:SF1=*(SP1+SQ2):SF1+=(SF1 Shl 32):*SU1=SF1:*(SU1+1)=SF1:*(SU1+512)=SF1:*(SU1+513)=SF1:*(SU1+1024)=SF1:*(SU1+1025)=SF1:
*(SU1+1536)=SF1:*(SU1+1537)=SF1:Next:Next:End SUb
'- - - - - - 
' - - - TEMP  SCRSHOW TEMP SUB
Sub SCRSHOW2 () Static
Dim As ULongInt SF1,SF2:Dim As ULongInt Ptr SU1,SU2:Dim As ULong Ptr SP1,SP2:Dim As ULong SQ1,SQ2
PSet (0,0):PSet(TSCRX-1,TSCRY-1)
For SQ1=0 To 6143:SP1=PPAL+(*(PMEM+*(PBTOT+SQ1)) And 255)*256*8+(*(PMEM+*(PBTOS+SQ1)) And 255)*8:SP2=ScreenPtr()+*(PBTOX+SQ1)*8+(*(PBTOY+SQ1)*17408)
For SQ2=0 To 7:
SU1=SP2+SQ2*2:SF1=*(SP1+SQ2):SF1+=(SF1 Shl 32):

*SU1=SF1':*(SU1+1)=SF1:
*(SU1+1088)=SF1':*(SU1+1201)=SF1':*(SU1+2400)=SF1:*(SU1+2401)=SF1:*(SU1+3600)=SF1:*(SU1+3601)=SF1:

Next:Next:
'PSet (0,0):PSet(1023,767)
End SUb
'- - - - - - 
' - - - GOOD SCALER DIRECT TO PTR
Sub SCALE (P3 As ULongInt Ptr) Static 
Dim As ULongInt X,Y:Dim As ULong Ptr p1:Dim As ULongInt w1:Dim As ULongInt Ptr p2 
p1=PSS+8:ScreenLock():For y =0 To 191:p2=P3+(y*2048):For x=0 To 255:w1=*p1 Or(*p1 Shl 32):p1+=1:*p2=w1:p2+=1:*p2=w1:
p2+=511:*p2=w1:p2+=1:*p2=w1:p2+=511:*p2=w1:p2+=1:*p2=w1:p2+=511:*p2=w1:p2+=1:*p2=w1:p2-=511*3+2:Next:Next:ScreenUnLock():End Sub
' - - - - - - - - - -
' - - - - BLUR IMAGE, GOOD OPTIMIZED 5580 FPS, VIA SCRPACK/PQM/CLIM/PTOC
Sub SCRBLUR () Static 
Dim As Unsigned Long TI, RY, VLX, C2, HOR,XHOR:Dim As Unsigned Long Ptr Q1:Dim As ULongInt Ptr Q2,Q3:Dim As ULongInt V1,V2,V3,V4,V5,V6,V7
SCRPACK:Q2=PQPX:For RY = 0 To 191:V1 = *Q2: V4 = *(Q2+1): V2 = *(Q2+18): V5 = *(Q2+19): V3 = *(Q2+36): V6 = *(Q2+37):VLX = 16:Q1=PSS+(7+RY * 256):Q3=Q2+2:For HOR = 1 To 256 Step 2
V7 = *(PPQM+((V1 Shr 48) And 65520 Or (V2 Shr 60)))+ *(PPQM+((V3 Shr 48) And 65520 Or ((V2 Shr 52) And 15)))+ *(PPTOC+((V2 Shr 56) And 15))
Q1+=1:*Q1 = (*(PCLIM+((V7 Shr 32) And 65535))Shl 16) + (*(PCLIM+((V7 Shr 16) And 65535))Shl 8) + *(PCLIM+(V7 And 65535))
V1 = (V1 Shl 4) Or (V4 Shr 60):V4 = (V4 Shl 4):V2 = (V2 Shl 4) + (V5 Shr 60):V5 = (V5 Shl 4):V3 = (V3 Shl 4) + (V6 Shr 60):V6 = (V6 Shl 4) 
V7 = *(PPQM+((V1 Shr 48) And 65520 Or (V2 Shr 60)))+ *(PPQM+((V3 Shr 48) And 65520 Or ((V2 Shr 52) And 15)))+ *(PPTOC+((V2 Shr 56) And 15))
Q1+=1:*Q1 = (*(PCLIM+((V7 Shr 32) And 65535))Shl 16) + (*(PCLIM+((V7 Shr 16) And 65535))Shl 8) + *(PCLIM+(V7 And 65535))
V1 = (V1 Shl 4) Or (V4 Shr 60):V4 = (V4 Shl 4):V2 = (V2 Shl 4) + (V5 Shr 60):V5 = (V5 Shl 4):V3 = (V3 Shl 4) + (V6 Shr 60):V6 = (V6 Shl 4):VLX = VLX - 2
If VLX = 0 Then V4 = *(Q3): V5 = *(Q3+18): V6 = *(Q3+36):Q3+=1:VLX = 16
Next:Q2+=18:Next:End Sub
' - - - - - - - - - -
' - - - - MORE OPTIMIZED VS SCRBLUR, 7273 FPS, VIA SCRPACK AND BIG/QPL/QPX/MEM/SPP, WITH 6*6 DIRECT LUT PIXELS PART
Sub SCRBLURMOD () Static 
Dim As ULongINT Ptr Q1,Q2:Dim As ULongInt X1,X2,X3,X4,X5:Dim As Unsigned Long RX,RY,TY,VLX,VLA,HOR,C5,D1,D4,D8,C6,VX:Dim As Unsigned Long PTR P1,R1,R2,BG1,BG2
Dim As Unsigned Byte Ptr SC,PM1,PM4,P2:Dim As ULongInt V1,V2,V3,V4,V5,V6,V7
SCRPACK:C5=1:C6=0:SC=PSPP:Q1=PQPX:For RY = 0 To 191:V1 = *Q1: V4 = *(Q1+1): V2 = *(Q1+18): V5 = *(Q1+19): V3 = *(Q1+36): V6 = *(Q1+37):VLX = 16: Q2=Q1+2:P1=PSS+(7 + RY * 256)
    If *SC=2 Then
    SC+=256:For HOR = 1 To 256 Step 2
      V7 = *(PPQM+(((V1 Shr 48) And 65520) + (V2 Shr 60)))+ *(PPQM+(((V3 Shr 48) And 65520) + ((V2 Shr 52) And 15)))+ *(PPTOC+((V2 Shr 56) And 15))
      P1+=1:*P1= (*(PCLIM+((V7 Shr 32) And 65535))Shl 16) + (*(PCLIM+((V7 Shr 16) And &hFFFF))Shl 8) + *(PCLIM+(V7 And &hFFFF))
      V1 = (V1 Shl 4) + (V4 Shr 60):V4 = (V4 Shl 4): V2 = (V2 Shl 4) + (V5 Shr 60):V5 = (V5 Shl 4): V3 = (V3 Shl 4) + (V6 Shr 60): V6 = (V6 Shl 4)
      V7 = *(PPQM+(((V1 Shr 48) And 65520) + (V2 Shr 60)))+ *(PPQM+(((V3 Shr 48) And 65520) + ((V2 Shr 52) And 15)))+ *(PPTOC+((V2 Shr 56) And 15))
      P1+=1:*P1= (*(PCLIM+((V7 Shr 32) And 65535))Shl 16) + (*(PCLIM+((V7 Shr 16) And &hFFFF))Shl 8) + *(PCLIM+(V7 And &hFFFF))
      V1 = (V1 Shl 4) + (V4 Shr 60): V2 = (V2 Shl 4) + (V5 Shr 60): V3 = (V3 Shl 4) + (V6 Shr 60): VLX = VLX - 2
      If VLX = 0 Then V4 = *(Q2): V5 = *(Q2+18): V6 = *(Q2+36):Q2+=1:VLX = 16 Else V4 = (V4 Shl 4): V5 = (V5 Shl 4): V6 = (V6 Shl 4)
    Next
    Else 
    For HOR = 1 To 256
      If *SC>0 Then
      If *SC=3 Then  
      RX=HOR Shr 3:TY=RY-1:D1=*(PYTOP+TY)+RX:D4=D1+1:PM1=PMEM+D1:PM4=PM1+1:p2=PMEM + *(PYTOA+TY)+ RX:D8=(RX Shl 3)+8:BG1=PBIG+((*p2) Shl 9):BG2=PBIG+((*(p2+1)) Shl 9) 
      X4 = (*PM1 Shl 56) + (*(PM1 + 256)Shl 48) + (*(PM1 + 512)Shl 40) + (*(PM1 + 768)Shl 32) + (*(PM1 + 1024)Shl 24) + (*(PM1 + 1280)Shl 16) + (*(PM1 + 1536)Shl 8) + *(PM1 + 1792) ' 7231
      X5 = (*PM4 Shl 56) + (*(PM4 + 256)Shl 48) + (*(PM4 + 512)Shl 40) + (*(PM4 + 768)Shl 32) + (*(PM4 + 1024)Shl 24) + (*(PM4 + 1280)Shl 16) + (*(PM4 + 1536)Shl 8) + *(PM4 + 1792): ' 7146
      For VLA = 0 To 5:R1=PSS+((RY+VLA)*256+D8):For VX=0 To 2
          R1+=1:*R1 = *(BG1+((X4 Shr 61) + ((X4 Shr 50) And 56) + ((X4 Shr 39) And 448))):X4 Shl= 1:*(R1+8) = *(BG2+((X5 Shr 61) + ((X5 Shr 50) And 56) + ((X5 Shr 39) And 448))):X5 Shl= 1
          R1+=1:*R1 = *(BG1+((X4 Shr 61) + ((X4 Shr 50) And 56) + ((X4 Shr 39) And 448))):X4 Shl= 1:*(R1+8) = *(BG2+((X5 Shr 61) + ((X5 Shr 50) And 56) + ((X5 Shr 39) And 448))):X5 Shl= 1
          Next:X4 = (X4 Shl 2): X5 = (X5 Shl 2):Next
       Else
       EndIf
      P1+=6:SC+=6:VLX-=6:HOR+=5:V1 = (V1 Shl 24) + (V4 Shr 40):V4 Shl= 24:V2 = (V2 Shl 24) + (V5 Shr 40):V5 Shl= 24:V3 = (V3 Shl 24) + (V6 Shr 40):V6 Shl= 24
      Else
      V7 = *(PPQM+(((V1 Shr 48) And 65520) + (V2 Shr 60))) + *(PPQM+(((V3 Shr 48) And 65520) + ((V2 Shr 52) And 15))) + *(PPTOC+((V2 Shr 56) And 15)) 
      P1+=1:*P1= (*(PCLIM+((V7 Shr 32) And 65535))Shl 16) + (*(PCLIM+((V7 Shr 16) And &hFFFF))Shl 8) + *(PCLIM +(V7 And &hFFFF))
      V1 = (V1 Shl 4) + (V4 Shr 60):V4 Shl= 4:V2 = (V2 Shl 4) + (V5 Shr 60):V5 Shl= 4:V3 = (V3 Shl 4) + (V6 Shr 60):V6 Shl= 4:SC+=1: VLX-=1
      END If
      If VLX = 0 Then V4 = *(Q2): V5 = *(Q2+18): V6 = *(Q2+36):Q2+=1:VLX = 16
    Next
    End If
    Q1+=18:Next:End Sub
' - - - - - - - - - -
' - - - - SUPER 5*5 LUMIFY IMAGE AND PATTERNS, GOOD OPTIMIZED 3761 VS MOD/5580 FPS, VIA SCRPACK/PQM/CLIM/PTOC
Sub SCRBLURMAX () Static 
Dim As Unsigned Long TI, RY, VLX, HOR,XHOR,SL,SR,SU,SD,SM,SLU,SRU,SDL,SDR,SMM,SF,SA,SB,SC:
Dim As Unsigned Long Ptr Q1:
Dim As Unsigned BYTE Ptr SB1,SB2,SB3
Dim As Unsigned Byte BT
Dim As UShort WSA,WSF
Dim As UShort Ptr PSEL
Dim As ULongInt Ptr UB1,UB2,Q2,Q3,QTOL,QCVZ,QBLR:
Dim As ULongInt UF,V1,V2,V3,V4,V5,V6,V7,V8,V9,V0,E1,E2,E3,E4,M,MF,ME,MF0,MF00,MF000,MFFF0,MFF,M0,TT
Dim As Unsigned Long  C1, C2, TERT, VLY, VLA,MS:Dim As ULongInt Ptr Sq1,Sq2,Sq3,Sq4:Dim As ULong Ptr T1,T2,T3,T4
QTOL=PPTOL:QCVZ=PCVZ:QBLR=PBLR
:MFF=&HFF:M0=0
C1 = PBASE: C2 = ABASE :V2=0:SQ3=PQPX+36:SB1=PREV' GOT BYTE MIRROR  
For TERT = 0 To 2: 
For VLY = 0 To 7: 
For VLA = 0 To 7: 
For VLX = 0 To 31 Step 8:
Sq1=PMEM+C1:V3=*SQ1:V5=V3:SQ2=PMEM+C2:V4=*SQ2 ' HERE SCRPACK XY++1
T1=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8:T2=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8:V1 = ((*T1) SHL 32) + (*T2):*SQ3 = V2 + (V1 Shr 8): V2 = (V1 Shl 56):SQ3+=1
T1=PQPL+(((V4 And 255) Shl 8)+(V3 And 255))::V3 Shr=8:V4 Shr=8:T2=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8:V1 = ((*T1) SHL 32) + (*T2):*SQ3 = V2 + (V1 Shr 8): V2 = (V1 Shl 56):SQ3+=1
T1=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8:T2=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8:V1 = ((*T1) SHL 32) + (*T2):*SQ3 = V2 + (V1 Shr 8): V2 = (V1 Shl 56):SQ3+=1
T1=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8:T2=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):::::::::::::::::::V1 = ((*T1) SHL 32) + (*T2):*SQ3 = V2 + (V1 Shr 8): V2 = (V1 Shl 56):SQ3+=1
'*(QBLR)=M0:QBLR+=1:*(QBLR)=M0:QBLR+=1:*(QBLR)=M0:QBLR+=1:*(QBLR)=M0:QBLR+=1:*(QBLR)=M0:QBLR+=1:*(QBLR)=M0:QBLR+=1:*(QBLR)=M0:QBLR+=1:*(QBLR)=M0:QBLR+=1 ' CLEAN PBLR

BT=*(SB1+(V5 And MFF)):TT=BT:TT Shl= 8:V5 Shr= 8:BT=*(SB1+(V5 And MFF)):TT+=BT:TT Shl= 8:V5 Shr= 8:BT=*(SB1+(V5 And MFF)):TT+=BT:TT Shl= 8:V5 Shr= 8:BT=*(SB1+(V5 And MFF)):TT+=BT:TT Shl= 8:V5 Shr= 8:
BT=*(SB1+(V5 And MFF)):TT+=BT:TT Shl= 8:V5 Shr= 8:BT=*(SB1+(V5 And MFF)):TT+=BT:TT Shl= 8:V5 Shr= 8:BT=*(SB1+(V5 And MFF)):TT+=BT:TT Shl= 8:V5 Shr= 8:BT=*(SB1+(V5 And MFF)):TT+=BT
*(QCVZ)=TT:QCVZ+=1' JUST COPY ZX SCREEN WITH MIRRORED BYTES
C1 = C1 + 8: C2 = C2 + 8:  Next: *SQ3 = V2: V2 = 0: SQ3+=2: C2 = C2 - 32: C1 = C1 + 224:Next: C2 = C2 + 32: C1 = C1 - 2016:Next: C1 = C1 +1792:Next' DONE SCRPACK
' HERE GO TRI-PIX PATTERN CATCH TO PBLR SIGNALS, CHANGE CLIM TO PLIM, HIGLIGHT PIX
If PATF Then 
SB1=PCVZ
UB2=PBLR+257
Q2=PCVZ:
For VLY=0 To 189:' NOW 2445
V1=*(Q2):V4=*(Q2+1):V2=*(Q2+4):V5=*(Q2+5):V3=*(Q2+8):V6=*(Q2+9):VLA=64 
For VLX=0 To 255
UF=*(PPAT+((V1 Shr  55) AND &B111000000)+((V2 SHR 58) And &B111000)+((V3 Shr 61)And &B111)) ' GET LUTTED DECISION
If UF=0 Then TT=PCLIM
If UF=1 Then TT=PPLIM
If UF=2 Then TT=PMLIM
*UB2=TT:UB2+=1
V1=(V1 ShL 1)+(V4 ShR 63):V4 ShL= 1:V2=(V2 ShL 1)+(V5 ShR 63):V5 ShL= 1:V3=(V3 ShL 1)+(V6 ShR 63):V6 ShL= 1:VLA-=1:
If VLA=0 Then VLA=64:V4=*(Q2+2):V5=*(Q2+6):V6=*(Q2+10):Q2+=1   
Next
Next
Else
EndIf
Q2=PQPX:M=&HFFFF:MF=&HF:ME=&HFFFEFFFEFFFE:MF0=&HF0:MF00=&HF00:MF000=&HF000:MFFF0=&HFFF0:UB1=PBLR:SB3=PNOI
For RY = 0 To 191' - - NOW 5*5 BLUR
E1 = *(Q2): E3 = *(Q2+1):V1 = *(Q2+18): V4 = *(Q2+19):V2 = *(Q2+36): V5 = *(Q2+37):V3 = *(Q2+54): V6 = *(Q2+55):E2 = *(Q2+72): E4 = *(Q2+73):' 5 CACHE LINES OF 64B L2
VLX = 16:Q1=PSS+(7+RY * 256):Q3=Q2+2:
For HOR = 1 To 256 Step 4  
V7=*(PPQM+((E1 Shr 48) And M))+*(PPQM+((E2 Shr 48) And M))+*(PPQM+((V1 Shr 48)And MF000)+((V1 Shr 36)And MF00)+((V2 Shr 56)And MF0)+((V2 Shr 44)And MF))
V8=*(PPQM+((E1 Shr 44) And M))+*(PPQM+((E2 Shr 44) And M))+*(PPQM+((V1 Shr 44)And MF000)+((V1 Shr 32)And MF00)+((V2 Shr 52)And MF0)+((V2 Shr 40)And MF))
V9=*(PPQM+((E1 Shr 40) And M))+*(PPQM+((E2 Shr 40) And M))+*(PPQM+((V1 Shr 40)And MF000)+((V1 Shr 28)And MF00)+((V2 Shr 48)And MF0)+((V2 Shr 36)And MF))
V0=*(PPQM+((E1 Shr 36) And M))+*(PPQM+((E2 Shr 36) And M))+*(PPQM+((V1 Shr 36)And MF000)+((V1 Shr 24)And MF00)+((V2 Shr 44)And MF0)+((V2 Shr 32)And MF))
V7+=*(PPQM+((E1 Shr 32)And MF000)+((V3 Shr 52)And MF00)+((V3 Shr 40)And MF0)+((E2 Shr 44)And MF))
V8+=*(PPQM+((E1 Shr 28)And MF000)+((V3 Shr 48)And MF00)+((V3 Shr 36)And MF0)+((E2 Shr 40)And MF))
V9+=*(PPQM+((E1 Shr 24)And MF000)+((V3 Shr 44)And MF00)+((V3 Shr 32)And MF0)+((E2 Shr 36)And MF))
V0+=*(PPQM+((E1 Shr 20)And MF000)+((V3 Shr 40)And MF00)+((V3 Shr 28)And MF0)+((E2 Shr 32)And MF))
V7=((V7 And ME) Shr 1)+*(PPQM+(((V1 Shr 44) And MFFF0) + ((V2 Shr 56)And MF)))+ *(PPQM+(((V3 Shr 44) And MFFF0) + ((V2 Shr 48) And MF)))
V8=((V8 And ME) Shr 1)+*(PPQM+(((V1 Shr 40) And MFFF0) + ((V2 Shr 52)And MF)))+ *(PPQM+(((V3 Shr 40) And MFFF0) + ((V2 Shr 44) And MF)))
V9=((V9 And ME) Shr 1)+*(PPQM+(((V1 Shr 36) And MFFF0) + ((V2 Shr 48)And MF)))+ *(PPQM+(((V3 Shr 36) And MFFF0) + ((V2 Shr 40) And MF)))
V0=((V0 And ME) Shr 1)+*(PPQM+(((V1 Shr 32) And MFFF0) + ((V2 Shr 44)And MF)))+ *(PPQM+(((V3 Shr 32) And MFFF0) + ((V2 Shr 36) And MF)))
V7+=*(PPTOC+((V2 Shr 52) And MF)):V8+=*(PPTOC+((V2 Shr 48) And MF)):V9+=*(PPTOC+((V2 Shr 44) And MF)):V0+=*(PPTOC+((V2 Shr 40) And MF))

PSEL=*UB1
'PSEL=*UB1'MS=*SB1:
'If MS=0 Then PSEL=PCLIM
'If MS=1 Then PSEL=PPLIM
'If MS=2 Then PSEL=PMLIM 
'TT=*SB3:SB3+=1:'PSEL+=TT
UB1+=1:
SA=(*(PSEL+((V7 Shr 32) And M))Shl 16) + (*(PSEL+((V7 Shr 16) And M))Shl 8) + *(PSEL+(V7 And M))
PSEL=*UB1'MS=*SB1:
'If MS=0 Then PSEL=PCLIM
'If MS=1 Then PSEL=PPLIM
'If MS=2 Then PSEL=PMLIM 
'TT=*SB3:SB3+=1:'PSEL+=TT
UB1+=1:
SB=(*(PSEL+((V8 Shr 32) And M))Shl 16) + (*(PSEL+((V8 Shr 16) And M))Shl 8) + *(PSEL+(V8 And M))
PSEL=*UB1'MS=*SB1:
'If MS=0 Then PSEL=PCLIM
'If MS=1 Then PSEL=PPLIM
'If MS=2 Then PSEL=PMLIM 
'TT=*SB3:SB3+=1:'PSEL+=TT
UB1+=1:
SC=(*(PSEL+((V9 Shr 32) And M))Shl 16) + (*(PSEL+((V9 Shr 16) And M))Shl 8) + *(PSEL+(V9 And M))
PSEL=*UB1'MS=*SB1:
'If MS=0 Then PSEL=PCLIM
'If MS=1 Then PSEL=PPLIM
'If MS=2 Then PSEL=PMLIM 
'TT=*SB3:SB3+=1:PSEL+=TT
UB1+=1:
SD=(*(PSEL+((V0 Shr 32) And M))Shl 16) + (*(PSEL+((V0 Shr 16) And M))Shl 8) + *(PSEL+(V0 And M))

Q1+=1:*Q1 = SA:Q1+=1:*Q1 = SB:Q1+=1:*Q1 = SC:Q1+=1:*Q1 = SD

E1 = (E1 Shl 16) + (E3 Shr 48):E3 = (E3 Shl 16):V1 = (V1 Shl 16) + (V4 Shr 48):V4 = (V4 Shl 16):V2 = (V2 Shl 16) + (V5 Shr 48):V5 = (V5 Shl 16):V3 = (V3 Shl 16) + (V6 Shr 48):V6 = (V6 Shl 16):E2 = (E2 Shl 16) + (E4 Shr 48):E4 = (E4 Shl 16):
VLX = VLX - 4:If VLX = 0 Then VLX = 16:E3 = *(Q3):V4 = *(Q3+18): V5 = *(Q3+36): V6 = *(Q3+54):E4 = *(Q3+72):Q3+=1
Next:
Q2+=18:
'Print 123
'SLEEP
Next:End Sub
' - - - - - - - - - -
