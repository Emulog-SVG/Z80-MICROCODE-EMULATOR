

'Dim Shared As Const ULong URB=7-0,URC=7-1,URD=7-2,URE=7-3,URH=7-4,URL=7-5,URA=7-7,USH=5,USL=4,UXH=3,UXL=2,UYH=1,UYL=0
Dim Shared As ULong TT1,MT1,MT2,MT3,MT4,REGL,REGR,REG,LALU,HALU,BCNT,ALUL,ALUR,DAAC,DAAH,DAAN,DAAZ,LDAA,HDAA,HLDAA,DAAHI,DAAHR,DAAHM,HDAAC,LDAAO,CORRH,CORRA,OVF,OVR,PEW,RESF
Dim Shared As Unsigned Byte PE

PMEM=GETPTR(MEMMAX,64) ' BYTEPTR MAIN Z80 MEMORY
PMOS=GETPTR(UOPMAX*4,32)			' U32 MICROOP NUMBER SEQUENCES 
PFLAG=GETPTR(256,32)					' BYTEPTR PARITY LUT
PROOT=GETPTR(256*PAGEMAX*8,32) 	' U64PTR ROOT INDEX, CONTAIN PTRS TO PMOS DIRECTLY
'POFFS=GETPTR(256*PAGEMAX*8,32) 	' U64PTR OFFSET TO AFTER-HEADER RUN
PSTAT=GETPTR(256*PAGEMAX*4,32) 	' U32 ISSUE COUNTERS 
PADD=GETPTR(65536*2,32)				' BYTEPTR ADD/ADC FLAGs LUT, LEFT OPERAND IS LOW BYTE, RIGHT OPERAND IS HIGH BYTE AND EXTRA SHL NEEDED 
PSUB=GETPTR(65536*2,32)				' BYTEPTR SUB/SBC FLAGs LUT, LEFT OPERAND IS LOW BYTE, RIGHT OPERAND IS HIGH BYTE AND EXTRA SHL NEEDED
PAND=GETPTR(65536,32)				' BYTEPTR AND FLAGs LUT, L-LOW, R-HIGH, NO EXTRA SHL
PXOR=GETPTR(65536,32)				' BYTEPTR XOR
PPOR=GETPTR(65536,32)				' BYTEPTR OR 
PPCP=GETPTR(65536,32)				' BYTEPTR CP 
PRLC=GETPTR(256*2,32)				' BYTEPTR TWO VALUE RESULT-FLAGS
PRRC=GETPTR(256*2,32)				' BYTEPTR TWO VALUE RESULT-FLAGS
PRL=GETPTR(256*4,32)					' BYTEPTR NC/VAL-C/VAL AND NC/F-C/F QUAD BYTE
PRR=GETPTR(256*4,32)					' BYTEPTR NC/VAL-C/VAL AND NC/F-C/F QUAD BYTE
PSLA=GETPTR(256*2,32)				' BYTEPTR TWO VALUE RESULT-FLAGS
PSRA=GETPTR(256*2,32)				' BYTEPTR TWO VALUE RESULT-FLAGS
PSLL=GETPTR(256*2,32)				' BYTEPTR TWO VALUE RESULT-FLAGS
PSRL=GETPTR(256*2,32)				' BYTEPTR TWO VALUE RESULT-FLAGS
'PDAA=GETPTR(65536*2,32)				' BYTEPTR VAL-FLG TO VAL-FLG 
X.IORD=GETPTR(65536,32)				' BYTEPTR IORQ READS
X.IOWR=GETPTR(65536,32)				' BYTEPTR IORQ WRITES

' SETUP ALTERNATE POINTERS
X.LUT=PADD:X.RLC=PRLC:X.RRC=PRRC:X.RL=PRL:X.RR=PRR:X.SLA=PSLA:X.SRA=PSRA:X.SLL=PSLL:X.SRL=PSRL:'X.DAA=PDAA
PMOSC=PMOS
For F1=0 To (256*PAGEMAX)-1:*(PROOT+F1)=PMOS:Next' SETUP ALL ROOTS WITH NOP OPCODE
For F1=0 To 65535:*(X.IORD+F1)=255:Next ' SET ALL PORTS READ TO &HFF

EPFX(0)=&H00:EPFX(1)=&HDD00:EPFX(2)=&HFD00:EPFX(3)=&HCB00:EPFX(4)=&HED00:EPFX(5)=&HDDCB00:EPFX(6)=&HFDCB00

'X.LUTADD=X.LUT+CADD:
X.LUTSUB=X.LUT+CSUB:
X.LUTAND=X.LUT+CAND:
X.LUTXOR=X.LUT+CXOR:
X.LUTOR =X.LUT+COR :
X.LUTCP =X.LUT+CCP :

X.LEXT=VarPtr(EXTL(0)):X.LTAK=VarPtr(TAKL(0)):

' MAIN AND EXT FLOW INTERLEAVAGE
EXTL(27)=25:EXTL(25)=26:EXTL(26)=1:EXTL(2)=1:EXTL(1)=2:TAKL(2)=1:TAKL(26)=1:TAKL(0)=1:
' EXT TRI AND PAR
EXTL(23)=21:EXTL(21)=19:EXTL(19)=17:EXTL(17)=2:EXTL(15)=19:
' MAIN TRI AND PAR 
EXTL(24)=22:EXTL(22)=20:EXTL(20)=18:EXTL(18)=0:EXTL(16)=20:TAKL(16)=1:TAKL(24)=1:
'+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
'| TAK|    | TAK|    |    |    |    |    |    |    |    |    |    |    |    |    | TAK|    |    |    |    |    |    |    | TAK|    | TAK|    |    |    |    
'+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
'|MAIN| EXT|MAIN|    |    |    |    |    |    |    |    |    |    |    |    |EPAR| PAR|STEP|STEP|STEP|STEP|STEP|STEP|ETRI| TRI| EXT|MAIN| EXT|DONE|XEND|
'+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
'| 0  | 1  | 2  | 3  | 4  | 5  | 6  | 7  | 8  | 9  | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 |
'+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
'| 0  | 2  | 1  |    |    |    |    |    |    |    |    |    |    |    |    | 19 | 20 | 2  | 0  | 17 | 18 | 19 | 20 | 21 | 22 | 26 | 1  | 25 | 0  | 0  |
'+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+


' - - - - - ALL ALU LUTS DONE HERE - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

'- - - - PARITY FLAG PFLAG(0..255)=0/4, 4 IS BIT WEIGHT OF P/V IN F FLAG
Sub PARITY(PPTR As Byte Ptr)Static:Dim As ULong T1,T2,T3,T4:T1=255:Do:T2=T1:T4=0:Do:T4+=(T2 And 1):T2 Shr=1:Loop While T2:*(PPTR+T1)=(((T4 Xor 1) And 1) Shl 2):T1-=1:Loop While T1:*(PPTR)=XFP:End Sub

PARITY(PFLAG) 




For ALUL=0 To 255:For ALUR=0 To 255 ' CYCLE ALL 65536 VARIATIONS

' - - ADD - - ,| 7 6 5 4 3 2 1 0 || S Z Y H X P N C | S=128, Z=64, F5=32, H=16, F3=8, PV=4, N=2, C=1
'PEW=ALUL+ALUR:
'PE=PEW:
'RESF=PE And (XFS53):
'If PE=0 Then RESF+=XFZ Else EndIf:' COPY BIT 7(S),5 AND 3, SET Z, For ADD instructions, N is cleared to 0
'If PEW>255 Then RESF+=XFC ' SET CARRY
'PE=((ALUL And 15)+(ALUR And 15)):If PE>15 Then RESF+=XFH 'HAVE LOW NIBBLE ALU CARRY SO SET H
'S1=ALUL And XFS:S2=ALUR And XFS:S3=PEW And XFS 'GET ALL SIGNS, The Parity/Overflow (P/V) Flag for addition, operands with different signs never cause overflow.
'If (S1=0) And (S2=0) And (S3=XFS) Then RESF+=XFP 'SAME ++SIGNS AND RESULT - SO SET, When operands HAVE SAME signs and ADD results IN a different sign, the Overflow Flag is set
'If (S1=XFS) And (S2=XFS) And (S3=0) Then RESF+=XFP 'SAME --SIGNS AND RESULT + SO SET
'*(PADD+(ALUR Shl 9)+(ALUL Shl 1))=RESF ' LUT DONE

' - - ADC - - CARRY SET VERSION, IS LEFT+RIGHT+1
'PEW=ALUL+ALUR+1:PE=PEW:RESF=PE And (XFS+XF5+XF3):If PE=0 Then RESF+=XFZ
'If PEW>255 Then RESF+=XFC
'PE=((ALUL And 15)+(ALUR And 15))+1:If PE>15 Then RESF+=XFH
'S1=ALUL And XFS:S2=ALUR And XFS:S3=PEW And XFS
'If (S1=0) And (S2=0) And (S3=XFS) Then RESF+=XFP
'If (S1=XFS) And (S2=XFS) And (S3=0) Then RESF+=XFP
'*(PADD+(ALUR Shl 9)+(ALUL Shl 1)+1)=RESF ' LUT DONE

' - - SUB - - , | 7 6 5 4 3 2 1 0 || S Z Y H X P N C | S=128, Z=64, F5=32, H=16, F3=8, PV=4, N=2, C=1
PEW=ALUL-ALUR:PE=PEW:RESF=(PE And (XFS+XF5+XF3))+XFN:If PE=0 Then RESF+=XFZ ' COPY BIT 7(S),5 AND 3, SET Z, For SUB instructions, N is set to 1.
If PEW>255 Then RESF+=XFC ' SET CARRY
PE=((ALUL And 15)-(ALUR And 15)): If PE>15 Then RESF+=XFH 'HAVE LOW NIBBLE ALU CARRY SET,SO SET H, SAME AS ADD
S1=ALUL And XFS:S2=ALUR And XFS:S3=PEW And XFS 'GET ALL SIGNS, The P/V Flag for subtraction, overflow can occur for operands of unalike signs. Operands of alike signs never cause overflow
If (S1=0) And (S2=XFS) And (S3=XFS) Then RESF+=XFP 'SIGNS ARE +- AND RESULT - SET OVF, IF THE RESULT sign has changed from a positive to a negative VS ALU-LEFT , resulting in an incorrect difference; the Overflow Flag is set. 
If (S1=XFS) And (S2=0) And (S3=0) Then RESF+=XFP 'SIGNS ARE -+ AND RESULT + SET OVF
*(PSUB+(ALUR Shl 9)+(ALUL Shl 1))=RESF ' LUT DONE
' - - SBC - - CARRY SET VERSION, IS LEFT-RIGHT-1
PEW=ALUL-ALUR-1:PE=PEW:RESF=(PE And (XFS+XF5+XF3))+XFN:If PE=0 Then RESF+=XFZ
If PEW>255 Then RESF+=XFC
PE=((ALUL And 15)-(ALUR And 15))-1: If PE>15 Then RESF+=XFH
S1=ALUL And XFS:S2=ALUR And XFS:S3=PEW And XFS
If (S1=0) And (S2=XFS) And (S3=XFS) Then RESF+=XFP
If (S1=XFS) And (S2=0) And (S3=0) Then RESF+=XFP
*(PSUB+(ALUR Shl 9)+(ALUL Shl 1)+1)=RESF ' LUT DONE
' - - CP ALUOP - - AS SUB WITH EXTRA QUIRKS  
PEW=ALUL-ALUR:PE=PEW:RESF=(PE And XFS)+(ALUR And (XF5+XF3))+XFN:If PE=0 Then RESF+=XFZ ' COPY BIT 7, SET Z, !!! 5,3 ARE FROM RIGHT OPERAND, AND SET N
If PEW>255 Then RESF+=XFC
PE=((ALUL And 15)-(ALUR And 15)):If PE>15 Then RESF+=XFH
S1=ALUL And XFS:S2=ALUR And XFS:S3=PEW And XFS
If (S1=0) And (S2=XFS) And (S3=XFS) Then RESF+=XFP
If (S1=XFS) And (S2=0) And (S3=0) Then RESF+=XFP
*(PPCP+(ALUR Shl 8)+ALUL)=RESF ' LUT DONE
' - - AND - - AND r SZ513P00, | 7 6 5 4 3 2 1 0 || S Z Y H X P N C | S=128, Z=64, F5=32, H=16, F3=8, PV=4, N=2, C=1
PE=ALUL And ALUR:RESF=(PE And (XFS+XF5+XF3))+XFH+*(PFLAG+PE):If PE=0 Then RESF+=XFZ ' COPY BIT 7,5,3,N=0,C=0,H=1, SET Z, LUT FOR PARITY ADD 4 
*(PAND+(ALUR Shl 8)+ALUL)=RESF ' LUT DONE
' - - XOR - -  OR/XOR r SZ503P00, | 7 6 5 4 3 2 1 0 || S Z Y H X P N C | S=128, Z=64, F5=32, H=16, F3=8, PV=4, N=2, C=1
PE=ALUL Xor ALUR:RESF=(PE And(XFS+XF5+XF3))+*(PFLAG+PE):If PE=0 Then RESF+=XFZ ' COPY BIT 7,5,HNC=0, SET Z, LUT PARITY
*(PXOR+(ALUR Shl 8)+ALUL)=RESF ' LUT DONE
' - - OR  - -  OR/XOR r SZ503P00, | 7 6 5 4 3 2 1 0 || S Z Y H X P N C | S=128, Z=64, F5=32, H=16, F3=8, PV=4, N=2, C=1
PE=ALUL Or ALUR:RESF=(PE And(XFS+XF5+XF3))+*(PFLAG+PE):If PE=0 Then RESF+=XFZ ' COPY BIT 7,5, HNC=0, SET Z, LUT PARITY
*(PPOR+(ALUR Shl 8)+ALUL)=RESF ' LUT DONE
Next ' HERE WERE CYCLED 256 ALU-RIGHTs
' - - RLC - - CARRY INDEPENDENT ,MAIN SHIFTS RLC/RL/RRC/RR SZ503P0C, SEPARATE VALUE AND FLAG LUTS DUAL VALUE NC FIRST C SECOND
PEW=ALUL Shl 1:If PEW>255 Then RESF=XFC:PEW Or= 1 Else RESF=0 ' SET CARRY AND ROTATE MSB
PE=PEW:RESF+=(PE And (XFS+XF5+XF3))+*(PFLAG+PE):If PE=0 Then RESF+=XFZ ' COPY BIT 7,5,3,H=0,N=0, SET Z, LUT PARITY
*(PRLC+(ALUL Shl 1))=PE:*(PRLC+(ALUL Shl 1)+1)=RESF ' LUT DONE
' - - RRC - - CARRY INDEPENDENT
PEW=ALUL:If (PEW And 1) Then RESF=XFC:PEW Or= 256 Else RESF=0 ' SET CARRY AND ROTATE MSB
PE=PEW Shr 1:RESF+=(PE And (XFS+XF5+XF3))+*(PFLAG+PE):If PE=0 Then RESF+=XFZ ' COPY BIT 7,5,3,H=0,N=0, SET Z, LUT PARITY
*(PRRC+(ALUL Shl 1))=PE:*(PRRC+(ALUL Shl 1)+1)=RESF ' LUT DONE
' - - RL - - NC VERSION
PEW=ALUL Shl 1:If PEW>255 Then RESF=XFC Else RESF=0 ' SET CARRY LSB IS ZERO
PE=PEW:RESF+=(PE And (XFS+XF5+XF3))+*(PFLAG+PE):If PE=0 Then RESF+=XFZ ' COPY BIT 7,5,3,H=0,N=0, SET Z,LUT PARITY
*(PRL+(ALUL Shl 2))=PE:*(PRL+(ALUL Shl 2)+2)=RESF ' LUT DONE
' - - RL - - C VERSION
PEW=(ALUL Shl 1)+1:If PEW>255 Then RESF=XFC Else RESF=0 ' SET CARRY LSB IS ZERO
PE=PEW:RESF+=(PE And (XFS+XF5+XF3))+*(PFLAG+PE):If PE=0 Then RESF+=XFZ ' COPY BIT 7,5,3,H=0,N=0, SET Z,LUT PARITY
*(PRL+(ALUL Shl 2)+1)=PE:*(PRL+(ALUL Shl 2)+3)=RESF ' LUT DONE
' - - RR - - NC VERSION
PEW=ALUL:If (PEW And 1) Then RESF=XFC Else RESF=0 ' SET CARRY MSB IS ZERO
PE=PEW Shr 1:RESF+=(PE And (XFS+XF5+XF3))+*(PFLAG+PE):If PE=0 Then RESF+=XFZ ' COPY BIT 7,5,3,H=0,N=0, SET Z, LUT PARITY
 *(PRR+(ALUL Shl 2))=PE:*(PRR+(ALUL Shl 2)+2)=RESF ' LUT DONE
' - - RR - - C VERSION
PEW=ALUL Or 256:If (PEW And 1) Then RESF=XFC Else RESF=0 ' SET CARRY MSB IS SET
PE=PEW Shr 1:RESF+=(PE And (XFS+XF5+XF3))+*(PFLAG+PE):If PE=0 Then RESF+=XFZ ' COPY BIT 7,5,3,H=0,N=0, SET Z,LUT PARITY
 *(PRR+(ALUL Shl 2)+1)=PE:*(PRR+(ALUL Shl 2)+3)=RESF ' LUT DONE
' - - SLA - - , SLA IS RLZ 'SZ503P0C
PEW=ALUL Shl 1:If PEW>255 Then RESF=XFC Else RESF=0 ' SET CARRY AND LSB IS ZERO SO SLA/RLZ 
PE=PEW:RESF+=(PE And (XFS+XF5+XF3))+*(PFLAG+PE):If PE=0 Then RESF+=XFZ ' COPY BIT 7,5,3,H=0,N=0, SET Z, LUT PARITY
 *(PSLA+(ALUL Shl 1))=PE:*(PSLA+(ALUL Shl 1)+1)=RESF ' LUT DONE
' - - SRA - - , SRA IS RRSREP 'SZ503P0C
PEW=ALUL: RESF=PEW And 1:If PEW>127 Then RESF+=XFS:PEW+=256  ' SET CARRY AND S AND REPEAT FUTURE MSB SO SRA/RRSREP 
PE=PEW Shr 1:RESF+=(PE And (XF5+XF3))+*(PFLAG+PE):If PE=0 Then RESF+=XFZ ' COPY BIT 5,3,H=0,N=0, SET Z, LUT PARITY
*(PSRA+(ALUL Shl 1))=PE:*(PSRA+(ALUL Shl 1)+1)=RESF ' LUT DONE
' - - SLL - - , SLL IS RLT 'SZ503P0C
PEW=(ALUL Shl 1) Or 1:If PEW>255 Then RESF=XFC Else RESF=0 ' SET CARRY AND LSB IS 1 SO SLL/RLT 
PE=PEW:RESF+=(PE And (XFS+XF5+XF3))+*(PFLAG+PE):If PE=0 Then RESF+=XFZ ' SET Z, COPY BIT 7,5,3,H=0,N=0, LUT PARITY
 *(PSLL+(ALUL Shl 1))=PE:*(PSLL+(ALUL Shl 1)+1)=RESF ' LUT DONE
' - - SRL - - SRL IS RRZ 'SZ503P0C
PEW=ALUL:RESF=PEW And 1:PE=PEW Shr 1: ' GET CARRY AND MSB IS ZERO SO SRL/RRZ
RESF+=(PE And (XF5+XF3))+*(PFLAG+PE):If PE=0 Then RESF+=XFZ ' COPY BIT 5,3,S=0,H=0,N=0, SET Z, LUT PARITY
*(PSRL+(ALUL Shl 1))=PE:*(PSRL+(ALUL Shl 1)+1)=RESF ' LUT DONE
Next


#Include "EMU_MICRONEW.EXT"
#Include "EMU_OPCODENEW.EXT"
