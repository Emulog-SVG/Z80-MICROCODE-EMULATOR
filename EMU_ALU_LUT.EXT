' - - - - - ALL ALU LUTS DONE HERE - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

'- - - - LUT PARITY FLAG PFLAG(0..255)=0/4, 4 IS BIT WEIGHT OF P/V IN F FLAG
For T1 = 0 To 255: T2=T1:T3=0:
T3+=(T2 And 1):T2 Shr =1:T3+=(T2 And 1):T2 Shr =1
T3+=(T2 And 1):T2 Shr =1:T3+=(T2 And 1):T2 Shr =1
T3+=(T2 And 1):T2 Shr =1:T3+=(T2 And 1):T2 Shr =1
T3+=(T2 And 1):T2 Shr =1:T3+=(T2 And 1):' ADD LOWEST ANDED BITS THUS COUNT
T3 And= 1:T3 Xor= 1:*(PFLAG+T1)=T3 Shl 2:Next ' PARITY IS SET WHEN BIT COUNT EVEN, WRITE "4"

' GENERATE FLAGS ONLY, LEFT OPERAND IS LOW BYTE, RIGHT OPERAND IS HIGH BYTE, HAVE DUAL NC/C AND SINGLE LUTS

For ALUL = 0 To 255: For ALUR = 0 To 255

'| 7 6 5 4 3 2 1 0 | ' - - DAA ALUOP - - ' DAA SZ5*3P-* 
'| S Z Y H X P N C | S=128, Z=64, F5=32, H=16, F3=8, PV=4, N=2, C=1
If ALUR And XFC Then DAAC=1 Else DAAC=0
If ALUR And XFN Then DAAN=1 Else DAAN=0
If ALUR And XFH Then DAAH=1 Else DAAH=0
LDAA=ALUL And 15
HDAA=(ALUL Shr 4) And 15
If DAAN=0 And (LDAA>15 Or DAAH=1) Then LDAA+=&H06 
If DAAN=0 And LDAA>15  Then HDAA+=1:LDAA And= 15:RESF+=XFH ' SET H HERE OR NOT
If DAAN=1 And (LDAA>15 Or DAAH=1) Then LDAA-=&H06
If DAAN=1 And LDAA>15  Then HDAA-=1:LDAA And= 15:RESF+=XFH ' SET H HERE OR NOT
If DAAN=0 And (HDAA>15 Or DAAC=1) Then HDAA+=&H06 
If DAAN=0 And HDAA>15 Then HDAA And= 15:RESF+=XFC ' SET C HERE OR NOT
If DAAN=1 And (HDAA>15 Or DAAC=1) Then HDAA-=&H06 
If DAAN=1 And HDAA>15 Then HDAA And= 15:RESF+=XFC ' SET C HERE OR NOT
PE=LDAA+(HDAA Shl 4)
RESF=(ALUR And XFN)+(PE And(XFS+XF5+XF3))+*(PFLAG+PE) ' GET OLD N,S,5,3 LUT PARITY
If PE=0 Then RESF+=XFZ ' SET Z
*(PDAA+(ALUR Shl 9)+(ALUL Shl 1))=PE ' VALUE LUT DONE
*(PDAA+(ALUR Shl 9)+(ALUL Shl 1)+1)=RESF ' FLAGS LUT DONE

'| 7 6 5 4 3 2 1 0 | ' - - ADD ALUOP - - , ADC VARY THAT ADD RESULT=LEFT+RIGHT+CARRY
'| S Z Y H X P N C | S=128, Z=64, F5=32, H=16, F3=8, PV=4, N=2, C=1
'The Parity/Overflow (P/V) Flag is set depending on the operation.
'For addition, operands with different signs never cause overflow.
'When operands HAVE SAME signs and ADD resultS IN a different sign, the Overflow Flag is set
PEW=ALUL+ALUR:PE=PEW:RESF=PE And (XFS+XF5+XF3) ' COPY BIT 7(S),5 AND 3 'For ADD instructions, N is cleared to 0
If PE=0 Then RESF+=XFZ ' SET Z
If PEW>255 Then RESF+=XFC ' SET CARRY
PE=((ALUL And 15)+(ALUR And 15)):If PE>15 Then RESF+=XFH 'HAVE LOW NIBBLE ALU CARRY SO SET H
S1=ALUL And XFS:S2=ALUR And XFS:S3=PEW And XFS 'GET ALL SIGNS
If (S1=0) And (S2=0) And (S3=XFS) Then RESF+=XFP 'SAME ++SIGNS AND RESULT - SO SET
If (S1=XFS) And (S2=XFS) And (S3=0) Then RESF+=XFP 'SAME --SIGNS AND RESULT + SO SET
*(PADD+(ALUR Shl 9)+(ALUL Shl 1))=RESF ' LUT DONE

' ADC CARRY SET VERSION
PEW=ALUL+ALUR+1:PE=PEW:RESF=PE And (XFS+XF5+XF3) ' COPY BIT 7(S),5 AND 3 'For ADD instructions, N is cleared to 0
If PE=0 Then RESF+=XFZ ' SET Z
If PEW>255 Then RESF+=XFC ' SET CARRY
PE=((ALUL And 15)+(ALUR And 15)):If PE>15 Then RESF+=XFH 'HAVE LOW NIBBLE ALU CARRY SO SET H
S1=ALUL And XFS:S2=ALUR And XFS:S3=PEW And XFS 'GET ALL SIGNS
If (S1=0) And (S2=0) And (S3=XFS) Then RESF+=XFP 'SAME ++SIGNS AND RESULT - SO SET
If (S1=XFS) And (S2=XFS) And (S3=0) Then RESF+=XFP 'SAME --SIGNS AND RESULT + SO SET
*(PADD+(ALUR Shl 9)+(ALUL Shl 1)+1)=RESF ' LUT DONE

'| 7 6 5 4 3 2 1 0 | ' - - SUB ALUOP - - , SBC VARY THAT SUB RESULT=LEFT-RIGHT-CARRY
'| S Z Y H X P N C | S=128, Z=64, F5=32, H=16, F3=8, PV=4, N=2, C=1
'The Parity/Overflow (P/V) Flag is set to a specific state depending on the operation being performed.
'For subtraction, overflow can occur for operands of unalike signs. Operands of alike signs never cause overflow
'IF THE RESULT sign has changed from a positive to a negative VS ALU-LEFT , resulting in an incorrect difference; the Overflow Flag is set.
PEW=ALUL-ALUR:PE=PEW:RESF=(PE And (XFS+XF5+XF3))+XFN ' COPY BIT 7(S),5 AND 3, For SUB instructions, N is set to 1.
If PE=0 Then RESF+=XFZ ' SET Z
If PEW>255 Then RESF+=XFC ' SET CARRY OK TESTED
PE=((ALUL And 15)-(ALUR And 15)): If PE>15 Then RESF+=XFH 'HAVE LOW NIBBLE ALU CARRY SET,SO SET H, SAME AS ADD
S1=ALUL And XFS:S2=ALUR And XFS:S3=PEW And XFS 'GET ALL SIGNS
If (S1=0) And (S2=XFS) And (S3=XFS) Then RESF+=XFP 'SIGNS ARE +- AND RESULT - SET OVF
If (S1=XFS) And (S2=0) And (S3=0) Then RESF+=XFP 'SIGNS ARE -+ AND RESULT + SET OVF
*(PSUB+(ALUR Shl 9)+(ALUL Shl 1))=RESF ' LUT DONE

' SBC CARRY SET VERSION
PEW=ALUL-ALUR-1:PE=PEW:RESF=(PE And (XFS+XF5+XF3))+XFN ' COPY BIT 7(S),5 AND 3, For SUB instructions, N is set to 1.
If PE=0 Then RESF+=XFZ ' SET Z
If PEW>255 Then RESF+=XFC ' SET CARRY OK TESTED
PE=((ALUL And 15)-(ALUR And 15)): If PE>15 Then RESF+=XFH 'HAVE LOW NIBBLE ALU CARRY SET,SO SET H, SAME AS ADD
S1=ALUL And XFS:S2=ALUR And XFS:S3=PEW And XFS 'GET ALL SIGNS
If (S1=0) And (S2=XFS) And (S3=XFS) Then RESF+=XFP 'SIGNS ARE +- AND RESULT - SET OVF
If (S1=XFS) And (S2=0) And (S3=0) Then RESF+=XFP 'SIGNS ARE -+ AND RESULT + SET OVF
*(PSUB+(ALUR Shl 9)+(ALUL Shl 1)+1)=RESF ' LUT DONE

' AND XOR OR CP HAVE SINGLE 65536 MATRIXES

'| 7 6 5 4 3 2 1 0 |' - - AND ALUOP - - AND r SZ513P00
'| S Z Y H X P N C | S=128, Z=64, F5=32, H=16, F3=8, PV=4, N=2, C=1
PE=ALUL And ALUR:RESF=(PE And (XFS+XF5+XF3))+XFH+*(PFLAG+PE) ' COPY BIT 7,5,3,N=0,C=0,H=1, LUT FOR PARITY ADD 4 
If PE=0 Then RESF+=XFZ ' SET Z
*(PAND+(ALUR Shl 8)+ALUL)=RESF ' LUT DONE

'| 7 6 5 4 3 2 1 0 |' - - XOR ALUOP - -  OR/XOR r SZ503P00
'| S Z Y H X P N C | S=128, Z=64, F5=32, H=16, F3=8, PV=4, N=2, C=1
PE=ALUL Xor ALUR:RESF=(PE And(XFS+XF5+XF3))+*(PFLAG+PE) ' COPY BIT 7,5,HNC=0, LUT PARITY
If PE=0 Then RESF+=XFZ ' SET Z
*(PXOR+(ALUR Shl 8)+ALUL)=RESF ' LUT DONE

'| 7 6 5 4 3 2 1 0 |' - - OR ALUOP - -  OR/XOR r SZ503P00
'| S Z Y H X P N C | S=128, Z=64, F5=32, H=16, F3=8, PV=4, N=2, C=1
PE=ALUL Or ALUR:RESF=(PE And(XFS+XF5+XF3))+*(PFLAG+PE) ' COPY BIT 7,5, HNC=0, LUT PARITY
If PE=0 Then RESF+=XFZ ' SET Z
*(PPOR+(ALUR Shl 8)+ALUL)=RESF ' LUT DONE

'| 7 6 5 4 3 2 1 0 |' - - CP ALUOP - - IS REGULAR QUIRKED SUB, RESULT NOT SAVED AND AFFECT FLAGS
'| S Z Y H X P N C | S=128, Z=64, F5=32, H=16, F3=8, PV=4, N=2, C=1
'For SUB instructions, N is set to 1.
'The Parity/Overflow (P/V) Flag is set to a specific state depending on the operation.
'For subtraction, overflow can occur for operands of unalike signs. Operands of alike signs never cause overflow
'IF THE RESULT sign has changed from a positive to a negative VS ALU-LEFT , resulting in an incorrect difference; the Overflow Flag is set.
PEW=ALUL-ALUR:PE=PEW:RESF=(PE And XFS)+(ALUR And (XF5+XF3))+XFN ' COPY BIT 7, !!! 5,3 ARE FROM RIGHT OPERAND, AND SET N
If PE=0 Then RESF+=XFZ ' SET Z MEANS EUQALITY
If PEW>255 Then RESF+=XFC ' SET CARRY OK TESTED
PE=((ALUL And 15)-(ALUR And 15)):If PE>15 Then RESF+=XFH 'HAVE LOW NIBBLE ALU CARRY SET,SO SET H
S1=ALUL And XFS:S2=ALUR And XFS:S3=PEW And XFS 'GET ALL SIGNS
If (S1=0) And (S2=XFS) And (S3=XFS) Then RESF+=XFP 'SIGNS ARE +- AND RESULT - SET OVF
If (S1=XFS) And (S2=0) And (S3=0) Then RESF+=XFP 'SIGNS ARE -+ AND RESULT + SET OVF
*(PPCP+(ALUR Shl 8)+ALUL)=RESF ' LUT DONE

Next ' HERE CYCLED EXTRA 256 ALU-RIGHTs

' RLC CARRY INDEPENDENT
'| 7 6 5 4 3 2 1 0 |' MAIN SHIFTS RLC/RL/RRC/RR SZ503P0C, SEPARATE VALUE AND FLAG LUTS DUAL VALUE NC FIRST C SECOND
'| S Z Y H X P N C | S=128, Z=64, F5=32, H=16, F3=8, PV=4, N=2, C=1
PEW=ALUL Shl 1:If PEW>255 Then RESF=XFC:PEW Or= 1 Else RESF=0 ' SET CARRY AND ROTATE MSB
PE=PEW:RESF+=(PE And (XFS+XF5+XF3))+*(PFLAG+PE) ' COPY BIT 7,5,3,H=0,N=0, LUT PARITY
If PE=0 Then RESF+=XFZ ' SET Z 
*(PRLC+(ALUL Shl 1))=PE ' VALUE LUT
*(PRLC+(ALUL Shl 1)+1)=RESF ' FLAG LUT

' RRC CARRY INDEPENDENT
'| 7 6 5 4 3 2 1 0 |' MAIN SHIFTS RLC/RL/RRC/RR SZ503P0C, SEPARATE VALUE AND FLAG LUTS DUAL VALUE NC FIRST C SECOND
'| S Z Y H X P N C | S=128, Z=64, F5=32, H=16, F3=8, PV=4, N=2, C=1
PEW=ALUL:If (PEW And 1) Then RESF=XFC:PEW Or= 256 Else RESF=0 ' SET CARRY AND ROTATE MSB
PE=PEW Shr 1:RESF+=(PE And (XFS+XF5+XF3))+*(PFLAG+PE) ' COPY BIT 7,5,3,H=0,N=0, LUT PARITY
If PE=0 Then RESF+=XFZ ' SET Z 
*(PRRC+(ALUL Shl 1))=PE ' VALUE LUT
*(PRRC+(ALUL Shl 1)+1)=RESF ' FLAG LUT

' RL NC VERSION
'| 7 6 5 4 3 2 1 0 |' MAIN SHIFTS RLC/RL/RRC/RR SZ503P0C, SEPARATE VALUE AND FLAG LUTS DUAL VALUE NC FIRST C SECOND
'| S Z Y H X P N C | S=128, Z=64, F5=32, H=16, F3=8, PV=4, N=2, C=1
PEW=ALUL Shl 1:If PEW>255 Then RESF=XFC Else RESF=0 ' SET CARRY LSB IS ZERO
PE=PEW:RESF+=(PE And (XFS+XF5+XF3))+*(PFLAG+PE) ' COPY BIT 7,5,3,H=0,N=0, LUT PARITY
If PE=0 Then RESF+=XFZ ' SET Z 
*(PRL+(ALUL Shl 2))=PE ' NC VALUE LUT
*(PRL+(ALUL Shl 2)+2)=RESF ' NC FLAG LUT

' RL C VERSION
'| 7 6 5 4 3 2 1 0 |' MAIN SHIFTS RLC/RL/RRC/RR SZ503P0C, SEPARATE VALUE AND FLAG LUTS DUAL VALUE NC FIRST C SECOND
'| S Z Y H X P N C | S=128, Z=64, F5=32, H=16, F3=8, PV=4, N=2, C=1
PEW=(ALUL Shl 1)+1:If PEW>255 Then RESF=XFC Else RESF=0 ' SET CARRY LSB IS ZERO
PE=PEW:RESF+=(PE And (XFS+XF5+XF3))+*(PFLAG+PE) ' COPY BIT 7,5,3,H=0,N=0, LUT PARITY
If PE=0 Then RESF+=XFZ ' SET Z 
*(PRL+(ALUL Shl 2)+1)=PE ' C VALUE LUT
*(PRL+(ALUL Shl 2)+3)=RESF ' C FLAG LUT

' RR NC VERSION
'| 7 6 5 4 3 2 1 0 |' MAIN SHIFTS RLC/RL/RRC/RR SZ503P0C, SEPARATE VALUE AND FLAG LUTS DUAL VALUE NC FIRST C SECOND
'| S Z Y H X P N C | S=128, Z=64, F5=32, H=16, F3=8, PV=4, N=2, C=1
PEW=ALUL:If (PEW And 1) Then RESF=XFC Else RESF=0 ' SET CARRY MSB IS ZERO
PE=PEW Shr 1:RESF+=(PE And (XFS+XF5+XF3))+*(PFLAG+PE) ' COPY BIT 7,5,3,H=0,N=0, LUT PARITY
If PE=0 Then RESF+=XFZ ' SET Z 
*(PRR+(ALUL Shl 2))=PE ' NC VALUE LUT
*(PRR+(ALUL Shl 2)+2)=RESF ' NC FLAG LUT

' RR C VERSION
'| 7 6 5 4 3 2 1 0 |' MAIN SHIFTS RLC/RL/RRC/RR SZ503P0C, SEPARATE VALUE AND FLAG LUTS DUAL VALUE NC FIRST C SECOND
'| S Z Y H X P N C | S=128, Z=64, F5=32, H=16, F3=8, PV=4, N=2, C=1
PEW=ALUL Or 256:If (PEW And 1) Then RESF=XFC Else RESF=0 ' SET CARRY MSB IS SET
PE=PEW Shr 1:RESF+=(PE And (XFS+XF5+XF3))+*(PFLAG+PE) ' COPY BIT 7,5,3,H=0,N=0, LUT PARITY
If PE=0 Then RESF+=XFZ ' SET Z 
*(PRR+(ALUL Shl 2)+1)=PE ' C VALUE LUT
*(PRR+(ALUL Shl 2)+3)=RESF ' C FLAG LUT

' SLA CARRY INDEPENDENT 'SLA IS RLZ 'SZ503P0C
'| 7 6 5 4 3 2 1 0 |' MAIN SHIFTS RLC/RL/RRC/RR SZ503P0C, SEPARATE VALUE AND FLAG LUTS DUAL VALUE NC FIRST C SECOND
'| S Z Y H X P N C | S=128, Z=64, F5=32, H=16, F3=8, PV=4, N=2, C=1
PEW=ALUL Shl 1:If PEW>255 Then RESF=XFC Else RESF=0 ' SET CARRY AND LSB IS ZERO SO SLA/RLZ 
PE=PEW:RESF+=(PE And (XFS+XF5+XF3))+*(PFLAG+PE) ' COPY BIT 7,5,3,H=0,N=0, LUT PARITY
If PE=0 Then RESF+=XFZ ' SET Z 
*(PSLA+(ALUL Shl 1))=PE ' VALUE LUT
*(PSLA+(ALUL Shl 1)+1)=RESF ' FLAG LUT

' SRA CARRY INDEPENDENT 'SRA IS RRSREP 'SZ503P0C
'| 7 6 5 4 3 2 1 0 |' MAIN SHIFTS RLC/RL/RRC/RR SZ503P0C, SEPARATE VALUE AND FLAG LUTS DUAL VALUE NC FIRST C SECOND
'| S Z Y H X P N C | S=128, Z=64, F5=32, H=16, F3=8, PV=4, N=2, C=1
PEW=ALUL: RESF=PEW And 1:If PEW>127 Then RESF+=XFS:PEW+=256  ' SET CARRY AND S AND REPEAT FUTURE MSB SO SRA/RRSREP 
PE=PEW Shr 1:RESF+=(PE And (XF5+XF3))+*(PFLAG+PE) ' COPY BIT 5,3,H=0,N=0, LUT PARITY
If PE=0 Then RESF+=XFZ ' SET Z 
*(PSRA+(ALUL Shl 1))=PE ' VALUE LUT
*(PSRA+(ALUL Shl 1)+1)=RESF ' FLAG LUT

' SLL CARRY INDEPENDENT 'SLL IS RLT 'SZ503P0C
'| 7 6 5 4 3 2 1 0 |' MAIN SHIFTS RLC/RL/RRC/RR SZ503P0C, SEPARATE VALUE AND FLAG LUTS DUAL VALUE NC FIRST C SECOND
'| S Z Y H X P N C | S=128, Z=64, F5=32, H=16, F3=8, PV=4, N=2, C=1
PEW=(ALUL Shl 1) Or 1:If PEW>255 Then RESF=XFC Else RESF=0 ' SET CARRY AND LSB IS 1 SO SLL/RLT 
PE=PEW:RESF+=(PE And (XFS+XF5+XF3))+*(PFLAG+PE) ' COPY BIT 7,5,3,H=0,N=0, LUT PARITY
If PE=0 Then RESF+=XFZ ' SET Z 
*(PSLL+(ALUL Shl 1))=PE ' VALUE LUT
*(PSLL+(ALUL Shl 1)+1)=RESF ' FLAG LUT

' SRL CARRY INDEPENDENT 'SRL IS RRZ 'SZ503P0C
'| 7 6 5 4 3 2 1 0 |' MAIN SHIFTS RLC/RL/RRC/RR SZ503P0C, SEPARATE VALUE AND FLAG LUTS DUAL VALUE NC FIRST C SECOND
'| S Z Y H X P N C | S=128, Z=64, F5=32, H=16, F3=8, PV=4, N=2, C=1
PEW=ALUL:RESF=PEW And 1:PE=PEW Shr 1: ' GET CARRY AND MSB IS ZERO SO SRL/RRZ
RESF+=(PE And (XF5+XF3))+*(PFLAG+PE) ' COPY BIT 5,3,S=0,H=0,N=0, LUT PARITY
If PE=0 Then RESF+=XFZ ' SET Z 
*(PSRL+(ALUL Shl 1))=PE ' VALUE LUT
*(PSRL+(ALUL Shl 1)+1)=RESF ' FLAG LUT

Next 













