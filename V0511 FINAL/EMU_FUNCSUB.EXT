'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
' USE DAT, DO ALIGNED ALLOCATION
Function GETPTR(SIZE As ULongInt,OFFS As ULongInt) As Unsigned Byte Ptr Static 
OFFS-=1:Dim As ULongInt V1,V2,V3,USED=0:If USED=0 Then MEMCUR=@DAT(0)
Do:V1=MEMCUR:V1 And=OFFS:MEMCUR+=1:Loop While V1<>0:MEMCUR-=1:V2=MEMCUR:MEMCUR+=SIZE:USED=MEMCUR-(@DAT(0)):Return ByVal V2'Print "FOUND AS ";;Hex$(V2);", MARGIN: ";OFFS+1;", SIZE: ";SIZE;", END AT: ";USED:Sleep
End Function


' UOPS AUTOINIT
Function UOPS(XUOP As ULong)As String Static:
Dim As Unsigned Long UOPN(2048),UOPL(2048),SCAN=0,T1=1,T2,T3=0,T4,T5,T6:If SCAN=0 Then 
SCAN=1:Do:T3+=1:Loop Until Mid$(U$,T3,1)="#":T3+=2:Do:T4=T3:Do:T4+=1:Loop Until Mid$(U$,T4,1)="_":T5=T4:Do:T5+=1:Loop Until Mid$(U$,T5,1)="_":
T3+=1:T6=Val$(Mid$(U$,T3,T4-T3)):T4+=1:UOPN(T6)=T4:UOPL(T6)=T5-T4:T5+=2:T3=T5:Loop Until Mid$(U$,T3+1,1)="!":
Else EndIf:Return ByVal Mid$(U$,UOPN(XUOP),UOPL(XUOP)):End Function
' OPCODES AUTOINIT
Function MNEM(XTEMP As ULong)As String:Static As Unsigned Long XMNEM(4096),XMLEN(4096),SCAN=0,T1,T2,T3=0,T4,T5,T6:Static As String CP$:If SCAN=0 Then 
SCAN=1:Do:T3+=1:Loop Until Mid$(U$,T3,1)="@":T3+=2:Do:T4=T3:Do:T4+=1:Loop Until Mid$(U$,T4,1)="_":T5=T4:Do:T5+=1:Loop Until Mid$(U$,T5,1)="_":
T3+=1:CP$=Mid$(U$,T3,4)+"_":T6=ValLng$("&H"+Mid$(U$,T3+4,2)):T1=0:Do:T1+=1:Loop Until Mid$(U$,T1,5)=CP$:T1+=4:T2=T1:T1+=1:Do:T2+=1:Loop Until Mid$(U$,T2,1)="_":
T6+=Val$(Mid$(U$,T1,T2-T1)):T4+=1:XMNEM(T6)=T4:XMLEN(T6)=T5-T4:T3=T5+1+1:Loop Until Mid$(U$,T3+1,1)="!" 
Else EndIf:Return ByVal Mid$(U$,XMNEM(XTEMP),XMLEN(XTEMP)):End Function
'GET STRING FILE
Sub GETUOPS(F$ As String)Static:Static As Unsigned Long T1:Static As FILE Ptr filePtr:filePtr=fopen(F$,"rb"):U$=STRING(FileLen(F$)+16,33):T1=fread(StrPtr(U),FileLen(F$),1,FILEPTR):fclose (fileptr):End Sub:
GETUOPS("EMU_STRING.EXT"):Print UOPS(0);MNEM(0)


' MAKE SCROLL, LOCATE AND ERASE FREED PIXELS
Sub SCROLL(STX As ULong,STY As ULong,WDX As ULong,WDY As ULong,LC As ULong,CL As ULong)Static
Static As UByte Ptr B1,B2:Static As ULongInt Ptr P1,P2
Static As ULong HG,HX,LX,ZC,SX:Static As ULongInt E
Locate 0+((WDY+STY)/TWY),0+(STX/TWX)+1 
SX=SCRX Shl 2:WDX And=&HFFF8:STX And=&HFFF8:B1=ScreenPtr()+STX*4+STY*SX' MEET U64 COPY ' START PIX
B2=B1+LC*SX:HG=WDY-LC:ZC=LC:E=CL+(CL Shl 32)' OFFSET PIX ' HOW MUCH ' ERASE FREED LINES ' U64 RGBA ERASER COLOR
ScreenLock():Do:LX=WDX Shr 3:P1=B1:P2=B2:Do ' PER LINE PER CHUNK COPY ' 16 RGBA A TIME
*P1=*P2:P1+=1:P2+=1:*P1=*P2:P1+=1:P2+=1:*P1=*P2:P1+=1:P2+=1:*P1=*P2:P1+=1:P2+=1:
LX-=1:Loop While LX:B1+=SX:B2+=SX:HG-=1:Loop While HG
HG=ZC:Do:LX=WDX Shr 3:P1=B1:Do:*P1=E:P1+=1:*P1=E:P1+=1:*P1=E:P1+=1:*P1=E:P1+=1:' ERASE LINE
LX-=1:Loop While LX:B1+=SX:HG-=1:Loop While HG:ScreenUnLock()' ALL DONE AND UPDATE BY UNLOCK
End Sub
#Define SCROLLOC SCROLL(0,192,SCRX,SCRY-192-TWY-TWY,TWY,&H0F0F0F)

'TEMPORARY LOAD AND SAVE BASICS
Sub LOADREAL () Static 
Static As FILE Ptr filePtr:filePtr = fopen("ELITE_REAL.BIN", "rb"):T1=fread(pmem, 65536,1 , fileptr):fclose (fileptr)
X.ADDER=&H7459:X.PC=X.ADDER:X.CUR=X.START:X.PREFIX=0:X.STFEED=0:X.INTMODE=2:X.IFF1=1:X.PININT=0
X.I=&HFD:X.R=&H08:X.S=&HFF:X.P=&HFB:X.A=&H00:X.FLG=&H54:X.F=X.FLG:X.EAF=(&HA1 Shl 32)+&HA0 
X.B=&H00:X.C=&H00:X.EBC=(&HFF SHL 32)+&HFF:X.D=&H5D:X.E=&HE0:X.EDE=(&H3A SHL 32)+&H1F 
X.H=&HF4:X.L=&HE4:X.EHL=(&H03 SHL 32)+&H04:X.XH=&HFF:X.XL=&H00:X.YH=&H61:X.YL=&HCC:End Sub
Sub LOADBIN () Static 
STATIC As FILE Ptr filePtr:filePtr = fopen("ELITE_PFULL.BIN", "rb"):T1=fread(pmem, 65536,1 , fileptr):fclose (fileptr)
X.ADDER=&H8000:X.PC=X.ADDER:X.CUR=X.START:X.PREFIX=0:X.STFEED=0:X.INTMODE=1:X.IFF1=0:X.PININT=0:
X.A=&H41:X.FLG=&H14:X.F=X.FLG:X.EAF=(&HA9 SHL 32)+&HAC:X.B=&H10:X.C=&HCC:X.EBC=(&H20 SHL 32)+&HB3
X.D=&HDD:X.E=&HEE:X.EDE=(&HB3 SHL 32)+&H56:X.H=&H88:X.L=&H00:X.EHL=(&H87 SHL 32)+&H75 
X.XH=&H03:X.XL=&HD4:X.YH=&H5C:X.YL=&H3A:X.I=&HA9:X.R=&H00:X.S=&H7F:X.P=&HF0:End Sub
Sub SAVEBIN () Static 
STATIC As FILE Ptr filePtr:Static As UByte Ptr A1,A2,A3:filePtr = fopen("ELITE_TEST.BIN", "wb"):
T1=fwrite(PMEM,65536,1, fileptr)
A1=VarPtr(X.TFIRST):A2=VarPtr(X.TLAST):T1=fwrite(A1,A2-A1,1, fileptr)::fclose (fileptr):End Sub
Sub RELOADBIN () Static 
STATIC As FILE Ptr filePtr:Static As UByte Ptr A1,A2,A3:Static As String F$,U$:F$="ELITE_TEST.BIN"
filePtr=fopen(F$,"rb"):T1=fREAD(PMEM,65536,1, fileptr):
A1=VarPtr(X.TFIRST):T1=fREAD(A1,FileLen(F$)-65536,1, fileptr):fclose (fileptr):End Sub


' SHOW 6912 SCREEN SCRSHOW(SCMUL As ULong,POSX As ULong,POSY As ULong), AUTOINIT
' LUMIFY 5*5 6912 WITH PATTERN HIGHLIGHTS SEEK, SCALE x1,2,3,4 AT XY, NEED SCRX,SCRY,DAT AND MORE
Sub SCRSHOW(SCMUL As ULong,POSX As ULong,POSY As ULong) Static  
Dim As ULong LUTDONE=0,SWBW=0,NOPT=0

Dim As UByte Ptr PUNF,PBTB,PLIN,PLAN,MIRR
Dim As USHORT Ptr PLANW,PBTBW

Dim As UShort Ptr PCLIM,PPLIM,PMLIM
Dim As ULongInt Ptr PPTOC,PBLR,PPQM,PPQMD,PPQML,PPQMC,PPQMH,PQPX
Dim As ULong Ptr PQPL,PSS
Dim As ULongInt Ptr PPATR
'Dim As UByte Ptr PPAT
Dim As ULongInt Ptr PPAT

If LUTDONE=555 Then GoTo LUTPRESENT Else LUTDONE=555 EndIf: 'LUTRENEWAL

'CREATE ARRAYS ON FIRST CALL, ARRANGE FOR CLOSER CACHING
'SOMEWHAT 2,5Mb 
PUNF =GETPTR(8192*16,      32) ' NOW 1+8+1 NOW 1+4+1 BIT WITH 3PIX SURR INLINE
MIRR =GETPTR(1024*8,      32) ' REVERSED BITS OF 6144
PBLR =GETPTR(49152*8+8192,  32) ' U64 PTRS TO SELECT DIFFERENT LUMA REDUCTIONS
'PBTB =GETPTR(256*192*2+4096, 32): ' NOW 16BIT 256/1+192+1 3BPP SURRS 
PBTB =GETPTR(256*192*16, 32): ' EXTRA 128BIT 5X5s NOW 16BIT 256/1+192+1 3BPP SURRS
PBTBW=PBTB:
PCLIM=GETPTR(16384*2,      32) ' LUT FINAL INT LUMA LIMITER TO 255,IS DIVIDED BY DIVB
PMLIM=GETPTR(16384*2,      32) ' LUT PATTERN LESS LUMA LIMITER,IS DIVIDED BY DIVD
PPLIM=GETPTR(16384*2,      32) ' LUT PATTERN LUMA LIMITER,IS DIVIDED BY DIVC
PPTOC=GETPTR(16*8,         32) ' LUT RGB48 OF ZX COLOURS,INKS
PPQM =GETPTR(16*16*16*16*8,32) ' LUT QUAD 4BPP RGB48 SUMM,DIVIDED BY DIVA
PPQMD=GETPTR(16*16*16*16*8,32) ' SHR 1 LLLL VERSION LUT QUAD 4BPP RGB48 SUMM,DIVIDED BY DIVA
PQPL =GETPTR(65536*4,  32) ' LUT CVT ATTR/PIX(16BIT) TO 8X AS 4BPP,TO CATCH FLASHES IS 256 
PLIN=GETPTR(6144*3+32768,32) ' 6144 BUT LINEAR FORM
PLAN=PLIN+6144:
PLANW=PLAN:
PQPX=PLAN+12288:


PSS  =GETPTR(49152*4+4096, 32) ' RENDER SCREEN 256*192*RGBA
PPAT =GETPTR(512*8,        32) ' LUT DIRECT U64PTR FOR EACH SELECTED PATTERN 3*3, HIGHLIGHTERS
PPATR=GETPTR(512*8*2+16384,      32) ' LUT PATTERN BITWISE ROT AND MIRR 8*16BPP=128 BIT ENTRIES, FOR PPAT MANUAL SETTING

LUTRENEWAL:GoTo NOPLAYSHINE 

Do ' KEYPLAYER TO APPLY SHINE PRESETS, NEED SLEEP AFTER CALL
Dim As String K,Q
K$=InKey:If K$<>"" Then Q$=InKey:Q$=InKey:Q$=InKey:Q$=InKey:Q$=InKey:
'If K=" " Then GoTo UNCYCLE
If K="Q" Then DIVA+=.5
If K="A" Then DIVA-=.5
If K="W" Then DIVB+=.1':DIVC=DIVB:DIVD=DIVB
If K="S" Then DIVB-=.1':DIVC=DIVB:DIVD=DIVB
If K="E" Then DIVC+=.1
If K="D" Then DIVC-=.1
If K="R" Then DIVD+=.1
If K="F" Then DIVD-=.1
If K="Z" Then SWBW Xor=1:DIVA=20:DIVB=3:DIVC=DIVB:DIVD=DIVB
If K="X" Then NOPT Xor=1
If K="1" Then DIVA=7:DIVB=3:DIVC=2.5:DIVD=2:SWBW=0
If K="2" Then DIVA=9:DIVB=2.2:DIVC=1.7:DIVD=1.2:SWBW=0
Locate (97,0):Print DIVA,DIVB,DIVC,DIVD,"..."
Loop While 0

NOPLAYSHINE:

'NO SPEED CRITICAL
'PREPARE 16C RGB48 MINILUT MADE OF 6912 LUMA LEVELS
'MAKE LUT PPTOC*16 RGB48 FOR 4BPP,PEAK BRIGHT 255,USUAL BY BBASE 208 OR 224,DO-LOOP MAKE VARS UNSTATIC AND LOCAL
Do:Dim As ULong T0,T1,T2,T7,T6,T8:For T6=0 To 15:T0=0:T1=0:T2=0:If T6 And 8 Then T7=255:T8= 8 Else T7=BBASE:T8=0 EndIf:If T6 And 1 Then T0=T7 :T8+=1 Else EndIf:If T6 And 2 Then T1=T7 :T8+=4 Else EndIf:If T6 And 4 Then T2=T7 :T8+=2 Else EndIf:*(PPTOC+T8)=(T2 Shl 32)+(T1 Shl 16)+T0:Next:Loop While 0:

'NO SPEED CRITICAL
'PREPARE FULL STROKE 8PIX 4BPP FOR EACH BYTE+ATTR OF 6912, 65536*32BIT 8*4BPP
'MAKE LUT ATTR*PIX 16BIT TO 32BIT AS QPL(256*256)=8*4BPP 
Do:Dim As Unsigned Long TI,PPL,DDT,SHC,CURC,RES,DX,MSK,INKC,PAPC:TI=0:For PPL=0 To 2047 Step 8:For DDT=0 To 255:
If SWBW Then CURC=7 Else CURC=PPL Shr 3 EndIf:INKC=CURC And 7:PAPC=(CURC Shr 3) And 7:If CURC And 64 Then INKC+=8:PAPC+=8 Else EndIf:If CURC And 128 Then CURC=INKC:INKC=PAPC:PAPC=CURC Else EndIf:
SHC=0:MSK=1:For DX=0 To 7:If DDT And MSK Then RES=INKC Else RES=PAPC EndIf:
'SHC Shr=4:SHC Or=(RES SHL 28):
SHC ShL=4:SHC Or=(RES SHL 0):'REVERSE ORDER

MSK SHL=1:Next:*(PQPL+TI)=SHC:TI+=1:Next:Next:Loop While 0

'NO SPEED CRITICAL
'PLUS SHR 1 VERSION PPQMD
'ON-CRT PIXELS DO SHINE OVER OF OTHER 8 AROUND, TO ACCELERATE USE PRESUMMED 4X FOR EACH 3x3
'MAKE PQM LUT 4BPP*4,GET 4*RGB48 SUMM REDUCED BY DIVA(CUT LUMA SURR 3*3),TO PQM(16*16*16*16)=65536*RGB48
Do:Dim As ULong TI,ER,EG,EB,C1,C2,C3,C4:Dim As ULongInt PMX,QMX,MSK=&H00001FFF1FFF1FFF:TI=0:For C4=0 To 15:For C3=0 To 15:For C2=0 To 15:For C1=0 To 15:

'USUAL NNNN LUMAS PPQM
QMX=*(PPTOC+C4)+*(PPTOC+C3)+*(PPTOC+C2)+*(PPTOC+C1):
ER=((QMX SHR 32) And 65535)/DIVA:EG=((QMX SHR 16) And 65535)/DIVA:EB=(QMX And 65535)/DIVA:
QMX=(ER SHL 32) Or (EG Shl 16) Or EB:*(PPQM+TI)=QMX:
'ALL LLLL LUMAS PPQMD
QMX=(QMX Shr 1)AND MSK:*(PPQMD+TI)=QMX:


TI=TI+1:Next:Next:Next:Next:Loop While 0

'NO SPEED CRITICAL
'PIXEL SURR PATTERN WILL TRIGGER LUMA LEVELS TO SHINE IT UP AND GET UPMIXED COLOURING 
'LUMA LIMITERS 16384 OF 16BIT, ACTUAL VALUES 8BIT, SMALL SIZE 16K AND USHORT INTENTIONAL 
'LUT PCLIM 16384*16BIT, FINAL INT LUMA LIMITER TO 255,DIVIDED BY DIVB
'LUT PPLIM 16384*16BIT, PATTERN LUMA LIMITER,DIVIDED BY DIVC
'LUT PMLIM 16384*16BIT, PATTERN LESS LUMA LIMITER,DIVIDED BY DIVD
Do:Dim As ULong C1,C2,C3,C4:Dim As UShort UC1,UC2:Dim As UShort Ptr XLP,YLP,MLP
XLP=PCLIM:YLP=PPLIM:MLP=PMLIM:For UC1=0 To 16383' CYCLE ALL LIGHT LEVELS 0-16383 9*256 AND 25*256 ARE LIGHTER THAN 8BIT  
UC2=UC1/DIVB:If UC2<256 Then *(XLP)=UC2 Else *(XLP)=255
UC2=UC1/DIVC:If UC2<256 Then *(YLP)=UC2 Else *(YLP)=255
UC2=UC1/DIVD:If UC2<256 Then *(MLP)=UC2 Else *(MLP)=255
XLP+=1:YLP+=1:MLP+=1:Next:Loop While 0

'NO SPEED CRITICAL
'USE ONE GIVEN 3x3 PATTERN VIA LUT TO GET ALL ITS ROTATION AND MIRROR - LUT PPATR 8*(9 OF 16)BPP=128 BIT
Do:Dim As ULong W,WC,P0,P1,P2,P3,P4,P5,P6,P7,P8,P9,R1,R2,R3,R4,R5,R6,R7,R8:Dim As ULong Ptr Q:Dim As ULongInt Ptr XQ:Dim As ULongInt XX:
XQ=PPATR:Q=PPATR:For W=0 To 511:'CYCLE ALL 3x3=512, REGISTER AS 123456789 IN BITS &B876543210
WC=W:P9=WC And 1:WC Shr=1:P8=WC And 1:WC Shr=1:P7=WC And 1:WC Shr=1:P6=WC And 1:WC Shr=1:P5=WC And 1:WC Shr=1:P4=WC And 1:WC Shr=1:
P3=WC And 1:WC Shr=1:P2=WC And 1:WC Shr=1:P1=WC And 1:R1=W:'123'456'789
R2=P7:R2 Shl=1:R2+=P4:R2 Shl=1:R2+=P1:R2 Shl=1:R2+=P8:R2 Shl=1:R2+=P5:R2 Shl=1:R2+=P2:R2 Shl=1:R2+=P9:R2 Shl=1:R2+=P6:R2 Shl=1:R2+=P3:'741'852'963
R3=P9:R3 Shl=1:R3+=P8:R3 Shl=1:R3+=P7:R3 Shl=1:R3+=P6:R3 Shl=1:R3+=P5:R3 Shl=1:R3+=P4:R3 Shl=1:R3+=P3:R3 Shl=1:R3+=P2:R3 Shl=1:R3+=P1:'987'654'321
R4=P3:R4 Shl=1:R4+=P6:R4 Shl=1:R4+=P9:R4 Shl=1:R4+=P2:R4 Shl=1:R4+=P5:R4 Shl=1:R4+=P8:R4 Shl=1:R4+=P1:R4 Shl=1:R4+=P4:R4 Shl=1:R4+=P7:'369'258'147
R5=P3:R5 Shl=1:R5+=P2:R5 Shl=1:R5+=P1:R5 Shl=1:R5+=P6:R5 Shl=1:R5+=P5:R5 Shl=1:R5+=P4:R5 Shl=1:R5+=P9:R5 Shl=1:R5+=P8:R5 Shl=1:R5+=P7:'321'654'987
R6=P9:R6 Shl=1:R6+=P6:R6 Shl=1:R6+=P3:R6 Shl=1:R6+=P8:R6 Shl=1:R6+=P5:R6 Shl=1:R6+=P2:R6 Shl=1:R6+=P7:R6 Shl=1:R6+=P4:R6 Shl=1:R6+=P1:'963'852'741
R7=P7:R7 Shl=1:R7+=P8:R7 Shl=1:R7+=P9:R7 Shl=1:R7+=P4:R7 Shl=1:R7+=P5:R7 Shl=1:R7+=P6:R7 Shl=1:R7+=P1:R7 Shl=1:R7+=P2:R7 Shl=1:R7+=P3:'789'456'123
R8=P1:R8 Shl=1:R8+=P4:R8 Shl=1:R8+=P7:R8 Shl=1:R8+=P2:R8 Shl=1:R8+=P5:R8 Shl=1:R8+=P8:R8 Shl=1:R8+=P3:R8 Shl=1:R8+=P6:R8 Shl=1:R8+=P9:'147'258'369
*XQ=R1+(R2 Shl 16)+(R3 Shl 32)+(R4 Shl 48):XQ+=1:*XQ=R5+(R6 Shl 16)+(R7 Shl 32)+(R8 Shl 48):XQ+=1:Next:Loop While 0:

'NOW 64 BIT PTR 
'MAKE MANUAL PPAT PATTERNS, 3*3*3BPP=512 OF U64 PTR, BASE PCLIM, PPLIM MORE,PMLIM EVENMORE
#Define LUMH(BITS) X=H:BB=PPATR+(BITS Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next:
#Define LUML(BITS) X=L:BB=PPATR+(BITS Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next:
Do:Dim As ULong W,C,T:Dim As ULongInt V,Z1,Z2:Dim As UByte Ptr B,PT:Dim As UShort Ptr BB:
'Dim As UByte X,L,H:
Dim As ULongInt Ptr P,X,L,H:
'PREPAPE ALL 512 PATTERNS AS NORMAL LUMA SHINER
'L=1:H=2:For W=0 To 511:*(PPAT+W)=0:Next:
H=PMLIM:L=PPLIM:For W=0 To 511:*(PPAT+W)=PCLIM:Next:
'SETUP HAND SELECTION OF PATTERNS THAT WILL SHINE MORE OR LESS
'NEED DIFFERENT SETUPS FOR ACTUAL ONCREEN GRAPHICS
If NOPT=0 Then
LUMH(&B010101010):LUMH(&B110101010):LUMH(&B111101010):LUMH(&B010101001):LUMH(&B010001100):
' LUML(&B000101010):LUML(&B010101101):LUML(&B100000000):LUML(&B000010000)
LUML(&B000101000):LUML(&B101000101):LUML(&B101000100):LUML(&B111001100):
LUML(&B101000010):LUML(&B101000111):LUML(&B000100111):LUML(&B010000010):
LUML(&B010000001):LUML(&B101001010):LUML(&B111101000):LUML(&B111101111):
LUML(&B011101111):LUML(&B011101110):LUML(&B010101111):
Else EndIf:Loop While 0

'PUNF NOW 16BIT NOW 13-L-C-R 1+8+1 LUT, ALSO MIRRER BYTELY
'PREPARE 10BIT STROKES AS 8BYTE STROKES OF L/*/R - PUNF(TRI-PIX UNFOLDER) 'NO SPEED CRITICAL
'NOW LUT 1+8+1 TO CONTAINS TRAILING BITS 'UNMIRROR HERE 7TH BIT>0TH BYTE
Do:Dim As ULong C1,BB,B9,B8,B7,B6,B5,B4,B3,B2,B1,B0,R9,R8,R7,R6,R5,R4,R3,R2,R1,R0:Dim As UByte Ptr X1:X1=PUNF:For C1=0 To 1023:BB=C1:
B0=BB And 1:BB Shr=1:B1=BB And 1:BB Shr=1:B2=BB And 1:BB Shr=1:B3=BB And 1:BB Shr=1:B4=BB And 1:BB Shr=1:
B5=BB And 1:BB Shr=1:B6=BB And 1:BB Shr=1:B7=BB And 1:BB Shr=1:B8=BB And 1:BB Shr=1:B9=BB And 1:
*(X1+14)=((B1 Shl 1)+(B0 Shl 2)+(B2 Shl 0)):*(X1+12)=((B2 Shl 1)+(B1 Shl 2)+(B3 Shl 0)):*(X1+10)=((B3 Shl 1)+(B2 Shl 2)+(B4 Shl 0)):
*(X1+ 8)=((B4 Shl 1)+(B3 Shl 2)+(B5 Shl 0)):*(X1+ 6)=((B5 Shl 1)+(B4 Shl 2)+(B6 Shl 0)):*(X1+ 4)=((B6 Shl 1)+(B5 Shl 2)+(B7 Shl 0)):
*(X1+ 2)=((B7 Shl 1)+(B6 Shl 2)+(B8 Shl 0)):*(X1+ 0)=((B8 Shl 1)+(B7 Shl 2)+(B9 Shl 0)):X1+=16:Next:
'X1=MIRR:For C1=0 To 255:BB=C1:B0=(BB Shr 7) And 1:B1=(BB Shr 5) And 2:B2=(BB Shr 3) And 4:B3=(BB Shr 1) And 8:
'B4=(BB Shl 1) And 16:B5=(BB Shl 3) And 32:B6=(BB Shl 5) And 64:B7=(BB Shl 7) And 128:*X1=B0+B1+B2+B3+B4+B5+B6+B7:X1+=1:Next:
Loop While 0:

LUTPRESENT:

#Macro REPBTB ASMGO;
' - - - - - 
' LINEARIZE 6144 TO PLIN, ATTRIZE TO PLAN, QPXIZE AS 4BPP
' NOW 840K,845K,837K,821K,819K,776K,748K,5.9M, 5.3M, 15M, 21.9M FPS - - - - - - 
MOVZX R13,WORD Ptr PBASE;Add R13,PMEM;LEA R14,[R13+6144];MOV RSI,PLIN;
MOV R12,PLAN;MOV RDI,PQPX;Add RDI,18*8*2;Add RDI,1;Xor RAX,RAX;Xor RBX,RBX;Xor RCX,RCX;Xor RDX,RDX;MOV R11,PQPL;
MOV R15B,3;.VVTERT:Shl R15,8;MOV R15B,8;.VVVLY:
PMOVZXBW XMM6,[R14];PSLLW XMM6,8;PMOVZXBW XMM7,[R14+8];PSLLW XMM7,8;PMOVZXBW XMM8,[R14+16];PSLLW XMM8,8;PMOVZXBW XMM9,[R14+24];PSLLW XMM9,8;Add R14,32;
Shl R15,8;MOV R15B,8;.VVVLA:
PMOVZXBW XMM3,[R13+8];PMOVZXBW XMM5,[R13+24];MOVUPS XMM0,[R13];MOVUPS XMM1,[R13+16];
PMOVZXBW XMM2,XMM0;PMOVZXBW XMM4,XMM1;POR XMM2,XMM6;POR XMM3,XMM7;MOVUPS [RSI],XMM0;MOVUPS [RSI+16],XMM1;POR XMM4,XMM8;POR XMM5,XMM9;
PEXTRW RAX,XMM2,1;          MOV EAX,[R11+RAX*4];Shl RAX,32;
PEXTRW RBX,XMM2,0;          MOV EBX,[R11+RBX*4];Or  RAX,RBX;MOV [RDI   ],RAX;
PEXTRW RAX,XMM2,3;          MOV EAX,[R11+RAX*4];Shl RAX,32;
PEXTRW RBX,XMM2,2;          MOV EBX,[R11+RBX*4];Or  RAX,RBX;MOV [RDI+8 ],RAX;
PEXTRW RAX,XMM2,5;          MOV EAX,[R11+RAX*4];Shl RAX,32;
PEXTRW RBX,XMM2,4;          MOV EBX,[R11+RBX*4];Or  RAX,RBX;MOV [RDI+16],RAX;
PEXTRW RAX,XMM2,7;          MOV EAX,[R11+RAX*4];Shl RAX,32;
PEXTRW RBX,XMM2,6;          MOV EBX,[R11+RBX*4];Or  RAX,RBX;MOV [RDI+24],RAX;
MOVUPS [R12],XMM3;
PEXTRW RAX,XMM3,1;          MOV EAX,[R11+RAX*4];Shl RAX,32;
MOVZX  RBX,WORD Ptr[R12   ];MOV EBX,[R11+RBX*4];Or  RAX,RBX;MOV [RDI+32],RAX;
PEXTRW RAX,XMM3,3;          MOV EAX,[R11+RAX*4];Shl RAX,32;
MOVZX  RBX,WORD Ptr[R12+4 ];MOV EBX,[R11+RBX*4];Or  RAX,RBX;MOV [RDI+40],RAX;
PEXTRW RAX,XMM3,5;          MOV EAX,[R11+RAX*4];Shl RAX,32;
MOVZX  RBX,WORD Ptr[R12+8 ];MOV EBX,[R11+RBX*4];Or  RAX,RBX;MOV [RDI+48],RAX;
PEXTRW RAX,XMM3,7;          MOV EAX,[R11+RAX*4];Shl RAX,32;
MOVZX  RBX,WORD Ptr[R12+12];MOV EBX,[R11+RBX*4];Or  RAX,RBX;MOV [RDI+56],RAX;
MOVUPS [R12],XMM4;
PEXTRW RAX,XMM4,1;          MOV EAX,[R11+RAX*4];Shl RAX,32;
MOVZX  RBX,WORD Ptr[R12   ];MOV EBX,[R11+RBX*4];Or  RAX,RBX;MOV [RDI+64],RAX;
PEXTRW RAX,XMM4,3;          MOV EAX,[R11+RAX*4];Shl RAX,32;
MOVZX  RBX,WORD Ptr[R12+4 ];MOV EBX,[R11+RBX*4];Or  RAX,RBX;MOV [RDI+72],RAX;
PEXTRW RAX,XMM4,5;          MOV EAX,[R11+RAX*4];Shl RAX,32;
MOVZX  RBX,WORD Ptr[R12+8 ];MOV EBX,[R11+RBX*4];Or  RAX,RBX;MOV [RDI+80],RAX;
PEXTRW RAX,XMM4,7;          MOV EAX,[R11+RAX*4];Shl RAX,32;
MOVZX  RBX,WORD Ptr[R12+12];MOV EBX,[R11+RBX*4];Or  RAX,RBX;MOV [RDI+88],RAX;
MOVUPS [R12],XMM5;
PEXTRW RAX,XMM5,1;          MOV EAX,[R11+RAX*4];Shl RAX,32;
MOVZX  RBX,WORD Ptr[R12   ];MOV EBX,[R11+RBX*4];Or  RAX,RBX;MOV [RDI+96],RAX;
PEXTRW RAX,XMM5,3;          MOV EAX,[R11+RAX*4];Shl RAX,32;
MOVZX  RBX,WORD Ptr[R12+4 ];MOV EBX,[R11+RBX*4];Or  RAX,RBX;MOV [RDI+104],RAX;
PEXTRW RAX,XMM5,5;          MOV EAX,[R11+RAX*4];Shl RAX,32;
MOVZX  RBX,WORD Ptr[R12+8 ];MOV EBX,[R11+RBX*4];Or  RAX,RBX;MOV [RDI+112],RAX;
PEXTRW RAX,XMM5,7;          MOV EAX,[R11+RAX*4];Shl RAX,32;
MOVZX  RBX,WORD Ptr[R12+12];MOV EBX,[R11+RBX*4];Or  RAX,RBX;MOV [RDI+120],RAX;Add RDI,128+16;
Add RSI,32;Add R13,256;DEC R15B;JNZ .VVVLA;Shr R15,8;Sub R13,2048-32;DEC R15B;JNZ .VVVLY;Shr R15,8;Add R13,2048-256;DEC R15B;JNZ .VVTERT;
' - - - - - -
'BITS TO SURRS TO PACKS  - SCREEN NOW 16BIT 256/1+192+1 3x3 SEEK
'NOW 206K,228K,223K,205K,184K,194K,175K,198K 'NOW 402K,390K,372K,328K,546K,349K,352K, REPACK 6144 AS PBTB 256*(1+192+1)*13+1+1+1BIT VIA PUNF 1+4+1  
MOV RSI,PBTB;PXOR XMM0,XMM0;MOV R15B,8;.LLCLN:MOVUPS [RSI],XMM0;MOVUPS [RSI+16],XMM0;MOVUPS [RSI+32],XMM0;MOVUPS [RSI+48],XMM0;Add RSI,64;DEC R15B;JNZ .LLCLN;
MOV R14,PLIN;MOV RDI,PUNF;MOV R12,&H3FF0;MOV R15B,192;.LLVLY:
Xor RBX,RBX;MOV BL,[R14];Shl R15,8;MOV R15B,7;.LLVLX:
Shl RBX,8;MOV BL,[R14+1];MOV RAX,RBX;Shr RAX,3;And RAX,R12;MOVUPD XMM0,[RDI+RAX];MOVUPD [RSI   ],XMM0;
Shl RBX,8;MOV BL,[R14+2];MOV RAX,RBX;Shr RAX,3;And RAX,R12;MOVUPD XMM0,[RDI+RAX];MOVUPD [RSI+16],XMM0;
Shl RBX,8;MOV BL,[R14+3];MOV RAX,RBX;Shr RAX,3;And RAX,R12;MOVUPD XMM0,[RDI+RAX];MOVUPD [RSI+32],XMM0;
Shl RBX,8;MOV BL,[R14+4];MOV RAX,RBX;Shr RAX,3;And RAX,R12;MOVUPD XMM0,[RDI+RAX];MOVUPD [RSI+48],XMM0;
Add R14,4;Add RSI,64;DEC R15B;JNZ .LLVLX;Shr R15,8;
Shl RBX,8;MOV BL,[R14+1];MOV RAX,RBX;Shr RAX,3;And RAX,R12;MOVUPD XMM0,[RDI+RAX];MOVUPD [RSI   ],XMM0;
Shl RBX,8;MOV BL,[R14+2];MOV RAX,RBX;Shr RAX,3;And RAX,R12;MOVUPD XMM0,[RDI+RAX];MOVUPD [RSI+16],XMM0;
Shl RBX,8;MOV BL,[R14+3];MOV RAX,RBX;Shr RAX,3;And RAX,R12;MOVUPD XMM0,[RDI+RAX];MOVUPD [RSI+32],XMM0;
Shl RBX,8;              ;MOV RAX,RBX;Shr RAX,3;And RAX,R12;MOVUPD XMM0,[RDI+RAX];MOVUPD [RSI+48],XMM0;
Add R14,4;Add RSI,64;DEC R15B;JNZ .LLVLY;
MOV RSI,PBTB;MOV R15B,48;.NNVLY:;Shl R15,8;MOV R15B,32;.NNVLX:
MOVUPS XMM0,[RSI     ];PSLLW XMM0,6;
MOVUPS XMM1,[RSI+512 ];PSLLW XMM1,3;POR XMM0,XMM1;
MOVUPS XMM2,[RSI+1024];POR XMM0,XMM2;                                        MOVUPS [RSI],XMM0;
MOVUPS XMM3,[RSI+1536];POR XMM1,XMM2;PSLLW XMM1,3;POR XMM1,XMM3;             MOVUPS [RSI+512],XMM1;
MOVUPS XMM4,[RSI+2048];PSLLW XMM2,3;POR XMM2,XMM3;PSLLW XMM2,3;POR XMM2,XMM4;MOVUPS [RSI+1024],XMM2;
MOVUPS XMM5,[RSI+2560];PSLLW XMM3,3;POR XMM3,XMM4;PSLLW XMM3,3;POR XMM3,XMM5;MOVUPS [RSI+1536],XMM3;
Add RSI,16;DEC R15B;JNZ .NNVLX;Sub RSI,512;Add RSI,2048;Shr R15,8;DEC R15B;JNZ .NNVLY;
' - - - - - 
'PBTB>PBLR PATTERN TO POINTER,SCREEN IS 256x192x5-3-3-3 READY
'NOW 70.9K,70.6K,70.5K,70.4K,68.7K,73KC,75.9K,75.6K,75K,74.7K,74K,70K,19.5K FPS 
MOV RAX,PPAT;MOV R15,64;.LLHEAT:MOVUPS XMM0,[RAX];MOVUPS XMM1,[RAX+16];MOVUPS XMM2,[RAX+32];MOVUPS XMM3,[RAX+48];Add RAX,64;DEC R15;JNZ .LLHEAT
MOV RSI,PPAT;MOV RDI,PBTB;MOV R14,PBLR;MOV R15,3072;.LLPIX:
MOV R8,[RDI];MOV R9,[RDI+8];MOV R10,[RDI+16];MOV R11,[RDI+24];Add RDI,32;
MOVZX RAX,R8W ;MOV EBX,[RSI+RAX*8];Shr R8,16; MOV [R14    ],EBX;
MOVZX RAX,R9W ;MOV EBX,[RSI+RAX*8];Shr R9,16; MOV [R14+16 ],EBX;
MOVZX RAX,R10W;MOV EBX,[RSI+RAX*8];Shr R10,16;MOV [R14+32 ],EBX;
MOVZX RAX,R11W;MOV EBX,[RSI+RAX*8];Shr R11,16;MOV [R14+48 ],EBX;
MOVZX RAX,R8W ;MOV EBX,[RSI+RAX*8];Shr R8,16; MOV [R14+4  ],EBX;
MOVZX RAX,R9W ;MOV EBX,[RSI+RAX*8];Shr R9,16; MOV [R14+20 ],EBX;
MOVZX RAX,R10W;MOV EBX,[RSI+RAX*8];Shr R10,16;MOV [R14+36 ],EBX;
MOVZX RAX,R11W;MOV EBX,[RSI+RAX*8];Shr R11,16;MOV [R14+52 ],EBX;
MOVZX RAX,R8W ;MOV EBX,[RSI+RAX*8];Shr R8,16; MOV [R14+8  ],EBX;
MOVZX RAX,R9W ;MOV EBX,[RSI+RAX*8];Shr R9,16; MOV [R14+24 ],EBX;
MOVZX RAX,R10W;MOV EBX,[RSI+RAX*8];Shr R10,16;MOV [R14+40 ],EBX;
MOVZX RAX,R11W;MOV EBX,[RSI+RAX*8];Shr R11,16;MOV [R14+56 ],EBX;
                         ;MOV EBX,[RSI+R8*8 ];MOV [R14+12 ],EBX;
                         ;MOV EBX,[RSI+R9*8 ];MOV [R14+28 ],EBX;
                         ;MOV EBX,[RSI+R10*8];MOV [R14+44 ],EBX;
                         ;MOV EBX,[RSI+R11*8];MOV [R14+60 ],EBX;
Add R14,64 ;DEC R15;JNZ .LLPIX;
.LLEND:
ADONE:#EndMacro

'T3=32:T4=0:Do:TM1=Timer:T2=30000:T1=T2:Do

'T1-=1:Loop While T1:TM2=Timer:TM3=T2/(TM2-TM1):T4+=TM3:Print TM1,TM2,TM2-TM1,T2,TM3,T4/(33-T3):T3-=1:Loop While T3:Sleep


Do:Dim As ULongInt UF,V0,V1,V2,V3,V4,V5,V6,V7,V8,V9,TT,E1,E2,E3,E4
ASMGO
MOV R8,&H1122334455667788;MOV V1,R8;
MOV RAX,R8;ROR RAX,20;Add EAX,&HFF;
MOV V2,RAX;
ADONE
'Print Hex(V1,16)
'Print Hex(V2,16)
'Sleep
Loop While 0

#Macro SHINE
'PERFORM 5*5 SHINE ADDITION TO EACH PIXEL WITH LUMA REDUCTIONS
'NOW 6.3K,6.9K,6.8K,6.6K,5.8K,5.7K,5.5K,5K FPS
Do:
'Dim As UShort Ptr PSEL:Dim As ULongInt UF,V0,V1,V2,V3,V4,V5,V6,V7,V8,V9,TT,E1,E2,E3,E4
Const As ULongInt M1FFF=&H1FFF1FFF1FFF,MF=&H0F,MFFF=&HFFF,MFFFL=&HFFF000000,MF0FL=&HF0F000,M1FFF=&H1FFF1FFF1FFF
Dim As ULongInt Z0,Z1,Z2,Z3,Z4,Z5,Z6,Z7,Z8,Z9
Dim As ULongInt Ptr UB1,Q2,Q3:Dim As ULong Ptr Q1:Dim As ULong VLA,VLX,VLY,HOR,SA,SB,SC,SD,RY

ASMGO;

'NOW 11.3K,11K FPS
MOV RDI,PQPX;MOV RSI,PBTB;

MOV RY,48;.WWRY:;

MOV R8 ,[RDI      ];MOV R9 ,[RDI+18*8 ];MOV R10,[RDI+36*8 ];MOV R11,[RDI+54*8 ];
MOV R12,[RDI+72*8 ];MOV R13,[RDI+90*8 ];MOV R14,[RDI+108*8];MOV R15,[RDI+126*8];Add RDI,8;

MOV HOR,32;.WWHOR:;
MOV VLA,8;.WWREP:

MOV EBX,R8D;ROR RBX,20;MOV EAX,R12D;And EAX,&HFFFFF;ROR RAX,40;Or RBX,RAX;Shr R8,4;
MOV ECX,R9D;ROR CX,4;ROR RCX,12;MOV BL,CL;MOV RAX,R11;ROR AX,4;MOV CX,AX;ROR RCX,12;ROR RAX,12;MOV BH,AL;ROR RBX,16;
MOV EAX,R10D;ROR AH,4;ROR AX,4;MOV CX,AX;ROR RCX,12;Shr RCX,28;Shr RAX,12;MOV BL,AL;MOV [RSI],RBX;MOV [RSI+8],RCX;

MOV EBX,R9D;ROR RBX,20;MOV EAX,R13D;And EAX,&HFFFFF;ROR RAX,40;Or RBX,RAX;Shr R9,4;
MOV ECX,R10D;ROR CX,4;ROR RCX,12;MOV BL,CL;MOV RAX,R12;ROR AX,4;MOV CX,AX;ROR RCX,12;ROR RAX,12;MOV BH,AL;ROR RBX,16;
MOV EAX,R11D;ROR AH,4;ROR AX,4;MOV CX,AX;ROR RCX,12;Shr RCX,28;Shr RAX,12;MOV BL,AL;MOV [RSI+4096],RBX;MOV [RSI+4104],RCX;

MOV EBX,R10D;ROR RBX,20;MOV EAX,R14D;And EAX,&HFFFFF;ROR RAX,40;Or RBX,RAX;Shr R10,4;
MOV ECX,R11D;ROR CX,4;ROR RCX,12;MOV BL,CL;MOV RAX,R13;ROR AX,4;MOV CX,AX;ROR RCX,12;ROR RAX,12;MOV BH,AL;ROR RBX,16;
MOV EAX,R12D;ROR AH,4;ROR AX,4;MOV CX,AX;ROR RCX,12;Shr RCX,28;Shr RAX,12;MOV BL,AL;MOV [RSI+8192],RBX;MOV [RSI+8200],RCX;

MOV EBX,R11D;ROR RBX,20;MOV EAX,R15D;And EAX,&HFFFFF;ROR RAX,40;Or RBX,RAX;Shr R11,4;
MOV ECX,R12D;ROR CX,4;ROR RCX,12;MOV BL,CL;MOV RAX,R14;ROR AX,4;MOV CX,AX;ROR RCX,12;ROR RAX,12;MOV BH,AL;ROR RBX,16;
MOV EAX,R13D;ROR AH,4;ROR AX,4;MOV CX,AX;ROR RCX,12;Shr RCX,28;Shr RAX,12;MOV BL,AL;MOV [RSI+12288],RBX;MOV [RSI+12296],RCX;ADD RSI,16;

Shr R12,4;Shr R13,4;Shr R14,4;Shr R15,4;

DEC VLA;JNZ .WWREP;

MOV EAX,[RDI      ];ROR RAX,32;Add R8 ,RAX;
MOV EAX,[RDI+18*8 ];ROR RAX,32;Add R9 ,RAX;
MOV EAX,[RDI+36*8 ];ROR RAX,32;Add R10,RAX;
MOV EAX,[RDI+54*8 ];ROR RAX,32;Add R11,RAX;
MOV EAX,[RDI+72*8 ];ROR RAX,32;Add R12,RAX;
MOV EAX,[RDI+90*8 ];ROR RAX,32;Add R13,RAX;
MOV EAX,[RDI+108*8];ROR RAX,32;Add R14,RAX;
MOV EAX,[RDI+126*8];ROR RAX,32;Add R15,RAX;Add RDI,4;

DEC HOR;JNZ .WWHOR;

Sub RDI,32*4;Sub RDI,8;Add RDI,18*8*4;

Sub RSI,256*16;Add RSI,256*16*4;

DEC RY;JNZ .WWRY;

'MOV RAX,RSI;Sub RAX,PBTB;MOV F1,RAX;
'MOV RAX,RDI;Sub RAX,PQPX;MOV F2,RAX;

'JP .WWEND;

'- - - LUTTER
'NOW 5.6K FPS
'FULL 5.2K FPS
MOV R13,PPTOC
MOV R14,PBLR; 
MOV R15,PBTB;
MOV RSI,PPQM;
MOV RDI,PPQMD;
MOV R12,PSS;'Add R12,8*4;'R12=Q1=PSS+(8+RY*256):

MOV R8,49152;
.QQPIX:;  

MOV RBX,[R15];MOVZX RAX,BX;MOV RDX,[RDI+RAX*8];Shr RBX,16;MOVZX RAX,BX;Add RDX,[RDI+RAX*8];Shr RBX,16;MOVZX RAX,BX;Add RDX,[RDI+RAX*8];Shr RBX,16;Add RDX,[RDI+RBX*8];
MOV RBX,[R15+8];MOVZX RAX,BX;Add RDX,[RSI+RAX*8];Shr RBX,16;MOVZX RAX,BX;Add RDX,[RSI+RAX*8];Shr RBX,16;Add RDX,[R13+RBX*8];
MOV EAX,[R14];MOVZX RBX,DX;Shr RDX,16;MOVZX RCX,Byte Ptr[RAX+RBX*2];ROR RCX,8;
MOV BX,DX;Shr RDX,16;MOV CL,[RAX+RBX*2];ROR RCX,8;MOV CL,[RAX+RDX*2];ROL RCX,16;MOV [R12],ECX;Add R12,4;Add R15,16;Add R14,4;


DEC R8;JNZ .QQPIX;

.WWEND:


ADONE:
Loop While 0

#EndMacro
REPBTB
SHINE





#Macro SCALE
Do ' SCALER DIRECT TO SCREENPTR X1,X2,X3,X4 SCALERS WITH COORDS ALLOWED, RGBA OUTPUT
Dim As ULong X,Y,OF,LOF2,W2
Dim As Byte Ptr PA,PB,PC,PD
Dim As ULong Ptr P1,S1,S2,S3
Dim As ULongInt W1
Dim As ULongInt Ptr P2,P3,P4,P5

ScreenLock():
P1=PSS'+8' ACTUAL SCREEN START U64, ACTUAL 256*192*32 +8 QUIRK
OF=(POSY*SCRX+POSX)Shl 2:PA=ScreenPtr()+OF' MOVE BASE PTR WITH COORDS
If SCMUL=1 Then GoTo SCALE256
If SCMUL=2 Then GoTo SCALE512
If SCMUL=3 Then GoTo SCALE768
If SCMUL=4 Then GoTo SCALE1024

SCALE256:' NONSCALED OUTPUT WORKS
P2=P2:For Y=0 To 191:P2=PA:For X=0 To 255 Step 2
W1=*P1 Or(*(P1+1) Shl 32):P1+=2:*P2=W1:P2+=1:Next:PA+=SCRX Shl 2:Next:GoTo SCALEDONE' PACK 2 RGBA TO U64 AND WRITE

SCALE512:' DOUBLE PIXEL OUTPUT WORKS
LOF2=SCRX*8:PB=PA+(SCRX Shl 2):For Y=0 To 191:' MAKE SHIFTED POINTERS TO NEXT LINE
P2=PA:P3=PB:For X=0 To 255
W1=*P1 Or(*P1 Shl 32):P1+=1:' DUP RGBA TO U64 AND WRITE
*P2=W1:P2+=1:*P3=W1:P3+=1:Next:PA+=LOF2:PB+=LOF2:Next:GoTo SCALEDONE

SCALE768: ' TRIPLE PIXEL WORKS
LOF2=SCRX*12:PB=PA+(SCRX Shl 2):PC=PB+(SCRX Shl 2):For Y=0 To 191:
S1=PA:S2=PB:S3=PC:For X=0 To 255
W2=*P1:P1+=1:*S1=W2:*(S1+1)=W2:*(S1+2)=W2:
*S2=W2:*(S2+1)=W2:*(S2+2)=W2:*S3=W2:*(S3+1)=W2:*(S3+2)=W2:
S1+=3:S2+=3:S3+=3:Next:' STEP THEM
PA+=LOF2:PB+=LOF2:PC+=LOF2::Next:GoTo SCALEDONE

SCALE1024: ' QUAD PIXEL OUTPUT WORKS
ASMGO;
MOV RSI,PSS;
MOV R14D,SCRX;Shl R14,2;'LOF2=SCRX*16:'PB=PA+(SCRX Shl 2):'PC=PB+(SCRX Shl 2):'PD=PC+(SCRX Shl 2):
MOV R12,R14;Shl R12,2;Sub R12,4096;'QUAD STROKE STEP --=STROKE RUN
MOV R8,PA;
MOV R9,R8;Add R9,R14;
MOV R10,R9;Add R10,R14;
MOV R11,R10;Add R11,R14;

MOV R15W,192;.Y1REP:'For Y=0 To 191:
'P2=PA:'P3=PB:'P4=PC:'P5=PD:

Shl R15,16;MOV R15W,64;.X1REP:'For X=0 To 255
MOV EAX,[RSI   ];MOV EBX,EAX;ROR RAX,32;OR RAX,RBX;PINSRQ XMM0,RAX,0;PINSRQ XMM0,RAX,1;'W1=*P1 Or(*P1 Shl 32):P1+=1:
MOV EAX,[RSI+4 ];MOV EBX,EAX;ROR RAX,32;OR RAX,RBX;PINSRQ XMM1,RAX,0;PINSRQ XMM1,RAX,1;
MOV EAX,[RSI+8 ];MOV EBX,EAX;ROR RAX,32;OR RAX,RBX;PINSRQ XMM2,RAX,0;PINSRQ XMM2,RAX,1;
MOV EAX,[RSI+12];MOV EBX,EAX;ROR RAX,32;OR RAX,RBX;PINSRQ XMM3,RAX,0;PINSRQ XMM3,RAX,1;ADD RSI,16;
MOVUPS [R8 ],XMM0;MOVUPS [R8+16 ],XMM1;MOVUPS [R8+32 ],XMM2;MOVUPS [R8+48 ],XMM3;'*P2=W1:*(P2+1)=W1:*P3=W1:*(P3+1)=W1:*P4=W1:*(P4+1)=W1:*P5=W1:*(P5+1)=W1:' PASTE BY 4 PTRS WITH THEIR OFFSETS
MOVUPS [R9 ],XMM0;MOVUPS [R9+16 ],XMM1;MOVUPS [R9+32 ],XMM2;MOVUPS [R9+48 ],XMM3;
MOVUPS [R10],XMM0;MOVUPS [R10+16],XMM1;MOVUPS [R10+32],XMM2;MOVUPS [R10+48],XMM3;
MOVUPS [R11],XMM0;MOVUPS [R11+16],XMM1;MOVUPS [R11+32],XMM2;MOVUPS [R11+48],XMM3;
Add R8,64;Add R9,64;Add R10,64;Add R11,64;DEC R15W;JNZ .X1REP;Shr R15,16;

Add R8,R12;Add R9,R12;Add R10,R12;Add R11,R12;DEC R15W;JNZ .Y1REP;'P2+=2:P3+=2:P4+=2:P5+=2:Next:'PA+=LOF2:PB+=LOF2:PC+=LOF2:PD+=LOF2:'Next' STEP THEM
ADONE:

SCALEDONE:ScreenUnLock()
Loop While 0
#EndMacro

'T3=32:T4=0:Do:TM1=Timer:T2=1000:T1=T2:Do
SCALE
'T1-=1:Loop While T1:TM2=Timer:TM3=T2/(TM2-TM1):T4+=TM3:Print F1;":";F2;":";TM1;":";TM2;":";TM2-TM1;":";T2;":";TM3;":";T4/(33-T3):T3-=1:Loop While T3:Sleep


End Sub

