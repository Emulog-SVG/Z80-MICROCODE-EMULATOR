'LAST WORKING TRY REVERSE BYTE FEED ' - - - - - -
'BITS TO SURRS - SCREEN NOW 16BIT 256/1+192+1 3x3 SEEK
'NOW 546K,349K,352K, REPACK 6144 AS PBTB 256*(1+192+1)*13+1+1+1BIT VIA PUNF 1+4+1  
MOV R14,PLIN;
MOV RSI,PBTB;
MOV RDI,PUNF;
MOV R12,MIRR;

MOV R15W,192;.LLVLY:

Xor RAX,RAX;Xor RBX,RBX;
MOV BL,[R14+1];'MOV BL,[R12+RBX];
MOV CL,[R14];'MOV CL,[R12+RCX];
MOV BH,CL;Shl RBX,13;

Shl R15,8;MOV R15B,32;.LLVLX:

Or RAX,RBX;And RAX,&H3FF0;MOVUPD XMM0,[RDI+RAX];MOVUPD [RSI],XMM0;Add RSI,16;Shr RBX,8;MOV RAX,RBX;

Add R14,1;Xor RBX,RBX;
'MOV BL,[R14+1];MOV CL,[R12+RBX];
MOV CL,[R14+1];
MOV BL,[R14];'MOV BL,[R12+RBX];And CL,1;
MOV BH,CL;
Shl RBX,5;

DEC R15B;JNZ .LLVLX;Shr R15,8;

DEC R15W;JNZ .LLVLY;


JP .LLEND
' - - - - - 
'SURRS TO PACKS WRITE BACK
'NOW 198K
MOV RSI,PBTB;'B=PBTB ' IS 256*194*16BIT
MOV R8,&H01FF01FF01FF01FF;
MOV R15B,48;.NNVLY:;
Shl R15,8;MOV R15B,64;.NNVLX:
MOV RAX,[RSI     ];MOV RBX,[RSI+512 ];
MOV RCX,[RSI+1024];LEA R14,[RBX+RAX*8];LEA R14,[RCX+R14*8];MOV [RSI],R14;
MOV RDX,[RSI+1536];LEA R14,[RDX+R14*8];And R14,R8;MOV [RSI+512],R14;
MOV R12,[RSI+2048];LEA R14,[R12+R14*8];And R14,R8;MOV [RSI+1024],R14;
MOV R13,[RSI+2560];LEA R14,[R13+R14*8];And R14,R8;MOV [RSI+1536],R14;Add RSI,8;
DEC R15B;JNZ .NNVLX;Add RSI,2048-512;Shr R15,8;DEC R15B;JNZ .NNVLY;

.LLEND:
ADONE:#EndMacro

' - - - - - -
'BITS TO SURRS - SCREEN NOW 16BIT 256/1+192+1 3x3 SEEK
'NOW 546K,349K,352K, REPACK 6144 AS PBTB 256*(1+192+1)*13+1+1+1BIT VIA PUNF 1+4+1  
MOV R14,PLIN;
MOV RSI,PBTB;
MOV RDI,PUNF;
MOV R12,MIRR;

MOV R15W,192;.LLVLY:

Xor RAX,RAX;Xor RBX,RBX;MOV BL,[R14];MOV BL,[R12+RBX];Shl RBX,5;

Shl R15,8;MOV R15B,32;.LLVLX:

OR RAX,RBX;And RAX,&H3FF0;MOVUPD XMM0,[RDI+RAX];MOVUPD [RSI],XMM0;Add RSI,16;Shr RBX,8;MOV RAX,RBX;

Add R14,1;MOV BL,[R14];MOV BL,[R12+RBX];Shl RBX,5;

DEC R15B;JNZ .LLVLX;Shr R15,8;

DEC R15W;JNZ .LLVLY;




'PUNF NOW 16BIT NOW 1+8+1, 1+4+1 LUT
'PREPARE 10BIT STROKES AS 8BYTE STROKES OF L/*/R - PUNF(TRI-PIX UNFOLDER) 'NO SPEED CRITICAL
'NOW LUT 1+8+1 TO CONTAINS TRAILING BITS 'UNMIRROR HERE 7TH BIT>0TH BYTE
Do:Dim As ULong C1,BB,B9,B8,B7,B6,B5,B4,B3,B2,B1,B0,R9,R8,R7,R6,R5,R4,R3,R2,R1,R0:Dim As UByte Ptr X1:X1=PUNF:For C1=0 To 1023:BB=C1:
B0=BB And 1:BB Shr=1:B1=BB And 1:BB Shr=1:B2=BB And 1:BB Shr=1:B3=BB And 1:BB Shr=1:B4=BB And 1:BB Shr=1:
B5=BB And 1:BB Shr=1:B6=BB And 1:BB Shr=1:B7=BB And 1:BB Shr=1:B8=BB And 1:BB Shr=1:B9=BB And 1:
*(X1+ 0)=(B1 Shl 1)+(B0 Shl 2)+(B2 Shl 0):*(X1+ 2)=(B2 Shl 1)+(B1 Shl 2)+(B3 Shl 0):*(X1+ 4)=(B3 Shl 1)+(B2 Shl 2)+(B4 Shl 0):
*(X1+ 6)=(B4 Shl 1)+(B3 Shl 2)+(B5 Shl 0):*(X1+ 8)=(B5 Shl 1)+(B4 Shl 2)+(B6 Shl 0):*(X1+10)=(B6 Shl 1)+(B5 Shl 2)+(B7 Shl 0):
*(X1+12)=(B7 Shl 1)+(B6 Shl 2)+(B8 Shl 0):*(X1+14)=(B8 Shl 1)+(B7 Shl 2)+(B9 Shl 0):X1+=16:Next:

X1=MIRR:For C1=0 To 255:BB=C1:B0=(BB Shr 7) And 1:B1=(BB Shr 5) And 2:B2=(BB Shr 3) And 4:B3=(BB Shr 1) And 8:
B4=(BB Shl 1) And 16:B5=(BB Shl 3) And 32:B6=(BB Shl 5) And 64:B7=(BB Shl 7) And 128:*(X1+0)=B0+B1+B2+B3+B4+B5+B6+B7:X1+=1:Next:

Loop While 0:


'MOVZX RAX,Byte Ptr[R14  ];MOVZX RAX,[R12+RAX];Shl RAX,5;
'MOVZX RBX,Byte Ptr[R14+1];MOVZX RBX,[R12+RBX];Shl RBX,13;
'MOVZX RCX,Byte Ptr[R14+2];MOVZX RCX,[R12+RCX];Shl RCX,21;
'MOVZX RDX,Byte Ptr[R14+3];MOVZX RDX,[R12+RDX];Shl RDX,29;
'Add RAX,RBX;Add RCX,RDX;Add R13,RAX;Add R13,RCX;


'PATTERN DETECTOR AND MERGER - SCREEN NOW 16BIT 256/1+192+1 3x3 SEEK
'NOW 166235K 
'SINGLE PACKER 352K, REPACK 6144 AS PBTB 256*(1+192+1)*13+1+1+1BIT VIA PUNF 1+4+1  
'SINGLE MERGER 314K
#Macro REPBTB ASMGO;
' - - - - - - 
Xor R13,R13;MOV R13D,PBASE;Add R13,PMEM;MOV R14,PBTB;Add R14,512;MOV R12,PUNF;MOV R11,&B111111000;
MOV R15B,3;.LLTERT:Shl R15,8;MOV R15B,8;.LLVLY:Shl R15,8;MOV R15B,8;.LLVLA:
Xor R10,R10;MOV R10D,[R13];Shl R10,4;Shl R15,8;MOV R15B,8;.LLVLX:
          MOV RAX,R10;And RAX,R11;MOV RAX,[R12+RAX];MOV [R14+00],RAX;
Shr R10,4;MOV RAX,R10;And RAX,R11;MOV RAX,[R12+RAX];MOV [R14+08],RAX;
Shr R10,4;MOV RAX,R10;And RAX,R11;MOV RAX,[R12+RAX];MOV [R14+16],RAX;
Shr R10,4;MOV RAX,R10;And RAX,R11;MOV RAX,[R12+RAX];MOV [R14+24],RAX;
Shr R10,4;MOV RAX,R10;And RAX,R11;MOV RAX,[R12+RAX];MOV [R14+32],RAX;
Shr R10,4;MOV RAX,R10;And RAX,R11;MOV RAX,[R12+RAX];MOV [R14+40],RAX;
Shr R10,4;MOV RAX,R10;And RAX,R11;MOV RAX,[R12+RAX];MOV [R14+48],RAX;
Shr R10,4;MOV RAX,R10;And RAX,R11;MOV RAX,[R12+RAX];MOV [R14+56],RAX;
Add R14,64;Add R13,4;Xor RBX,RBX;MOV EBX,[R13];Shl RBX,4;Or R10,RBX;
DEC R15B;JNZ .LLVLX;Shr R15,8;Add R13,256-32;Add R14,2;DEC R15B;JNZ .LLVLA;Shr R15,8;
Sub R13,2048-32;DEC R15B;JNZ .LLVLY;Shr R15,8;Add R13,2048-256;DEC R15B;JNZ .LLTERT;
' - - - - - 
MOV RSI,PBTB;'B=PBTB ' IS 256*194*16BIT
MOV R8,&H01FF01FF01FF01FF;
MOV R15B,48;.NNVLY:;
Shl R15,8;MOV R15B,64;.NNVLX:
MOV RAX,[RSI     ];MOV RBX,[RSI+512 ];
MOV RCX,[RSI+1024];LEA R14,[RBX+RAX*8];LEA R14,[RCX+R14*8];MOV [RSI],R14;
MOV RDX,[RSI+1536];LEA R14,[RDX+R14*8];And R14,R8;MOV [RSI+512],R14;
MOV R12,[RSI+2048];LEA R14,[R12+R14*8];And R14,R8;MOV [RSI+1024],R14;
MOV R13,[RSI+2560];LEA R14,[R13+R14*8];And R14,R8;MOV [RSI+1536],R14;Add RSI,8;
DEC R15B;JNZ .NNVLX;Add RSI,2048-512;Shr R15,8;DEC R15B;JNZ .NNVLY;

ADONE:#EndMacro

'NOW 65K,65.1K,61.7K,55K,54.5K,42.4K,40K,33K,39K,44K,41K,45K,50K,27K,28K,19K,17K FPS 
'HAVE PBTB, SEEK PATTERNS, FILL PBLR WITH MATCHED PATTERN U64PTRS BY LUT PPAT
'Do:Dim As ULongInt Ptr X:Dim As ULong P1,P2,P3,P4,VLY,VLX:Dim As UByte Ptr B
#Macro REPSEEK
ASMGO;
MOV RSI,PBTB;'B=PBTB ' IS 256*194*16BIT
MOV R8,PBLR;
MOV RDI,PPAT;'LUT PATTERN TO PTR64 VALUE
'MOV R9,&H1FF;
MOV R15B,48;.NNVLY:;'For VLY=0 To 191 STEP 2

Shl R15,8;MOV R15B,64;.NNVLX:'For VLX=0 To 255 STEP 4
PUSH R15

MOV RAX,[RSI     ];Shl RAX,6;
MOV RBX,[RSI+512 ];Shl RBX,3;
MOV RCX,[RSI+1024];
MOV RDX,[RSI+1536];
MOV R13,[RSI+2048];
MOV R12,[RSI+2560];

LEA R15,[RAX+RBX];Add R15,RCX;And R15,&H1FF;MOV R10B,[RDI+R15];Shl R10,8;Shr RAX,16;Shr RBX,16;Shr RCX,16;
LEA R15,[RDX+R15*8];And R15,&H1FF;MOV R11B,[RDI+R15];Shl R11,8;Shr RDX,16;
LEA R15,[R13+R15*8];And R15,&H1FF;MOV R14B,[RDI+R15];Shl R14,8;Shr R13,16;
LEA R15,[R12+R15*8];And R15,&H1FF;MOV R9B,[RDI+R15];Shl R9,8;Shr R12,16;

LEA R15,[RAX+RBX];Add R15,RCX;And R15,&H1FF;MOV R10B,[RDI+R15];Shl R10,8;Shr RAX,16;Shr RBX,16;Shr RCX,16;
LEA R15,[RDX+R15*8];And R15,&H1FF;MOV R11B,[RDI+R15];Shl R11,8;Shr RDX,16;
LEA R15,[R13+R15*8];And R15,&H1FF;MOV R14B,[RDI+R15];Shl R14,8;Shr R13,16;
LEA R15,[R12+R15*8];And R15,&H1FF;MOV R9B,[RDI+R15];Shl R9,8;Shr R12,16;

LEA R15,[RAX+RBX];Add R15,RCX;And R15,&H1FF;MOV R10B,[RDI+R15];Shl R10,8;Shr RAX,16;Shr RBX,16;Shr RCX,16;
LEA R15,[RDX+R15*8];And R15,&H1FF;MOV R11B,[RDI+R15];Shl R11,8;Shr RDX,16;
LEA R15,[R13+R15*8];And R15,&H1FF;MOV R14B,[RDI+R15];Shl R14,8;Shr R13,16;
LEA R15,[R12+R15*8];And R15,&H1FF;MOV R9B,[RDI+R15];Shl R9,8;Shr R12,16;

LEA R15,[RAX+RBX];Add R15,RCX;And R15,&H1FF;MOV R10B,[RDI+R15];MOV [R8],R10D;
LEA R15,[RDX+R15*8];And R15,&H1FF;MOV R11B,[RDI+R15];MOV [R8+256],R11D;
LEA R15,[R13+R15*8];And R15,&H1FF;MOV R14B,[RDI+R15];MOV [R8+512],R14D;
LEA R15,[R12+R15*8];And R15,&H1FF;MOV R9B,[RDI+R15];MOV [R8+768],R9D;

Add RSI,8;Add R8,4;

POP R15
DEC R15B;JNZ .NNVLX;

'Sub RSI,512;
Add RSI,2048-512;
'Sub R8,256;
Add R8,1024-256;

Shr R15,8;DEC R15B;JNZ .NNVLY;'Next:Loop While 0
ADONE:
#EndMacro


'44K VERTICALLY
ASMGO;
MOV RSI,PBTB;'B=PBTB ' IS 256*194*16BIT
MOV RDI,PBLR;'X=PBLR ' IS 256*192*8BIT
MOV R14,PPAT;'LUT PATTERN TO PTR64 VALUE
MOV R13,&H01FF

MOV R15B,64;.NNVLY:;'For VLX=0 To 255 STEP 4

MOV R8D,[RSI];MOV R9D,[RSI+512];
MOVZX RAX,R8B;Shl RAX,3;Add AL,R9B;Shr R8,8;Shr R9,8;
MOVZX RBX,R8B;Shl RBX,3;Add BL,R9B;Shr R8,8;Shr R9,8;
MOVZX RCX,R8B;Shl RCX,3;Add CL,R9B;Shr R8,8;Shr R9,8;
MOVZX RDX,R8B;Shl RDX,3;Add DL,R9B;Add RSI,512;

Shl R15,8;MOV R15B,192;.NNVLX:'For VLY=0 To 191

Add RSI,512;MOV R9D,[RSI];
Shl RAX,3;Add AL,R9B;And RAX,R13;MOV R8B,[R14+RAX];Shl R8,8;Shr R9,8;
Shl RBX,3;Add BL,R9B;And RBX,R13;MOV R8B,[R14+RBX];Shl R8,8;Shr R9,8;
Shl RCX,3;Add CL,R9B;And RCX,R13;MOV R8B,[R14+RCX];Shl R8,8;Shr R9,8;
Shl RDX,3;Add DL,R9B;And RDX,R13;MOV R8B,[R14+RDX];MOV [RDI],R8D;Add RDI,256;

DEC R15B;JNZ .NNVLX;
Sub RDI,49152+4;'GET VERT BACK AND GO RIGHT ++4 
Sub RSI,98304+4;

Shr R15,8;DEC R15B;JNZ .NNVLY;'Next:Loop While 0
ADONE:

Xor RAX,RAX;MOV AL,[R11    ];Shl RAX,9;
Xor RBX,RBX;MOV BL,[R11+258];Shl RBX,6;
Xor RCX,RCX;MOV CL,[R11+516];Shl RCX,3;'P1=*(B+1)Shl 6:P1+=*(B+259)Shl 3:P1+=*(B+517)
Or RAX,RBX;Or RAX,RCX;And AX,511;
MOV RAX,[R14+RAX];MOV [R12],RAX;'*(X+0)=*(PPAT+P1)
Add R11,1;Add R12,8;'X+=1:B+=1:


'PATTERN DETECTOR SCREEN IS 1+256+1/1+192+1 3x3 SEEK
'19500 FPS NOW
'HAVE PBTB, SEEK PATTERNS, FILL PBLR WITH MATCHED PATTERN U64PTRS BY LUT PPAT
Do:Dim As ULongInt Ptr X
Dim As ULong P1,P2,P3,P4,VLY,VLX
Dim As UByte Ptr B
X=PBLR ' IS 256*192*8 U64
B=PBTB ' IS 258*194 
*X=PCLIM:X+=1
*X=PCLIM:X+=1
DUM:For VLY=0 To 191
DUM:For VLX=0 To 63 ' PERFORM SINGLE LINE
P1=(*(B+0)Shl 8)+(*(B+1)Shl 7)+(*(B+2)Shl 6)' GET ALL CLOSE
P2=(*(B+1)Shl 8)+(*(B+2)Shl 7)+(*(B+3)Shl 6)
P3=(*(B+2)Shl 8)+(*(B+3)Shl 7)+(*(B+4)Shl 6)
P4=(*(B+3)Shl 8)+(*(B+4)Shl 7)+(*(B+5)Shl 6)
P1+=(*(B+258)Shl 5)+(*(B+259)Shl 4)+(*(B+260)Shl 3)' GET ALL MIDS
P2+=(*(B+259)Shl 5)+(*(B+260)Shl 4)+(*(B+261)Shl 3)
P3+=(*(B+260)Shl 5)+(*(B+261)Shl 4)+(*(B+262)Shl 3)
P4+=(*(B+261)Shl 5)+(*(B+262)Shl 4)+(*(B+263)Shl 3)
P1+=(*(B+516)Shl 2)+(*(B+517)Shl 1)+*(B+518)' GET ALL FAR
P2+=(*(B+517)Shl 2)+(*(B+518)Shl 1)+*(B+519)
P3+=(*(B+518)Shl 2)+(*(B+519)Shl 1)+*(B+520)
P4+=(*(B+519)Shl 2)+(*(B+520)Shl 1)+*(B+521)
' WRITE INSTEAD OF PCLIM U64 PTRS
*(X+0)=*(PPAT+P1)
*(X+1)=*(PPAT+P2)
*(X+2)=*(PPAT+P3)
*(X+3)=*(PPAT+P4)
X+=4:B+=4:Next:B+=2:Next
Loop While 0



'REPACK 6144 TO LINEAR FORM TO LINEAR TO PBTB (1+256+1)*(1+192+1)*8BPP AS 0/1 BYTELY FOR 3*3 PATTERN ANALYZER VIA PUNF
Do 
Dim As ULongInt Ptr XQ1,XQ2,XQ3
Dim As ULongInt Q
Dim As ULong TERT,VLY,VLA,VLX,C1,C2
Dim As UByte Ptr BB1,BB2
BB2=PBTB+256+1:
For TERT=0 To 6143 Step 2048:
For VLY=0 To 255 Step 32:
For VLA=0 To 2047 Step 256:
BB1=PMEM+PBASE+TERT+VLY+VLA:
XQ2=BB2:BB2+=258:
For VLX=0 To 31 Step 8
XQ3=BB1:BB1+=8:Q=*XQ3

C1=(Q And &HFF)Shl 3:Q Shr=8:XQ1=PUNF+C1:*XQ2=*XQ1:XQ2+=1:
C1=(Q And &HFF)Shl 3:Q Shr=8:XQ1=PUNF+C1:*XQ2=*XQ1:XQ2+=1:
C1=(Q And &HFF)Shl 3:Q Shr=8:XQ1=PUNF+C1:*XQ2=*XQ1:XQ2+=1:
C1=(Q And &HFF)Shl 3:Q Shr=8:XQ1=PUNF+C1:*XQ2=*XQ1:XQ2+=1:
C1=(Q And &HFF)Shl 3:Q Shr=8:XQ1=PUNF+C1:*XQ2=*XQ1:XQ2+=1:
C1=(Q And &HFF)Shl 3:Q Shr=8:XQ1=PUNF+C1:*XQ2=*XQ1:XQ2+=1:
C1=(Q And &HFF)Shl 3:Q Shr=8:XQ1=PUNF+C1:*XQ2=*XQ1:XQ2+=1:
C1=(Q And &HFF)Shl 3:Q Shr=8:XQ1=PUNF+C1:*XQ2=*XQ1:XQ2+=1:
Next:
Next:
Next:
Next:Loop While 0

'REPACK 6144 TO PBTB (1+256+1)*(1+192+1)*8BPP AS 0/1 BYTELY FOR 3*3 PATTERN ANALYZER VIA PUNF
ASMGO;MOV CL,8;
MOV R8,PBTB;Add R8,257;'R8=BB2 'BB2=PBTB+256+1:
MOV R9D,PBASE;Add r9,PMEM;'R9=BB1

MOV R10,3;'R10=TERT COUNTER 'For TERT=0 To 6143 Step 2048:
.LLTERT:
MOV R11,8'R11=VLY COUNTER 'For VLY=0 To 255 Step 32:
.LLVLY:
MOV R12,8'R12=VLA COUNTER 'For VLA=0 To 2047 Step 256:
.LLVLA:
MOV R13,32;'R13=VLX 'For VLX=0 To 31 
.LLVLX:
MOV BL,[R9];Xor RAX,RAX;
RCR BX;RCL RAX,CL;RCR BX;RCL RAX,CL;RCR BX;RCL RAX,CL;RCR BX;RCL RAX,CL;RCR BX;RCL RAX,CL;RCR BX;RCL RAX,CL;RCR BX;RCL RAX,CL;RCR BX;RCL RAX,CL;Shr RAX,7;
MOV QWORD Ptr[R8],RAX;ADD R8,8;
'REPEAT VLX
INC R9;DEC R13;JNZ .LLVLX;ADD R8,2;
'REPEAT VLA
Sub R9,32;Add R9,256;DEC R12;JNZ .LLVLA;
'REPEAT VLY
Sub R9,2048;Add R9,32;DEC R11;JNZ .LLVLY;
'REPEAT TERT
Sub R9,256;Add R9,2048;DEC R10W;JNZ .LLTERT;
ADONE:


'REPACK 6144 TO PBTB (1+256+1)*(1+192+1)*8BPP AS 0/1 BYTELY FOR 3*3 PATTERN ANALYZER VIA PUNF
ASMGO;
'MOV R14,PUNF;
MOV R13D,PBASE;Add R13,PMEM;'R9=BB1
MOV R14,PBTB;Add R14,257;'R8=BB2 'BB2=PBTB+256+1:
MOV R12,&H0101010101010101

MOV R15B,3;'R10=TERT COUNTER 'For TERT=0 To 6143 Step 2048:
.LLTERT:
Shl R15,8;MOV R15B,8;'R11=VLY COUNTER 'For VLY=0 To 255 Step 32:
.LLVLY:
Shl R15,8;MOV R15B,8;'R12=VLA COUNTER 'For VLA=0 To 2047 Step 256:
.LLVLA:
Shl R15,8;MOV R15B,8;'R13=VLX 'For VLX=0 To 31 
.LLVLX:

MOV R11D,[R13];Add R13,4;'80000
MOV R8B,R11B;Shr R11,8;
MOV R9B,R11B;Shr R11,8;
MOV R10B,R11B;Shr R11,8;

MOV AL,R8B;MOV BL,R9B;MOV CL,R10B;MOV DL,R11B;Shl RAX,8;Shl RBX,8;Shl RCX,8;Shl RDX,8;SHR R8B;SHR R9B;SHR R10B;SHR R11B;
MOV AL,R8B;MOV BL,R9B;MOV CL,R10B;MOV DL,R11B;Shl RAX,8;Shl RBX,8;Shl RCX,8;Shl RDX,8;SHR R8B;SHR R9B;SHR R10B;SHR R11B;
MOV AL,R8B;MOV BL,R9B;MOV CL,R10B;MOV DL,R11B;Shl RAX,8;Shl RBX,8;Shl RCX,8;Shl RDX,8;SHR R8B;SHR R9B;SHR R10B;SHR R11B;
MOV AL,R8B;MOV BL,R9B;MOV CL,R10B;MOV DL,R11B;Shl RAX,8;Shl RBX,8;Shl RCX,8;Shl RDX,8;SHR R8B;SHR R9B;SHR R10B;SHR R11B;
MOV AL,R8B;MOV BL,R9B;MOV CL,R10B;MOV DL,R11B;Shl RAX,8;Shl RBX,8;Shl RCX,8;Shl RDX,8;SHR R8B;SHR R9B;SHR R10B;SHR R11B;
MOV AL,R8B;MOV BL,R9B;MOV CL,R10B;MOV DL,R11B;Shl RAX,8;Shl RBX,8;Shl RCX,8;Shl RDX,8;SHR R8B;SHR R9B;SHR R10B;SHR R11B;
MOV AL,R8B;MOV BL,R9B;MOV CL,R10B;MOV DL,R11B;Shl RAX,8;Shl RBX,8;Shl RCX,8;Shl RDX,8;SHR R8B;SHR R9B;SHR R10B;SHR R11B;
MOV AL,R8B;MOV BL,R9B;MOV CL,R10B;MOV DL,R11B;Shl RAX,8;Shl RBX,8;Shl RCX,8;Shl RDX,8;SHR R8B;SHR R9B;SHR R10B;SHR R11B;

And RAX,R12;And RBX,R12;And RCX,R12;And RDX,R12;
MOV QWORD Ptr[R14],RAX;
MOV QWORD Ptr[R14+4],RBX;
MOV QWORD Ptr[R14+8],RCX;
MOV QWORD Ptr[R14+12],RDX;

Add R14,32;

'REPEAT VLX
DEC R15B;JNZ .LLVLX;Shr R15,8;
'REPEAT VLA
Add R13,256-32;Add R14,2;DEC R15B;JNZ .LLVLA;Shr R15,8;
'REPEAT VLY
Sub R13,2048-32;DEC R15B;JNZ .LLVLY;Shr R15,8;
'REPEAT TERT
Add R13,2048-256;DEC R15B;JNZ .LLTERT;
ADONE: