
' LUMIFY 5*5 6912 WITH PATTERN HIGHLIGHTS SEEK, SCALE x1,2,3,4 AT XY, NEED SCRX,SCRY,DAT AND MORE
Sub SCRSHOW(SCMUL As ULong,POSX As ULong,POSY As ULong) Static  
Dim As ULong LUTDONE=0:If LUTDONE=555 Then GoTo LUTPRESENT'LUTRENEWAL
Dim As ULong SWBW=0,NOPT=0
Dim As UByte Ptr PUNF,PLIN,PBTB
Dim As UShort Ptr PCLIM,PPLIM,PMLIM
Dim As ULongInt Ptr PPTOC,PBLR,PPQM,PQPX
Dim As ULong Ptr PQPL,PSS
Dim As ULongInt Ptr PPAT,PPATR
Do ' CREATE ARRAYS ON FIRST CALL, ARRANGE FOR CLOSER CACHING
PLIN=GETPTR(6144,32) ' 6144 BUT LINEAR FORM
PUNF=GETPTR(256*8,32) ' LUT UNFOLD 8PIX TO 0/1 BYTELY U64
PBTB=GETPTR(65536,32) ' 6144 BYTELY AS 0/1 258*194, BIT ORDER UNREVERSED
PBLR=GETPTR(256*192*8+256,32) ' U64 PTRS TO SELECT DIFFERENT LUMA REDUCTIONS
PCLIM=GETPTR(16384*2,32) ' LUT FINAL INT LUMA LIMITER TO 255,IS DIVIDED BY DIVB
PPLIM=GETPTR(16384*2,32) ' LUT PATTERN LUMA LIMITER,IS DIVIDED BY DIVC
PMLIM=GETPTR(16384*2,32) ' LUT PATTERN LESS LUMA LIMITER,IS DIVIDED BY DIVD
PPTOC=GETPTR(16*8,32) ' LUT RGB48 OF ZX COLOURS,INKS
PPQM=GETPTR(16*16*16*16*8,32) ' LUT QUAD 4BPP RGB48 SUMM,DIVIDED BY DIVA
PQPX=GETPTR(32768,32) ' PACK 6912 AS 4BPP 260*196
PQPL=GETPTR(256*2*256*4,32) ' LUT CVT ATTR/PIX(16BIT) TO 8X AS 4BPP,TO CATCH FLASHES IS 256 
PSS=GETPTR(256*192*4+4096,32) ' RENDER SCREEN 256*192*RGBA
PPAT=GETPTR(512*8,32) ' LUT DIRECT U64PTR FOR EACH SELECTED PATTERN 3*3, HIGHLIGHTERS
PPATR=GETPTR(512*8*2,32) ' LUT PATTERN BITWISE ROT AND MIRR 8*16BPP=128 BIT ENTRIES, FOR PPAT MANUAL SETTING
Loop While 0
LUTRENEWAL: 
Do ' KEYPLAYER TO APPLY SHINE PRESETS, NEED SLEEP AFTER CALL
Dim As String K,Q
GoTo NOPLAYSHINE 
K$=InKey
If K$<>"" Then Q$=InKey:Q$=InKey:Q$=InKey:Q$=InKey:Q$=InKey:
'If K=" " Then GoTo UNCYCLE
If K="Q" Then DIVA+=.5
If K="A" Then DIVA-=.5
If K="W" Then DIVB+=.1':DIVC=DIVB:DIVD=DIVB
If K="S" Then DIVB-=.1':DIVC=DIVB:DIVD=DIVB
If K="E" Then DIVC+=.1
If K="D" Then DIVC-=.1
If K="R" Then DIVD+=.1
If K="F" Then DIVD-=.1
If K="Z" Then SWBW Xor=1:DIVA=20:DIVB=3:DIVC=DIVB:DIVD=DIVB
If K="X" Then NOPT Xor=1
If K="1" Then DIVA=7:DIVB=3:DIVC=2.5:DIVD=2:SWBW=0
If K="2" Then DIVA=9:DIVB=2.2:DIVC=1.7:DIVD=1.2:SWBW=0
Locate (97,0):Print DIVA,DIVB,DIVC,DIVD,"..."
NOPLAYSHINE:
Loop While 0
Do ' MAKE LUT PPTOC*16 RGB48 FOR 4BPP,PEAK BRIGHT 255,USUAL BY BBASE 208 OR 224,DO-LOOP MAKE VARS UNSTATIC AND LOCAL
Dim As ULong T0,T1,T2,T7,T6,T8
LUTDONE=555:For T6=0 To 15:T0=0:T1=0:T2=0: 'T0-5 ARE IRGB AND PRGB,T7 BRIGHT,T8 ERGB WAS 127
If T6 And 8 Then T7=255:T8=8 Else T7=BBASE:T8=0
If T6 And  1 Then T0=T7:T8+=1
If T6 And  2 Then T1=T7:T8+=4
If T6 And  4 Then T2=T7:T8+=2
*(PPTOC+T8)=(T2 Shl 32)+(T1 Shl 16)+T0:Next
Loop While 0
Do ' MAKE LUT ATTR*PIX 16BIT TO 32BIT AS QPL(256*256)=8*4BPP 
Dim As Unsigned Long TI,PPL,DDT,SHC,CURC,RES,DX,MSK,INKC,PAPC
TI=0:For PPL=0 To 2047 Step 8:For DDT=0 To 255 ' CYCLE ATTR*8 THEN PIX
If SWBW Then CURC=7 Else CURC=PPL Shr 3:
INKC=CURC And 7:PAPC=(CURC Shr 3) And 7 ' DEFINE INK AND PAPER TO ACCUMULATE 
If CURC And 64 Then INKC+=8:PAPC+=8 ' ADD BRIGHT
If CURC And 128 Then CURC=INKC:INKC=PAPC:PAPC=CURC ' FLASH REVERSE
SHC=0:MSK=1:For DX=0 To 7' RESET SHIFTER AND MASK CYCLE 8 PIXELS
If DDT And MSK Then RES=INKC Else RES=PAPC
SHC Shr=4:SHC Or=(RES SHL 28):MSK SHL=1:Next:*(PQPL+TI)=SHC:TI+=1:Next:Next ' UPDATE SHIFT THEN WRITE
Loop While 0
Do ' MAKE PQM LUT 4BPP*4,GET 4*RGB48 SUMM REDUCED BY DIVA(CUT LUMA SURR 3*3),TO PQM(16*16*16*16)=RGB48
' IDEA IS THAT ON CRT PIXELS DO SHINE OVER THEMSELVES,AND ACTUALLY EACH HAVE SOME SHINE OF OTHER 8 AROUND IT,SO 4+4=8 OF IT
' SO EACH WILL HAVE UPMIXED COLOURS OF ITS SURROUNDING
Dim As ULong TI,ER,EG,EB,C1,C2,C3,C4:Dim As ULongInt QMX
TI=0:For C1=0 To 15:For C2=0 To 15:For C3=0 To 15:For C4=0 To 15' CYCLE ALL 4*4BIT VARIATIONS
QMX=*(PPTOC+C4)+*(PPTOC+C3)+*(PPTOC+C2)+*(PPTOC+C1)' SUMM 48BIT RGB INTO ONE QUAD SUMM OF
ER=(QMX SHR 32 And 65535)/DIVA:EG=(QMX SHR 16 And 65535)/DIVA:EB=(QMX And 65535)/DIVA' EXTRACT RGB PER 16 BIT AND DIVIDE
*(PPQM+TI)=(ER SHL 32) Or (EG SHL 16) Or EB:TI=TI+1:Next:Next:Next:Next' GET INTEGER PARTS IF DIVISION BY DIVA-CUT LUMA SURR 3*3 
Loop While 0
Do ' MAKE x3 LUTS FOR LUMA LIMITERS 16384 OF 16BIT,ACTUAL VALUES 8BIT,SMALL SIZE 16K AND USHORT INTENTIONAL 
' LUT PCLIM 16384*16BIT,FINAL INT LUMA LIMITER TO 255,DIVIDED BY DIVB
' LUT PPLIM 16384*16BIT,PATTERN LUMA LIMITER,DIVIDED BY DIVC
' LUT PMLIM 16384*16BIT,PATTERN LESS LUMA LIMITER,DIVIDED BY DIVD
Dim As ULong C1,C2,C3,C4:Dim As UShort UC1,UC2:Dim As UShort Ptr XLP,YLP,MLP
XLP=PCLIM:YLP=PPLIM:MLP=PMLIM:For UC1=0 To 16383' CYCLE ALL LIGHT LEVELS 0-16383 9*256 AND 25*256 ARE LIGHTER THAN 8BIT  
UC2=UC1/DIVB:If UC2<256 Then *(XLP)=UC2 Else *(XLP)=255
UC2=UC1/DIVC:If UC2<256 Then *(YLP)=UC2 Else *(YLP)=255
UC2=UC1/DIVD:If UC2<256 Then *(MLP)=UC2 Else *(MLP)=255
XLP+=1:YLP+=1:MLP+=1:Next
Loop While 0
Do ' MAKE LUT PPATR ROT&MIRR BITWISE PATTERNS X8 BY ONE GIVEN
Dim As ULong W,WC,P0,P1,P2,P3,P4,P5,P6,P7,P8,P9,R1,R2,R3,R4,R5,R6,R7,R8
Dim As ULong Ptr Q
Dim As ULongInt Ptr XQ
Dim As ULongInt XX
XQ=PPATR
Q=PPATR:For W=0 To 511:WC=W
' REGISTER AS 123456789 IN BITS &B876543210
P9=WC And 1:WC Shr=1:P8=WC And 1:WC Shr=1:P7=WC And 1:WC Shr=1
P6=WC And 1:WC Shr=1:P5=WC And 1:WC Shr=1:P4=WC And 1:WC Shr=1
P3=WC And 1:WC Shr=1:P2=WC And 1:WC Shr=1:P1=WC And 1
'123'456'789
R1=W
'741'852'963
R2=P7:R2 Shl=1:R2+=P4:R2 Shl=1:R2+=P1:R2 Shl=1:R2+=P8:R2 Shl=1:R2+=P5:R2 Shl=1:R2+=P2:R2 Shl=1:R2+=P9:R2 Shl=1:R2+=P6:R2 Shl=1:R2+=P3
'987'654'321
R3=P9:R3 Shl=1:R3+=P8:R3 Shl=1:R3+=P7:R3 Shl=1:R3+=P6:R3 Shl=1:R3+=P5:R3 Shl=1:R3+=P4:R3 Shl=1:R3+=P3:R3 Shl=1:R3+=P2:R3 Shl=1:R3+=P1
'369'258'147
R4=P3:R4 Shl=1:R4+=P6:R4 Shl=1:R4+=P9:R4 Shl=1:R4+=P2:R4 Shl=1:R4+=P5:R4 Shl=1:R4+=P8:R4 Shl=1:R4+=P1:R4 Shl=1:R4+=P4:R4 Shl=1:R4+=P7
'321'654'987
R5=P3:R5 Shl=1:R5+=P2:R5 Shl=1:R5+=P1:R5 Shl=1:R5+=P6:R5 Shl=1:R5+=P5:R5 Shl=1:R5+=P4:R5 Shl=1:R5+=P9:R5 Shl=1:R5+=P8:R5 Shl=1:R5+=P7
'963'852'741
R6=P9:R6 Shl=1:R6+=P6:R6 Shl=1:R6+=P3:R6 Shl=1:R6+=P8:R6 Shl=1:R6+=P5:R6 Shl=1:R6+=P2:R6 Shl=1:R6+=P7:R6 Shl=1:R6+=P4:R6 Shl=1:R6+=P1
'789'456'123
R7=P7:R7 Shl=1:R7+=P8:R7 Shl=1:R7+=P9:R7 Shl=1:R7+=P4:R7 Shl=1:R7+=P5:R7 Shl=1:R7+=P6:R7 Shl=1:R7+=P1:R7 Shl=1:R7+=P2:R7 Shl=1:R7+=P3
'147'258'369
R8=P1:R8 Shl=1:R8+=P4:R8 Shl=1:R8+=P7:R8 Shl=1:R8+=P2:R8 Shl=1:R8+=P5:R8 Shl=1:R8+=P8:R8 Shl=1:R8+=P3:R8 Shl=1:R8+=P6:R8 Shl=1:R8+=P9
'WRITE DOWN - TESTED IT DOES RIGHT
'P0=(R1 Shl 16)+R2:*Q=P0:Q+=1:P0=(R3 Shl 16)+R4:*Q=P0:Q+=1:P0=(R5 Shl 16)+R6:*Q=P0:Q+=1:P0=(R7 Shl 16)+R8:*Q=P0:Q+=1:
*XQ=R1+(R2 Shl 16)+(R3 Shl 32)+(R4 Shl 48):XQ+=1
*XQ=R5+(R6 Shl 16)+(R7 Shl 32)+(R8 Shl 48):XQ+=1
'Print Bin((R1 Shr 6),3);" ";Bin((R2 Shr 6),3);" ";Bin((R3 Shr 6),3);" ";Bin((R4 Shr 6),3);"-";Bin((R5 Shr 6),3);" ";Bin((R6 Shr 6),3);" ";Bin((R7 Shr 6),3);" ";Bin((R8 Shr 6),3);" "
'Print Bin((R1 Shr 3),3);" ";Bin((R2 Shr 3),3);" ";Bin((R3 Shr 3),3);" ";Bin((R4 Shr 3),3);"-";Bin((R5 Shr 3),3);" ";Bin((R6 Shr 3),3);" ";Bin((R7 Shr 3),3);" ";Bin((R8 Shr 3),3);" "
'Print Bin((R1 Shr 0),3);" ";Bin((R2 Shr 0),3);" ";Bin((R3 Shr 0),3);" ";Bin((R4 Shr 0),3);"-";Bin((R5 Shr 0),3);" ";Bin((R6 Shr 0),3);" ";Bin((R7 Shr 0),3);" ";Bin((R8 Shr 0),3);" "
'Print:
'XX=*(XQ-2):Print Bin(XX,64);
'XX=*(XQ-1):Print Bin(XX,64)
'Print:Sleep 
'XQ+=1
Next
Loop While 0
Do ' MAKE MANUAL PPAT PATTERNS, 3*3*3BPP=512 OF U64 PTR, BASE PCLIM, PPLIM MORE,PMLIM EVENMORE
Dim As ULong W,C,T
Dim As ULongInt Ptr X,H,L,P
Dim As ULongInt V,Z1,Z2
Dim As UByte Ptr B,PT
Dim As UShort Ptr BB
H=PMLIM:L=PPLIM:For W=0 To 511:*(PPAT+W)=PCLIM:Next
If NOPT Then GoTo NOPATTERN
X=H:BB=PPATR+(&B010101010 Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next
X=H:BB=PPATR+(&B110101010 Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next
X=H:BB=PPATR+(&B111101010 Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next
X=H:BB=PPATR+(&B010101001 Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next
X=H:BB=PPATR+(&B010001100 Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next

'X=L:BB=PPATR+(&B000101010 Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next
'X=L:BB=PPATR+(&B010101101 Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next
'X=L:BB=PPATR+(&B100000000 Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next
'X=L:BB=PPATR+(&B000010000 Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next
X=L:BB=PPATR+(&B000101000 Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next
X=L:BB=PPATR+(&B101000101 Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next
X=L:BB=PPATR+(&B101000100 Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next
X=L:BB=PPATR+(&B111001100 Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next
X=L:BB=PPATR+(&B101000010 Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next
X=L:BB=PPATR+(&B101000111 Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next
X=L:BB=PPATR+(&B000100111 Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next
X=L:BB=PPATR+(&B010000010 Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next
X=L:BB=PPATR+(&B010000001 Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next
X=L:BB=PPATR+(&B101001010 Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next
X=L:BB=PPATR+(&B111101000 Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next
X=L:BB=PPATR+(&B111101111 Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next
X=L:BB=PPATR+(&B011101111 Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next
X=L:BB=PPATR+(&B011101110 Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next
X=L:BB=PPATR+(&B010101111 Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next
NOPATTERN:
Loop While 0
Do ' MAKE PUNF LUT 0-255PIX TO U64 AS 0/1, UNMIRROR PIX
Dim As ULong C1
Dim As UByte Ptr X1
X1=PUNF-1:For C1=0 To 255
X1+=1:*(X1)=((C1 Shr 7)And 1)
X1+=1:*(X1)=((C1 Shr 6)And 1)
X1+=1:*(X1)=((C1 Shr 5)And 1)
X1+=1:*(X1)=((C1 Shr 4)And 1)
X1+=1:*(X1)=((C1 Shr 3)And 1)
X1+=1:*(X1)=((C1 Shr 2)And 1)
X1+=1:*(X1)=((C1 Shr 1)And 1)
X1+=1:*(X1)=( C1       And 1):Next
Loop While 0
Do ' DISABLED ' NOISE FILL RND*16 OF 255 LUMA
'Dim As UShort W1,W2:For W2=0 To 49151:' FILL 256*192 PERPIXEL
'W1=Rnd*32:*(PNOI+W2)=W1:Next' BYTEPTR PNOI BASE LUMA 0-255
Loop While 0
LUTPRESENT:
Do ' REPACK 6144 TO LINEAR FORM TO PLIN
Dim As ULongInt Ptr XQ1,XQ2
Dim As ULong TERT,VLY,VLA,VLX
Dim As UByte Ptr BB1,BB2
XQ2=PLIN:For TERT=0 To 6143 Step 2048:For VLY=0 To 255 Step 32:For VLA=0 To 2047 Step 256:
XQ1=PMEM+PBASE+TERT+VLY+VLA
*(XQ2+0)=*(XQ1+0):*(XQ2+1)=*(XQ1+1):*(XQ2+2)=*(XQ1+2):*(XQ2+3)=*(XQ1+3):
XQ2+=4:Next:Next:Next
Loop While 0
Do ' REPACK LINEAR 6144 TO PBTB 258*194*8BPP AS 0/1 FOR 3*3 PATTERN ALALYZER VIA PUNF 
Dim As ULongInt Ptr XQ1,XQ2
Dim As ULong VLY,VLX,C1
Dim As UByte Ptr BB1,BB2
BB2=PBTB+256+1:For VLY=0 To 6143 Step 32
BB1=PLIN+VLY:For VLX=0 To 31 Step 4
C1=*(BB1+0):XQ1=PUNF+(C1 Shl 3):XQ2=BB2:*XQ2=*XQ1
C1=*(BB1+1):XQ1=PUNF+(C1 Shl 3):XQ2+=1:*XQ2=*XQ1
C1=*(BB1+2):XQ1=PUNF+(C1 Shl 3):XQ2+=1:*XQ2=*XQ1
C1=*(BB1+3):XQ1=PUNF+(C1 Shl 3):XQ2+=1:*XQ2=*XQ1
BB2+=32:BB1+=4:Next:BB2+=2:Next
Loop While 0
Do ' DISABLED ' FILL PBLR LUMA REDUCTION SELECTOR U64 PTR VALUES OF PCLIM, RENEWED EACH CALL
'Dim As UShort W1,W2:For W2=0 To 49151:' FILL 256*192 PERPIXEL
'*(PBLR+W2)=PCLIM:Next' U64 PTR OF BASE REDUCTION PLCIM, PATTERN SELECTOR MAY APLLY ANOTHERS 
Loop While 0
Do ' HAVE PBTB, SEEK PATTERNS, FILL PBLR WITH MATCHED PATTERN U64PTRS BY LUT PPAT
Dim As ULongInt Ptr X
Dim As ULong P1,P2,P3,P4,VLY,VLX
Dim As UByte Ptr B
X=PBLR ' IS 256*192*8 U64
B=PBTB ' IS 258*194 
*X=PCLIM:X+=1
*X=PCLIM:X+=1
DUM:For VLY=0 To 191
DUM:For VLX=0 To 63 ' PERFORM SINGLE LINE
P1=(*(B+0)Shl 8)+(*(B+1)Shl 7)+(*(B+2)Shl 6)' GET ALL CLOSE
P2=(*(B+1)Shl 8)+(*(B+2)Shl 7)+(*(B+3)Shl 6)
P3=(*(B+2)Shl 8)+(*(B+3)Shl 7)+(*(B+4)Shl 6)
P4=(*(B+3)Shl 8)+(*(B+4)Shl 7)+(*(B+5)Shl 6)
P1+=(*(B+258)Shl 5)+(*(B+259)Shl 4)+(*(B+260)Shl 3)' GET ALL MIDS
P2+=(*(B+259)Shl 5)+(*(B+260)Shl 4)+(*(B+261)Shl 3)
P3+=(*(B+260)Shl 5)+(*(B+261)Shl 4)+(*(B+262)Shl 3)
P4+=(*(B+261)Shl 5)+(*(B+262)Shl 4)+(*(B+263)Shl 3)
P1+=(*(B+516)Shl 2)+(*(B+517)Shl 1)+*(B+518)' GET ALL FAR
P2+=(*(B+517)Shl 2)+(*(B+518)Shl 1)+*(B+519)
P3+=(*(B+518)Shl 2)+(*(B+519)Shl 1)+*(B+520)
P4+=(*(B+519)Shl 2)+(*(B+520)Shl 1)+*(B+521)
' WRITE INSTEAD OF PCLIM U64 PTRS
*(X+0)=*(PPAT+P1)
*(X+1)=*(PPAT+P2)
*(X+2)=*(PPAT+P3)
*(X+3)=*(PPAT+P4)
X+=4:B+=4:Next:B+=2:Next
Loop While 0
Do ' REPACK 6912 AS 4BPP 258*194, STROKE 18*U64, TO QPX ARRAY OF 32768B FOR 5*5, BORDERS ZEROED 
Dim As ULongInt Ptr XQ1,XQ2,XQ3
Dim As ULong HOR,C1,C2,TERT,VLY,VLA,VLX
Dim As ULongInt V1,V2,V3,V4,V5
Dim As ULong Ptr T1,T2
Dim As UByte Ptr BB1,BB2
C1=PBASE:C2=ABASE' 6144 AND 768 ADDRS
XQ3=PQPX+36' PQPX=GETPTR(32768,31) OFFSET +18+18 FOR 5*5 ACTUAL STROKE 260*4BPP IS SHORTER
V2=0:For TERT=0 To 2:For VLY=0 To 7:For VLA=0 To 7:For VLX=0 To 31 Step 8:' TRAVERSE 6144 DISTORTION STEP8 TO LINEARIZE
XQ1=PMEM+C1:V3=*XQ1:V5=V3 ' EACH LINE GETPTR TO 6144 WITH C1 +8 OFFS, GET PIXELS AND COPY THEM
XQ2=PMEM+C2:V4=*XQ2 ' EACH LINE GETPTR TO 768 WITH C2 +8 OFFS, GET 64BIT ATTRS
T1=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8' GET 64BIT PTR BY SUMM OF PQPL+ATTR BYTE*256+PIX BYTE, SHIFT FOR NEXT
T2=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8' EXTRA ONE
V1=((*T1) SHL 32)+(*T2):' GET 16 4BPP PIXELS IN 64BIT
*XQ3=V2+(V1 Shr 8):' WRITE TO QPX, SHIFT 2X 4BPP PIX RIGHT FOR 5*5
V2=(V1 Shl 56):XQ3+=1' SAVE SHIFTED TO NEXT ' INC QPX PTR ***
' DO SAME FOR OTHER LINE SEQ UNTIL END, SO SCREEN HAVE 258*194 SIZE FOR 5*5 SCAN 25026 BYTES, QPX IS 32768 BYTES
T1=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8:T2=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8:V1=((*T1) SHL 32)+(*T2):*XQ3=V2+(V1 Shr 8): V2=(V1 Shl 56):XQ3+=1
T1=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8:T2=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8:V1=((*T1) SHL 32)+(*T2):*XQ3=V2+(V1 Shr 8): V2=(V1 Shl 56):XQ3+=1
T1=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8:T2=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):::::::::::::::::::V1=((*T1) SHL 32)+(*T2):*XQ3=V2+(V1 Shr 8): V2=(V1 Shl 56):XQ3+=1
C1=C1+8:C2=C2+8:Next' STEP +8 BYTES FOR LINE AND ATTR IN THIS LINE CYCLE
*XQ3=V2:V2=0:XQ3+=2:C2=C2-32:C1=C1+224:Next' WRITE LAST SHIFTED PIX, STEP, FIX C1 AND C2 DISTORTED STEPS FOR LINES-OF-CHAR CYCLE
C2=C2+32:C1=C1-2016:Next' FIX C1 AND C2 FOR CHARLINE-OF-TRIPLET CYCLE
C1=C1+1792:Next' FIX C1 FOR TRIPLET CYCLE
Loop While 0
Do ' PERFORM 5*5 SHINE ADDITION TO EACH PIXEL WITH LUMA REDUCTIONS
Dim As UShort Ptr PSEL
Dim As UBYTE Ptr SB1,SB5
Dim As ULongInt UF,V0,V1,V2,V3,V4,V5,V6,V7,V8,V9,TT,E1,E2,E3,E4
Dim As ULongInt M=&HFFFF,MF=&HF,ME=&HFFFEFFFEFFFE,MF0=&HF0,MF00=&HF00,MF000=&HF000,MFFF0=&HFFF0
Dim As ULongInt Ptr UB1,Q2,Q3
Dim As ULong Ptr Q1
Dim As ULong VLA,VLX,VLY,HOR,SA,SB,SC,SD,RY

Q2=PQPX:' PTR TO PACK 6912 AS 4BPP 258*194, STROKE IS 18*U64
UB1=PBLR:' U64 PTRS TO SELECT BASE ARRAY OF LUMA REDUCTIONS PCLIM OR PPLIM OR PMLIM

'SB5=PBTB+256+1 ' TEST PBTB FILLER

DUM:For RY=0 To 191
E1=*(Q2):E3=*(Q2+1):' 5 CACHE LINES OF 16*4=U64 TO U64+64 TO SHIFT THEM 
V1=*(Q2+18):V4=*(Q2+19):'1ST AND 5TH LINES IN E, 2,3,4TH LINES IN V, LIKE PREV 3*3 NAMING
V2=*(Q2+36):V5=*(Q2+37):
V3=*(Q2+54):V6=*(Q2+55):
E2=*(Q2+72):E4=*(Q2+73):

VLX=16:' MAYBE 16 PIX IN U63 THEN
Q1=PSS+(7+RY*256):' U32 PTR TO 256*192*RGBA 
Q3=Q2+2:' U64 PTR AS Q2 ++2 WHY

DUM:For HOR=1 To 256 Step 4' IF STEP THEN QUAD OPS DONE  
'PPQM LUT QUAD 4BPP RGB48 SUMM,DIVIDED BY DIVA

V7=*(PPQM+((E1 Shr 48)))' GET 4*4BPP FROM E1 THEN LUT RGB48
V7+=*(PPQM+((E2 Shr 48)))' SAME FROM E2
V7+=*(PPQM+((V1 Shr 48)And MF000)+((V1 Shr 36)And MF00)+((V2 Shr 56)And MF0)+((V2 Shr 44)And MF))
' TOTAL SUMM 12 PIXELS, GET FROM V1 AND V2 BY 2 PIXELS TOPLEFT AND TOPRIGHT 

V8=*(PPQM+((E1 Shr 44) And M))' SUMM 12PIX OF E1-E2-V1-V2 OFFX X+1 
V8+=*(PPQM+((E2 Shr 44) And M))
V8+=*(PPQM+((V1 Shr 44)And MF000)+((V1 Shr 32)And MF00)+((V2 Shr 52)And MF0)+((V2 Shr 40)And MF))

V9=*(PPQM+((E1 Shr 40) And M))' SUMM 12PIX OFFX+2
V9+=*(PPQM+((E2 Shr 40) And M))
V9+=*(PPQM+((V1 Shr 40)And MF000)+((V1 Shr 28)And MF00)+((V2 Shr 48)And MF0)+((V2 Shr 36)And MF))

V0=*(PPQM+((E1 Shr 36) And M))' SUMM 12PIX OFFX+3
V0+=*(PPQM+((E2 Shr 36) And M))
V0+=*(PPQM+((V1 Shr 36)And MF000)+((V1 Shr 24)And MF00)+((V2 Shr 44)And MF0)+((V2 Shr 32)And MF))

'SUMM +4PIX SO +16PIX DONE, TOP 5TH LOW 5TH V3 TOPLEFT AND TOPRIGHT OFFX+0 +1 +2 +3
V7+=*(PPQM+((E1 Shr 32)And MF000)+((V3 Shr 52)And MF00)+((V3 Shr 40)And MF0)+((E2 Shr 44)And MF))
V8+=*(PPQM+((E1 Shr 28)And MF000)+((V3 Shr 48)And MF00)+((V3 Shr 36)And MF0)+((E2 Shr 40)And MF))
V9+=*(PPQM+((E1 Shr 24)And MF000)+((V3 Shr 44)And MF00)+((V3 Shr 32)And MF0)+((E2 Shr 36)And MF))
V0+=*(PPQM+((E1 Shr 20)And MF000)+((V3 Shr 40)And MF00)+((V3 Shr 28)And MF0)+((E2 Shr 32)And MF))

'V7-8-9-0 THEN REDUCE LUMA BY /2 AND EXTRA ADD V1-3PIX+V2-1PIX OF3*3SURR FIRST HALF AND SECOND BY OFFX +0+1+2+3
' IDEA THAT FAR PIXELS SHINE LESS TWICE, CLOSE PIXELS SHINE FULL, ALL REDUCED BY PCLIM
' SO HAVE FULL 24 PIX COLOUR SUMMS  
V7=((V7 And ME) Shr 1)+*(PPQM+(((V1 Shr 44) And MFFF0)+((V2 Shr 56)And MF)))+ *(PPQM+(((V3 Shr 44) And MFFF0)+((V2 Shr 48) And MF)))
V8=((V8 And ME) Shr 1)+*(PPQM+(((V1 Shr 40) And MFFF0)+((V2 Shr 52)And MF)))+ *(PPQM+(((V3 Shr 40) And MFFF0)+((V2 Shr 44) And MF)))
V9=((V9 And ME) Shr 1)+*(PPQM+(((V1 Shr 36) And MFFF0)+((V2 Shr 48)And MF)))+ *(PPQM+(((V3 Shr 36) And MFFF0)+((V2 Shr 40) And MF)))
V0=((V0 And ME) Shr 1)+*(PPQM+(((V1 Shr 32) And MFFF0)+((V2 Shr 44)And MF)))+ *(PPQM+(((V3 Shr 32) And MFFF0)+((V2 Shr 36) And MF)))

' PQM LUTS ARE REDUCED BY DIVA SO ITS PARTIAL SHINE ALREADY
' UPDATE SUMMS BY CENTER PIXEL FROM RGB48 LUT, NOW FULL 25 PIX SHINE, CENTER 3*3 FULL, SURR 5+4+4+3 HALF
V7+=*(PPTOC+((V2 Shr 52) And MF)):
V8+=*(PPTOC+((V2 Shr 48) And MF)):
V9+=*(PPTOC+((V2 Shr 44) And MF)):
V0+=*(PPTOC+((V2 Shr 40) And MF))

' GET LUMA REDUCTION ARRPTR
' PCLIM IS UNARY COMPONENT SO SEPARATE APPLY AND MAKE RGBA OF SURR 25PIX LUMA
' REPEAT FOR OTHER +1+2+3 PIXELS
Q1+=1:PSEL=*UB1:UB1+=1:*Q1=(*(PSEL+((V7 Shr 32) And M))Shl 16)+(*(PSEL+((V7 Shr 16) And M))Shl 8)+*(PSEL+(V7 And M)):
'If PSEL=PMLIM Then SA=RGB(255,255,255)
Q1+=1:PSEL=*UB1:UB1+=1:*Q1=(*(PSEL+((V8 Shr 32) And M))Shl 16)+(*(PSEL+((V8 Shr 16) And M))Shl 8)+*(PSEL+(V8 And M))
'If PSEL=PMLIM Then SA=RGB(255,255,255)
Q1+=1:PSEL=*UB1:UB1+=1:*Q1=(*(PSEL+((V9 Shr 32) And M))Shl 16)+(*(PSEL+((V9 Shr 16) And M))Shl 8)+*(PSEL+(V9 And M))
'If PSEL=PMLIM Then SA=RGB(255,255,255)
Q1+=1:PSEL=*UB1:UB1+=1:*Q1=(*(PSEL+((V0 Shr 32) And M))Shl 16)+(*(PSEL+((V0 Shr 16) And M))Shl 8)+*(PSEL+(V0 And M))
'If PSEL=PMLIM Then SA=RGB(255,255,255)
' TEST PBTB FILLER
'If *(SB5+0) Then SA=65535' Else SA=0
'If *(SB5+1) Then SB=65535' Else SB=0
'If *(SB5+2) Then SC=65535' Else SC=0
'If *(SB5+3) Then SD=65535' Else SD=0
'SB5+=4

' WRITE TO *PSS ALL PIXELS
'Q1+=1:*Q1=SA:Q1+=1:*Q1=SB:Q1+=1:*Q1=SC:Q1+=1:*Q1=SD

' SHIFT ACCUMULATED 4BPP PIXELS FOR NEXT
E1=(E1 Shl 16)+(E3 Shr 48):E3=(E3 Shl 16):
V1=(V1 Shl 16)+(V4 Shr 48):V4=(V4 Shl 16):
V2=(V2 Shl 16)+(V5 Shr 48):V5=(V5 Shl 16):
V3=(V3 Shl 16)+(V6 Shr 48):V6=(V6 Shl 16):
E2=(E2 Shl 16)+(E4 Shr 48):E4=(E4 Shl 16):

' SHIFT UPDATE COUNTER THEN UPLOAD RIGHT PARTS
VLX=VLX-4:If VLX=0 Then VLX=16:E3=*(Q3):V4=*(Q3+18):V5=*(Q3+36):V6=*(Q3+54):E4=*(Q3+72):Q3+=1

DUM:Next:Q2+=18:
SB5+=2 ' TEST PBTB FILLER
DUM:Next:
Loop While 0
Do ' SCALER DIRECT TO SCREENPTR X1,X2,X3,X4 SCALERS WITH COORDS ALLOWED, RGBA OUTPUT
Dim As ULong X,Y,OF,LOF2,W2
Dim As Byte Ptr PA,PB,PC,PD
Dim As ULong Ptr P1,S1,S2,S3
Dim As ULongInt W1
Dim As ULongInt Ptr P2,P3,P4,P5

ScreenLock():P1=PSS+8' ACTUAL SCREEN START U64, ACTUAL 256*192*32 +8 SOMEHOW
OF=(POSY*SCRX+POSX)Shl 2:PA=ScreenPtr()+OF' MOVE BASE PTR WITH COORDS
If SCMUL=1 Then GoTo SCALE256
If SCMUL=2 Then GoTo SCALE512
If SCMUL=3 Then GoTo SCALE768
If SCMUL=4 Then GoTo SCALE1024

SCALE256:' NONSCALED OUTPUT WORKS
P2=P2:For Y=0 To 191:P2=PA:For X=0 To 255 Step 2
W1=*P1 Or(*(P1+1) Shl 32):P1+=2:*P2=W1:P2+=1:Next:PA+=SCRX Shl 2:Next:GoTo SCALEDONE' PACK 2 RGBA TO U64 AND WRITE

SCALE512:' DOUBLE PIXEL OUTPUT WORKS
LOF2=SCRX*8:PB=PA+(SCRX Shl 2):For Y=0 To 191:' MAKE SHIFTED POINTERS TO NEXT LINE
P2=PA:P3=PB:For X=0 To 255
W1=*P1 Or(*P1 Shl 32):P1+=1:' DUP RGBA TO U64 AND WRITE
*P2=W1:P2+=1:*P3=W1:P3+=1:Next:PA+=LOF2:PB+=LOF2:Next:GoTo SCALEDONE

SCALE768: ' TRIPLE PIXEL WORKS
LOF2=SCRX*12:PB=PA+(SCRX Shl 2):PC=PB+(SCRX Shl 2):For Y=0 To 191:
S1=PA:S2=PB:S3=PC:For X=0 To 255
W2=*P1:P1+=1:*S1=W2:*(S1+1)=W2:*(S1+2)=W2:
*S2=W2:*(S2+1)=W2:*(S2+2)=W2:*S3=W2:*(S3+1)=W2:*(S3+2)=W2:
S1+=3:S2+=3:S3+=3:Next:' STEP THEM
PA+=LOF2:PB+=LOF2:PC+=LOF2::Next:GoTo SCALEDONE

SCALE1024: ' QUAD PIXEL OUTPUT WORKS
LOF2=SCRX*16:PB=PA+(SCRX Shl 2):PC=PB+(SCRX Shl 2):PD=PC+(SCRX Shl 2):For Y=0 To 191:
P2=PA:P3=PB:P4=PC:P5=PD:For X=0 To 255
W1=*P1 Or(*P1 Shl 32):P1+=1:'GET RGBA FIT U64
*P2=W1:*(P2+1)=W1:*P3=W1:*(P3+1)=W1:*P4=W1:*(P4+1)=W1:*P5=W1:*(P5+1)=W1:' PASTE BY 4 PTRS WITH THEIR OFFSETS
P2+=2:P3+=2:P4+=2:P5+=2:Next:PA+=LOF2:PB+=LOF2:PC+=LOF2:PD+=LOF2:Next' STEP THEM

SCALEDONE:ScreenUnLock()
Loop While 0
End Sub
