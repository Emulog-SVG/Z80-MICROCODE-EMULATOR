'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
' USE DAT, DO ALIGNED ALLOCATION
Function GETPTR(SIZE As ULongInt,OFFS As ULongInt) As Unsigned Byte Ptr Static 
OFFS-=1:Dim As ULongInt V1,V2,V3,USED=0:If USED=0 Then MEMCUR=@DAT(0)
Do:V1=MEMCUR:V1 And=OFFS:MEMCUR+=1:Loop While V1<>0:MEMCUR-=1:V2=MEMCUR:MEMCUR+=SIZE:USED=MEMCUR-(@DAT(0)):Return ByVal V2'Print "FOUND AS ";;Hex$(V2);", MARGIN: ";OFFS+1;", SIZE: ";SIZE;", END AT: ";USED:Sleep
End Function


' UOPS AUTOINIT
Function UOPS(XUOP As ULong)As String Static:
Dim As Unsigned Long UOPN(2048),UOPL(2048),SCAN=0,T1=1,T2,T3=0,T4,T5,T6:If SCAN=0 Then 
SCAN=1:Do:T3+=1:Loop Until Mid$(U$,T3,1)="#":T3+=2:Do:T4=T3:Do:T4+=1:Loop Until Mid$(U$,T4,1)="_":T5=T4:Do:T5+=1:Loop Until Mid$(U$,T5,1)="_":
T3+=1:T6=Val$(Mid$(U$,T3,T4-T3)):T4+=1:UOPN(T6)=T4:UOPL(T6)=T5-T4:T5+=2:T3=T5:Loop Until Mid$(U$,T3+1,1)="!":
Else EndIf:Return ByVal Mid$(U$,UOPN(XUOP),UOPL(XUOP)):End Function
' OPCODES AUTOINIT
Function MNEM(XTEMP As ULong)As String:Static As Unsigned Long XMNEM(4096),XMLEN(4096),SCAN=0,T1,T2,T3=0,T4,T5,T6:Static As String CP$:If SCAN=0 Then 
SCAN=1:Do:T3+=1:Loop Until Mid$(U$,T3,1)="@":T3+=2:Do:T4=T3:Do:T4+=1:Loop Until Mid$(U$,T4,1)="_":T5=T4:Do:T5+=1:Loop Until Mid$(U$,T5,1)="_":
T3+=1:CP$=Mid$(U$,T3,4)+"_":T6=ValLng$("&H"+Mid$(U$,T3+4,2)):T1=0:Do:T1+=1:Loop Until Mid$(U$,T1,5)=CP$:T1+=4:T2=T1:T1+=1:Do:T2+=1:Loop Until Mid$(U$,T2,1)="_":
T6+=Val$(Mid$(U$,T1,T2-T1)):T4+=1:XMNEM(T6)=T4:XMLEN(T6)=T5-T4:T3=T5+1+1:Loop Until Mid$(U$,T3+1,1)="!" 
Else EndIf:Return ByVal Mid$(U$,XMNEM(XTEMP),XMLEN(XTEMP)):End Function
'GET STRING FILE
Sub GETUOPS(F$ As String)Static:Static As Unsigned Long T1:Static As FILE Ptr filePtr:filePtr=fopen(F$,"rb"):U$=STRING(FileLen(F$)+16,33):T1=fread(StrPtr(U),FileLen(F$),1,FILEPTR):fclose (fileptr):End Sub:
GETUOPS("EMU_STRING.EXT"):Print UOPS(0);MNEM(0)


' MAKE SCROLL, LOCATE AND ERASE FREED PIXELS
Sub SCROLL(STX As ULong,STY As ULong,WDX As ULong,WDY As ULong,LC As ULong,CL As ULong)Static
Static As UByte Ptr B1,B2:Static As ULongInt Ptr P1,P2
Static As ULong HG,HX,LX,ZC,SX:Static As ULongInt E
Locate 0+((WDY+STY)/TWY),0+(STX/TWX)+1 
SX=SCRX Shl 2:WDX And=&HFFF8:STX And=&HFFF8:B1=ScreenPtr()+STX*4+STY*SX' MEET U64 COPY ' START PIX
B2=B1+LC*SX:HG=WDY-LC:ZC=LC:E=CL+(CL Shl 32)' OFFSET PIX ' HOW MUCH ' ERASE FREED LINES ' U64 RGBA ERASER COLOR
ScreenLock():Do:LX=WDX Shr 3:P1=B1:P2=B2:Do ' PER LINE PER CHUNK COPY ' 16 RGBA A TIME
*P1=*P2:P1+=1:P2+=1:*P1=*P2:P1+=1:P2+=1:*P1=*P2:P1+=1:P2+=1:*P1=*P2:P1+=1:P2+=1:
LX-=1:Loop While LX:B1+=SX:B2+=SX:HG-=1:Loop While HG
HG=ZC:Do:LX=WDX Shr 3:P1=B1:Do:*P1=E:P1+=1:*P1=E:P1+=1:*P1=E:P1+=1:*P1=E:P1+=1:' ERASE LINE
LX-=1:Loop While LX:B1+=SX:HG-=1:Loop While HG:ScreenUnLock()' ALL DONE AND UPDATE BY UNLOCK
End Sub
#Define SCROLLOC SCROLL(0,192,SCRX,SCRY-192-TWY-TWY,TWY,&H0F0F0F)

'TEMPORARY LOAD AND SAVE BASICS
Sub LOADREAL () Static 
Static As FILE Ptr filePtr:filePtr = fopen("ELITE_REAL.BIN", "rb"):T1=fread(pmem, 65536,1 , fileptr):fclose (fileptr)
X.ADDER=&H7459:X.PC=X.ADDER:X.CUR=X.START:X.PREFIX=0:X.STFEED=0:X.INTMODE=2:X.IFF1=1:X.PININT=0
X.I=&HFD:X.R=&H08:X.S=&HFF:X.P=&HFB:X.A=&H00:X.FLG=&H54:X.F=X.FLG:X.EAF=(&HA1 Shl 32)+&HA0 
X.B=&H00:X.C=&H00:X.EBC=(&HFF SHL 32)+&HFF:X.D=&H5D:X.E=&HE0:X.EDE=(&H3A SHL 32)+&H1F 
X.H=&HF4:X.L=&HE4:X.EHL=(&H03 SHL 32)+&H04:X.XH=&HFF:X.XL=&H00:X.YH=&H61:X.YL=&HCC:End Sub
Sub LOADBIN () Static 
STATIC As FILE Ptr filePtr:filePtr = fopen("ELITE_PFULL.BIN", "rb"):T1=fread(pmem, 65536,1 , fileptr):fclose (fileptr)
X.ADDER=&H8000:X.PC=X.ADDER:X.CUR=X.START:X.PREFIX=0:X.STFEED=0:X.INTMODE=1:X.IFF1=0:X.PININT=0:
X.A=&H41:X.FLG=&H14:X.F=X.FLG:X.EAF=(&HA9 SHL 32)+&HAC:X.B=&H10:X.C=&HCC:X.EBC=(&H20 SHL 32)+&HB3
X.D=&HDD:X.E=&HEE:X.EDE=(&HB3 SHL 32)+&H56:X.H=&H88:X.L=&H00:X.EHL=(&H87 SHL 32)+&H75 
X.XH=&H03:X.XL=&HD4:X.YH=&H5C:X.YL=&H3A:X.I=&HA9:X.R=&H00:X.S=&H7F:X.P=&HF0:End Sub
Sub SAVEBIN () Static 
STATIC As FILE Ptr filePtr:Static As UByte Ptr A1,A2,A3:filePtr = fopen("ELITE_TEST.BIN", "wb"):
T1=fwrite(PMEM,65536,1, fileptr)
A1=VarPtr(X.TFIRST):A2=VarPtr(X.TLAST):T1=fwrite(A1,A2-A1,1, fileptr)::fclose (fileptr):End Sub
Sub RELOADBIN () Static 
STATIC As FILE Ptr filePtr:Static As UByte Ptr A1,A2,A3:Static As String F$,U$:F$="ELITE_TEST.BIN"
filePtr=fopen(F$,"rb"):T1=fREAD(PMEM,65536,1, fileptr):
A1=VarPtr(X.TFIRST):T1=fREAD(A1,FileLen(F$)-65536,1, fileptr):fclose (fileptr):End Sub


' SHOW 6912 SCREEN SCRSHOW(SCMUL As ULong,POSX As ULong,POSY As ULong), AUTOINIT
' LUMIFY 5*5 6912 WITH PATTERN HIGHLIGHTS SEEK, SCALE x1,2,3,4 AT XY, NEED SCRX,SCRY,DAT AND MORE
Sub SCRSHOW(SCMUL As ULong,POSX As ULong,POSY As ULong) Static  
Dim As ULong LUTDONE=0,SWBW=0,NOPT=0

Dim As UByte Ptr PUNF,PBTB,PLIN,PLAN,MIRR
Dim As USHORT Ptr PLANW,PBTBW

Dim As UShort Ptr PCLIM,PPLIM,PMLIM
Dim As ULongInt Ptr PPTOC,PBLR,PPQM,PQPX
Dim As ULong Ptr PQPL,PSS
Dim As ULongInt Ptr PPATR
'Dim As UByte Ptr PPAT
Dim As ULongInt Ptr PPAT

If LUTDONE=555 Then GoTo LUTPRESENT Else LUTDONE=555 EndIf: 'LUTRENEWAL

'CREATE ARRAYS ON FIRST CALL, ARRANGE FOR CLOSER CACHING
'SOMEWHAT 2,5Mb 
PUNF =GETPTR(8192*16,      32) ' NOW 1+8+1 NOW 1+4+1 BIT WITH 3PIX SURR INLINE
MIRR =GETPTR(1024*8,      32) ' REVERSED BITS OF 6144
PBTB =GETPTR(256*192*2+4096, 32) ' NOW 16BIT 256/1+192+1 3BPP SURRS 
PBTBW=PBTB:
PBLR =GETPTR(49152*8+8192,  32) ' U64 PTRS TO SELECT DIFFERENT LUMA REDUCTIONS

PCLIM=GETPTR(16384*2,      32) ' LUT FINAL INT LUMA LIMITER TO 255,IS DIVIDED BY DIVB
PMLIM=GETPTR(16384*2,      32) ' LUT PATTERN LESS LUMA LIMITER,IS DIVIDED BY DIVD
PPLIM=GETPTR(16384*2,      32) ' LUT PATTERN LUMA LIMITER,IS DIVIDED BY DIVC
PLIN=GETPTR(6144*3,32) ' 6144 BUT LINEAR FORM
PLAN=PLIN+6144:PLANW=PLAN:

PPTOC=GETPTR(16*8,         32) ' LUT RGB48 OF ZX COLOURS,INKS
PPQM =GETPTR(16*16*16*16*8,32) ' LUT QUAD 4BPP RGB48 SUMM,DIVIDED BY DIVA
PQPX =GETPTR(32768,        32) ' PACK 6912 AS 4BPP 260*196
PQPL =GETPTR(256*2*256*4,  32) ' LUT CVT ATTR/PIX(16BIT) TO 8X AS 4BPP,TO CATCH FLASHES IS 256 
PSS  =GETPTR(49152*4+4096, 32) ' RENDER SCREEN 256*192*RGBA
PPAT =GETPTR(512*8,        32) ' LUT DIRECT U64PTR FOR EACH SELECTED PATTERN 3*3, HIGHLIGHTERS
PPATR=GETPTR(512*8*2+16384,      32) ' LUT PATTERN BITWISE ROT AND MIRR 8*16BPP=128 BIT ENTRIES, FOR PPAT MANUAL SETTING

LUTRENEWAL:GoTo NOPLAYSHINE 

Do ' KEYPLAYER TO APPLY SHINE PRESETS, NEED SLEEP AFTER CALL
Dim As String K,Q
K$=InKey:If K$<>"" Then Q$=InKey:Q$=InKey:Q$=InKey:Q$=InKey:Q$=InKey:
'If K=" " Then GoTo UNCYCLE
If K="Q" Then DIVA+=.5
If K="A" Then DIVA-=.5
If K="W" Then DIVB+=.1':DIVC=DIVB:DIVD=DIVB
If K="S" Then DIVB-=.1':DIVC=DIVB:DIVD=DIVB
If K="E" Then DIVC+=.1
If K="D" Then DIVC-=.1
If K="R" Then DIVD+=.1
If K="F" Then DIVD-=.1
If K="Z" Then SWBW Xor=1:DIVA=20:DIVB=3:DIVC=DIVB:DIVD=DIVB
If K="X" Then NOPT Xor=1
If K="1" Then DIVA=7:DIVB=3:DIVC=2.5:DIVD=2:SWBW=0
If K="2" Then DIVA=9:DIVB=2.2:DIVC=1.7:DIVD=1.2:SWBW=0
Locate (97,0):Print DIVA,DIVB,DIVC,DIVD,"..."
Loop While 0

NOPLAYSHINE:

'NO SPEED CRITICAL
'PREPARE 16C RGB48 MINILUT MADE OF 6912 LUMA LEVELS
'MAKE LUT PPTOC*16 RGB48 FOR 4BPP,PEAK BRIGHT 255,USUAL BY BBASE 208 OR 224,DO-LOOP MAKE VARS UNSTATIC AND LOCAL
Do:Dim As ULong T0,T1,T2,T7,T6,T8:For T6=0 To 15:T0=0:T1=0:T2=0:If T6 And 8 Then T7=255:T8= 8 Else T7=BBASE:T8=0 EndIf:If T6 And 1 Then T0=T7 :T8+=1 Else EndIf:If T6 And 2 Then T1=T7 :T8+=4 Else EndIf:If T6 And 4 Then T2=T7 :T8+=2 Else EndIf:*(PPTOC+T8)=(T2 Shl 32)+(T1 Shl 16)+T0:Next:Loop While 0:

'NO SPEED CRITICAL
'PREPARE FULL STROKE 8PIX 4BPP FOR EACH BYTE+ATTR OF 6912, 65536*32BIT 8*4BPP
'MAKE LUT ATTR*PIX 16BIT TO 32BIT AS QPL(256*256)=8*4BPP 
Do:Dim As Unsigned Long TI,PPL,DDT,SHC,CURC,RES,DX,MSK,INKC,PAPC:TI=0:For PPL=0 To 2047 Step 8:For DDT=0 To 255:
If SWBW Then CURC=7 Else CURC=PPL Shr 3 EndIf:INKC=CURC And 7:PAPC=(CURC Shr 3) And 7:If CURC And 64 Then INKC+=8:PAPC+=8 Else EndIf:If CURC And 128 Then CURC=INKC:INKC=PAPC:PAPC=CURC Else EndIf:
SHC=0:MSK=1:For DX=0 To 7:If DDT And MSK Then RES=INKC Else RES=PAPC EndIf:SHC Shr=4:SHC Or=(RES SHL 28):MSK SHL=1:Next:*(PQPL+TI)=SHC:TI+=1:Next:Next:Loop While 0

'NO SPEED CRITICAL
'ON-CRT PIXELS DO SHINE OVER OF OTHER 8 AROUND, TO ACCELERATE USE PRESUMMED 4X FOR EACH 3x3
'MAKE PQM LUT 4BPP*4,GET 4*RGB48 SUMM REDUCED BY DIVA(CUT LUMA SURR 3*3),TO PQM(16*16*16*16)=65536*RGB48
Do:Dim As ULong TI,ER,EG,EB,C1,C2,C3,C4:Dim As ULongInt QMX:TI=0:For C1=0 To 15:For C2=0 To 15:For C3=0 To 15:For C4=0 To 15:QMX=*(PPTOC+C4)+*(PPTOC+C3)+*(PPTOC+C2)+*(PPTOC+C1):
ER=((QMX SHR 32) And 65535)/DIVA:EG=((QMX SHR 16) And 65535)/DIVA:EB=(QMX And 65535)/DIVA:*(PPQM+TI)=(ER SHL 32) Or (EG Shl 16) Or EB:TI=TI+1:Next:Next:Next:Next:Loop While 0

'NO SPEED CRITICAL
'PIXEL SURR PATTERN WILL TRIGGER LUMA LEVELS TO SHINE IT UP AND GET UPMIXED COLOURING 
'LUMA LIMITERS 16384 OF 16BIT, ACTUAL VALUES 8BIT, SMALL SIZE 16K AND USHORT INTENTIONAL 
'LUT PCLIM 16384*16BIT, FINAL INT LUMA LIMITER TO 255,DIVIDED BY DIVB
'LUT PPLIM 16384*16BIT, PATTERN LUMA LIMITER,DIVIDED BY DIVC
'LUT PMLIM 16384*16BIT, PATTERN LESS LUMA LIMITER,DIVIDED BY DIVD
Do:Dim As ULong C1,C2,C3,C4:Dim As UShort UC1,UC2:Dim As UShort Ptr XLP,YLP,MLP
XLP=PCLIM:YLP=PPLIM:MLP=PMLIM:For UC1=0 To 16383' CYCLE ALL LIGHT LEVELS 0-16383 9*256 AND 25*256 ARE LIGHTER THAN 8BIT  
UC2=UC1/DIVB:If UC2<256 Then *(XLP)=UC2 Else *(XLP)=255
UC2=UC1/DIVC:If UC2<256 Then *(YLP)=UC2 Else *(YLP)=255
UC2=UC1/DIVD:If UC2<256 Then *(MLP)=UC2 Else *(MLP)=255
XLP+=1:YLP+=1:MLP+=1:Next:Loop While 0

'NO SPEED CRITICAL
'USE ONE GIVEN 3x3 PATTERN VIA LUT TO GET ALL ITS ROTATION AND MIRROR - LUT PPATR 8*(9 OF 16)BPP=128 BIT
Do:Dim As ULong W,WC,P0,P1,P2,P3,P4,P5,P6,P7,P8,P9,R1,R2,R3,R4,R5,R6,R7,R8:Dim As ULong Ptr Q:Dim As ULongInt Ptr XQ:Dim As ULongInt XX:
XQ=PPATR:Q=PPATR:For W=0 To 511:'CYCLE ALL 3x3=512, REGISTER AS 123456789 IN BITS &B876543210
WC=W:P9=WC And 1:WC Shr=1:P8=WC And 1:WC Shr=1:P7=WC And 1:WC Shr=1:P6=WC And 1:WC Shr=1:P5=WC And 1:WC Shr=1:P4=WC And 1:WC Shr=1:
P3=WC And 1:WC Shr=1:P2=WC And 1:WC Shr=1:P1=WC And 1:R1=W:'123'456'789
R2=P7:R2 Shl=1:R2+=P4:R2 Shl=1:R2+=P1:R2 Shl=1:R2+=P8:R2 Shl=1:R2+=P5:R2 Shl=1:R2+=P2:R2 Shl=1:R2+=P9:R2 Shl=1:R2+=P6:R2 Shl=1:R2+=P3:'741'852'963
R3=P9:R3 Shl=1:R3+=P8:R3 Shl=1:R3+=P7:R3 Shl=1:R3+=P6:R3 Shl=1:R3+=P5:R3 Shl=1:R3+=P4:R3 Shl=1:R3+=P3:R3 Shl=1:R3+=P2:R3 Shl=1:R3+=P1:'987'654'321
R4=P3:R4 Shl=1:R4+=P6:R4 Shl=1:R4+=P9:R4 Shl=1:R4+=P2:R4 Shl=1:R4+=P5:R4 Shl=1:R4+=P8:R4 Shl=1:R4+=P1:R4 Shl=1:R4+=P4:R4 Shl=1:R4+=P7:'369'258'147
R5=P3:R5 Shl=1:R5+=P2:R5 Shl=1:R5+=P1:R5 Shl=1:R5+=P6:R5 Shl=1:R5+=P5:R5 Shl=1:R5+=P4:R5 Shl=1:R5+=P9:R5 Shl=1:R5+=P8:R5 Shl=1:R5+=P7:'321'654'987
R6=P9:R6 Shl=1:R6+=P6:R6 Shl=1:R6+=P3:R6 Shl=1:R6+=P8:R6 Shl=1:R6+=P5:R6 Shl=1:R6+=P2:R6 Shl=1:R6+=P7:R6 Shl=1:R6+=P4:R6 Shl=1:R6+=P1:'963'852'741
R7=P7:R7 Shl=1:R7+=P8:R7 Shl=1:R7+=P9:R7 Shl=1:R7+=P4:R7 Shl=1:R7+=P5:R7 Shl=1:R7+=P6:R7 Shl=1:R7+=P1:R7 Shl=1:R7+=P2:R7 Shl=1:R7+=P3:'789'456'123
R8=P1:R8 Shl=1:R8+=P4:R8 Shl=1:R8+=P7:R8 Shl=1:R8+=P2:R8 Shl=1:R8+=P5:R8 Shl=1:R8+=P8:R8 Shl=1:R8+=P3:R8 Shl=1:R8+=P6:R8 Shl=1:R8+=P9:'147'258'369
*XQ=R1+(R2 Shl 16)+(R3 Shl 32)+(R4 Shl 48):XQ+=1:*XQ=R5+(R6 Shl 16)+(R7 Shl 32)+(R8 Shl 48):XQ+=1:Next:Loop While 0:

'NOW 64 BIT PTR 
'MAKE MANUAL PPAT PATTERNS, 3*3*3BPP=512 OF U64 PTR, BASE PCLIM, PPLIM MORE,PMLIM EVENMORE
#Define LUMH(BITS) X=H:BB=PPATR+(BITS Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next:
#Define LUML(BITS) X=L:BB=PPATR+(BITS Shl 1):For C=0 To 7:*(PPAT+*(BB+C))=X:Next:
Do:Dim As ULong W,C,T:Dim As ULongInt V,Z1,Z2:Dim As UByte Ptr B,PT:Dim As UShort Ptr BB:
'Dim As UByte X,L,H:
Dim As ULongInt Ptr P,X,L,H:
'PREPAPE ALL 512 PATTERNS AS NORMAL LUMA SHINER
'L=1:H=2:For W=0 To 511:*(PPAT+W)=0:Next:
H=PMLIM:L=PPLIM:For W=0 To 511:*(PPAT+W)=PCLIM:Next:
'SETUP HAND SELECTION OF PATTERNS THAT WILL SHINE MORE OR LESS
'NEED DIFFERENT SETUPS FOR ACTUAL ONCREEN GRAPHICS
If NOPT=0 Then
LUMH(&B010101010):LUMH(&B110101010):LUMH(&B111101010):LUMH(&B010101001):LUMH(&B010001100):
 LUML(&B000101010):LUML(&B010101101):LUML(&B100000000):LUML(&B000010000)
LUML(&B000101000):LUML(&B101000101):LUML(&B101000100):LUML(&B111001100):
LUML(&B101000010):LUML(&B101000111):LUML(&B000100111):LUML(&B010000010):
LUML(&B010000001):LUML(&B101001010):LUML(&B111101000):LUML(&B111101111):
LUML(&B011101111):LUML(&B011101110):LUML(&B010101111):
Else EndIf:Loop While 0

'PUNF NOW 16BIT NOW 13-L-C-R 1+8+1 LUT, ALSO MIRRER BYTELY
'PREPARE 10BIT STROKES AS 8BYTE STROKES OF L/*/R - PUNF(TRI-PIX UNFOLDER) 'NO SPEED CRITICAL
'NOW LUT 1+8+1 TO CONTAINS TRAILING BITS 'UNMIRROR HERE 7TH BIT>0TH BYTE
Do:Dim As ULong C1,BB,B9,B8,B7,B6,B5,B4,B3,B2,B1,B0,R9,R8,R7,R6,R5,R4,R3,R2,R1,R0:Dim As UByte Ptr X1:X1=PUNF:For C1=0 To 1023:BB=C1:
B0=BB And 1:BB Shr=1:B1=BB And 1:BB Shr=1:B2=BB And 1:BB Shr=1:B3=BB And 1:BB Shr=1:B4=BB And 1:BB Shr=1:
B5=BB And 1:BB Shr=1:B6=BB And 1:BB Shr=1:B7=BB And 1:BB Shr=1:B8=BB And 1:BB Shr=1:B9=BB And 1:
*(X1+14)=((B1 Shl 1)+(B0 Shl 2)+(B2 Shl 0)):*(X1+12)=((B2 Shl 1)+(B1 Shl 2)+(B3 Shl 0)):*(X1+10)=((B3 Shl 1)+(B2 Shl 2)+(B4 Shl 0)):
*(X1+ 8)=((B4 Shl 1)+(B3 Shl 2)+(B5 Shl 0)):*(X1+ 6)=((B5 Shl 1)+(B4 Shl 2)+(B6 Shl 0)):*(X1+ 4)=((B6 Shl 1)+(B5 Shl 2)+(B7 Shl 0)):
*(X1+ 2)=((B7 Shl 1)+(B6 Shl 2)+(B8 Shl 0)):*(X1+ 0)=((B8 Shl 1)+(B7 Shl 2)+(B9 Shl 0)):X1+=16:Next:
'X1=MIRR:For C1=0 To 255:BB=C1:B0=(BB Shr 7) And 1:B1=(BB Shr 5) And 2:B2=(BB Shr 3) And 4:B3=(BB Shr 1) And 8:
'B4=(BB Shl 1) And 16:B5=(BB Shl 3) And 32:B6=(BB Shl 5) And 64:B7=(BB Shl 7) And 128:*X1=B0+B1+B2+B3+B4+B5+B6+B7:X1+=1:Next:
Loop While 0:

LUTPRESENT:

#Macro REPBTB ASMGO;
' - - - - - OK
' LINEARIZE 6144 TO PLIN AND ATTRIZE TO PLAN
' NOW 5.9M, 5.3M, 15M, 21.9M FPS - - - - - - 
MOVZX R13,WORD Ptr PBASE;Add R13,PMEM;LEA R14,[R13+6144];MOV RSI,PLIN;MOV RDI,PLAN;
MOV R15B,3;.VVTERT:Shl R15,8;MOV R15B,8;.VVVLY:
PMOVZXBW XMM6,[R14];PSLLW XMM6,8;PMOVZXBW XMM7,[R14+8];PSLLW XMM7,8;
PMOVZXBW XMM8,[R14+16];PSLLW XMM8,8;PMOVZXBW XMM9,[R14+24];PSLLW XMM9,8;Add R14,32;'PREPARE ATTR-HIGH MIXUP
Shl R15,8;MOV R15B,8;.VVVLA:
PMOVZXBW XMM3,[R13+8];PMOVZXBW XMM5,[R13+24];MOVUPS XMM0,[R13];MOVUPS XMM1,[R13+16];PMOVZXBW XMM2,XMM0;PMOVZXBW XMM4,XMM1;
POR XMM2,XMM6;POR XMM3,XMM7;MOVUPS [RSI],XMM0;MOVUPS [RSI+16],XMM1;POR XMM4,XMM8;POR XMM5,XMM9;
MOVUPS [RDI],XMM2;MOVUPS [RDI+16],XMM3;MOVUPS [RDI+32],XMM4;MOVUPS [RDI+48],XMM5;
Add RDI,64;Add RSI,32;Add R13,256;DEC R15B;JNZ .VVVLA;Shr R15,8;
Sub R13,2048-32;DEC R15B;JNZ .VVVLY;Shr R15,8;Add R13,2048-256;DEC R15B;JNZ .VVTERT;
' - - - - - -
'BITS TO SURRS - SCREEN NOW 16BIT 256/1+192+1 3x3 SEEK
'NOW 402K,390K,372K,328K,546K,349K,352K, REPACK 6144 AS PBTB 256*(1+192+1)*13+1+1+1BIT VIA PUNF 1+4+1  
'MOV RAX,PUNF;MOV R15,64;.BBHEAT:MOVUPS XMM0,[RAX];MOVUPS XMM1,[RAX+16];MOVUPS XMM2,[RAX+32];MOVUPS XMM3,[RAX+48];Add RAX,64;DEC R15;JNZ .BBHEAT
MOV R14,PLIN;MOV RSI,PBTB;
PXOR XMM0,XMM0;MOV R15B,8;.LLCLN:MOVUPS [RSI],XMM0;MOVUPS [RSI+16],XMM0;MOVUPS [RSI+32],XMM0;MOVUPS [RSI+48],XMM0;Add RSI,64;DEC R15B;JNZ .LLCLN;
MOV RDI,PUNF;MOV R12,&H3FF0;
MOV R15B,192;.LLVLY:
Xor RBX,RBX;MOV BL,[R14];Shl R15,8;MOV R15B,7;.LLVLX:
Shl RBX,8;MOV BL,[R14+1];MOV RAX,RBX;Shr RAX,3;And RAX,R12;MOVUPD XMM0,[RDI+RAX];MOVUPD [RSI   ],XMM0;
Shl RBX,8;MOV BL,[R14+2];MOV RAX,RBX;Shr RAX,3;And RAX,R12;MOVUPD XMM0,[RDI+RAX];MOVUPD [RSI+16],XMM0;
Shl RBX,8;MOV BL,[R14+3];MOV RAX,RBX;Shr RAX,3;And RAX,R12;MOVUPD XMM0,[RDI+RAX];MOVUPD [RSI+32],XMM0;
Shl RBX,8;MOV BL,[R14+4];MOV RAX,RBX;Shr RAX,3;And RAX,R12;MOVUPD XMM0,[RDI+RAX];MOVUPD [RSI+48],XMM0;
Add R14,4;Add RSI,64;DEC R15B;JNZ .LLVLX;Shr R15,8;
Shl RBX,8;MOV BL,[R14+1];MOV RAX,RBX;Shr RAX,3;And RAX,R12;MOVUPD XMM0,[RDI+RAX];MOVUPD [RSI   ],XMM0;
Shl RBX,8;MOV BL,[R14+2];MOV RAX,RBX;Shr RAX,3;And RAX,R12;MOVUPD XMM0,[RDI+RAX];MOVUPD [RSI+16],XMM0;
Shl RBX,8;MOV BL,[R14+3];MOV RAX,RBX;Shr RAX,3;And RAX,R12;MOVUPD XMM0,[RDI+RAX];MOVUPD [RSI+32],XMM0;
Shl RBX,8;              ;MOV RAX,RBX;Shr RAX,3;And RAX,R12;MOVUPD XMM0,[RDI+RAX];MOVUPD [RSI+48],XMM0;
Add R14,4;Add RSI,64;DEC R15B;JNZ .LLVLY;
' - - - - - 
'SURRS TO PACKS WRITE BACK
'NOW 206K,228K,223K,205K,184K,194K,175K,198K
MOV RSI,PBTB;'B=PBTB ' IS 256*194*16BIT
MOV R15B,48;.NNVLY:;
Shl R15,8;MOV R15B,32;.NNVLX:
MOVUPS XMM0,[RSI     ];PSLLW XMM0,6;
MOVUPS XMM1,[RSI+512 ];PSLLW XMM1,3;POR XMM0,XMM1;
MOVUPS XMM2,[RSI+1024];POR XMM0,XMM2;                                        MOVUPS [RSI],XMM0;
MOVUPS XMM3,[RSI+1536];POR XMM1,XMM2;PSLLW XMM1,3;POR XMM1,XMM3;             MOVUPS [RSI+512],XMM1;
MOVUPS XMM4,[RSI+2048];PSLLW XMM2,3;POR XMM2,XMM3;PSLLW XMM2,3;POR XMM2,XMM4;MOVUPS [RSI+1024],XMM2;
MOVUPS XMM5,[RSI+2560];PSLLW XMM3,3;POR XMM3,XMM4;PSLLW XMM3,3;POR XMM3,XMM5;MOVUPS [RSI+1536],XMM3;
Add RSI,16;DEC R15B;JNZ .NNVLX;Sub RSI,512;Add RSI,2048;Shr R15,8;DEC R15B;JNZ .NNVLY;
' - - - - - 
'AT PBTB PATTERN TO POINTER,SCREEN IS 256x192x5-3-3-3 READY
'NOW 75.9K,75.6K,75K,74.7K,74K,70K,19.5K FPS 
MOV RAX,PPAT;MOV R15,64;.LLHEAT:MOVUPS XMM0,[RAX];MOVUPS XMM1,[RAX+16];MOVUPS XMM2,[RAX+32];MOVUPS XMM3,[RAX+48];Add RAX,64;DEC R15;JNZ .LLHEAT
MOV RSI,PPAT;MOV RDI,PBTB;MOV R14,PBLR;MOV R15,3072;.LLPIX:
MOV R8,[RDI];MOV R9,[RDI+8];MOV R10,[RDI+16];MOV R11,[RDI+24];Add RDI,32;
MOVZX RAX,R8W ;Shr R8,16; MOV RBX,[RSI+RAX*8];MOV [R14    ],RBX;
MOVZX RAX,R8W ;Shr R8,16; MOV RBX,[RSI+RAX*8];MOV [R14+8  ],RBX;
MOVZX RAX,R8W ;Shr R8,16; MOV RBX,[RSI+RAX*8];MOV [R14+16 ],RBX;
                        ; MOV RBX,[RSI+R8*8 ];MOV [R14+24 ],RBX;
MOVZX RAX,R9W ;Shr R9,16; MOV RBX,[RSI+RAX*8];MOV [R14+32 ],RBX;
MOVZX RAX,R9W ;Shr R9,16; MOV RBX,[RSI+RAX*8];MOV [R14+40 ],RBX;
MOVZX RAX,R9W ;Shr R9,16; MOV RBX,[RSI+RAX*8];MOV [R14+48 ],RBX;
                        ; MOV RBX,[RSI+R9*8 ];MOV [R14+56 ],RBX;
MOVZX RAX,R10W;Shr R10,16;MOV RBX,[RSI+RAX*8];MOV [R14+64 ],RBX;
MOVZX RAX,R10W;Shr R10,16;MOV RBX,[RSI+RAX*8];MOV [R14+72 ],RBX;
MOVZX RAX,R10W;Shr R10,16;MOV RBX,[RSI+RAX*8];MOV [R14+80 ],RBX;
                         ;MOV RBX,[RSI+R10*8];MOV [R14+88 ],RBX;
MOVZX RAX,R11W;Shr R11,16;MOV RBX,[RSI+RAX*8];MOV [R14+96 ],RBX;
MOVZX RAX,R11W;Shr R11,16;MOV RBX,[RSI+RAX*8];MOV [R14+104],RBX;
MOVZX RAX,R11W;Shr R11,16;MOV RBX,[RSI+RAX*8];MOV [R14+112],RBX;
                         ;MOV RBX,[RSI+R11*8];MOV [R14+120],RBX;Add R14,128;DEC R15;JNZ .LLPIX;
ADONE:#EndMacro
'TM1=Timer:T2=100000:T1=T2:Do
REPBTB
'T1-=1:Loop While T1:TM2=Timer:TM3=T2/(TM2-TM1):Print TM1,TM2,TM2-TM1,T2,TM3:Sleep

Do ' REPACK 6912 AS 4BPP 258*194, STROKE 18*U64, TO QPX ARRAY OF 32768B FOR 5*5, BORDERS ZEROED 
Dim As ULongInt Ptr XQ1,XQ2,XQ3
Dim As ULong HOR,C1,C2,TERT,VLY,VLA,VLX
Dim As ULongInt V1,V2,V3,V4,V5
Dim As ULong Ptr T1,T2
Dim As UByte Ptr BB1,BB2
C1=PBASE:C2=ABASE' 6144 AND 768 ADDRS
XQ3=PQPX+36' PQPX=GETPTR(32768,31) OFFSET +18+18 FOR 5*5 ACTUAL STROKE 260*4BPP IS SHORTER
V2=0:For TERT=0 To 2:For VLY=0 To 7:For VLA=0 To 7:For VLX=0 To 31 Step 8:' TRAVERSE 6144 DISTORTION STEP8 TO LINEARIZE
XQ1=PMEM+C1:V3=*XQ1:V5=V3 ' EACH LINE GETPTR TO 6144 WITH C1 +8 OFFS, GET PIXELS AND COPY THEM
XQ2=PMEM+C2:V4=*XQ2 ' EACH LINE GETPTR TO 768 WITH C2 +8 OFFS, GET 64BIT ATTRS
T1=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8' GET 64BIT PTR BY SUMM OF PQPL+ATTR BYTE*256+PIX BYTE, SHIFT FOR NEXT
T2=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8' EXTRA ONE
V1=((*T1) SHL 32)+(*T2):' GET 16 4BPP PIXELS IN 64BIT
*XQ3=V2+(V1 Shr 8):' WRITE TO QPX, SHIFT 2X 4BPP PIX RIGHT FOR 5*5
V2=(V1 Shl 56):XQ3+=1' SAVE SHIFTED TO NEXT ' INC QPX PTR ***
' DO SAME FOR OTHER LINE SEQ UNTIL END, SO SCREEN HAVE 258*194 SIZE FOR 5*5 SCAN 25026 BYTES, QPX IS 32768 BYTES
T1=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8:T2=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8:V1=((*T1) SHL 32)+(*T2):*XQ3=V2+(V1 Shr 8): V2=(V1 Shl 56):XQ3+=1
T1=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8:T2=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8:V1=((*T1) SHL 32)+(*T2):*XQ3=V2+(V1 Shr 8): V2=(V1 Shl 56):XQ3+=1
T1=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):V3 Shr=8:V4 Shr=8:T2=PQPL+(((V4 And 255) Shl 8)+(V3 And 255)):::::::::::::::::::V1=((*T1) SHL 32)+(*T2):*XQ3=V2+(V1 Shr 8): V2=(V1 Shl 56):XQ3+=1
C1=C1+8:C2=C2+8:Next' STEP +8 BYTES FOR LINE AND ATTR IN THIS LINE CYCLE
*XQ3=V2:V2=0:XQ3+=2:C2=C2-32:C1=C1+224:Next' WRITE LAST SHIFTED PIX, STEP, FIX C1 AND C2 DISTORTED STEPS FOR LINES-OF-CHAR CYCLE
C2=C2+32:C1=C1-2016:Next' FIX C1 AND C2 FOR CHARLINE-OF-TRIPLET CYCLE
C1=C1+1792:Next' FIX C1 FOR TRIPLET CYCLE
Loop While 0


Do ' PERFORM 5*5 SHINE ADDITION TO EACH PIXEL WITH LUMA REDUCTIONS
Dim As UShort Ptr PSEL
Dim As UBYTE Ptr SB1,SB5
Dim As ULongInt UF,V0,V1,V2,V3,V4,V5,V6,V7,V8,V9,TT,E1,E2,E3,E4
Dim As ULongInt M=&HFFFF,MF=&HF,ME=&HFFFEFFFEFFFE,MF0=&HF0,MF00=&HF00,MF000=&HF000,MFFF0=&HFFF0
Dim As ULongInt Ptr UB1,Q2,Q3
Dim As ULong Ptr Q1
Dim As ULong VLA,VLX,VLY,HOR,SA,SB,SC,SD,RY

Q2=PQPX:' PTR TO PACK 6912 AS 4BPP 258*194, STROKE IS 18*U64
UB1=PBLR:' U64 PTRS TO SELECT BASE ARRAY OF LUMA REDUCTIONS PCLIM OR PPLIM OR PMLIM

'SB5=PBTB+256+1 ' TEST PBTB FILLER

DUM:For RY=0 To 191
E1=*(Q2):E3=*(Q2+1):' 5 CACHE LINES OF 16*4=U64 TO U64+64 TO SHIFT THEM 
V1=*(Q2+18):V4=*(Q2+19):'1ST AND 5TH LINES IN E, 2,3,4TH LINES IN V, LIKE PREV 3*3 NAMING
V2=*(Q2+36):V5=*(Q2+37):
V3=*(Q2+54):V6=*(Q2+55):
E2=*(Q2+72):E4=*(Q2+73):

VLX=16:' MAYBE 16 PIX IN U63 THEN
Q1=PSS+(7+RY*256):' U32 PTR TO 256*192*RGBA 
Q3=Q2+2:' U64 PTR AS Q2 ++2 WHY

DUM:For HOR=1 To 256 Step 4' IF STEP THEN QUAD OPS DONE  
'PPQM LUT QUAD 4BPP RGB48 SUMM,DIVIDED BY DIVA

V7=*(PPQM+((E1 Shr 48)))' GET 4*4BPP FROM E1 THEN LUT RGB48
V7+=*(PPQM+((E2 Shr 48)))' SAME FROM E2
V7+=*(PPQM+((V1 Shr 48)And MF000)+((V1 Shr 36)And MF00)+((V2 Shr 56)And MF0)+((V2 Shr 44)And MF))
' TOTAL SUMM 12 PIXELS, GET FROM V1 AND V2 BY 2 PIXELS TOPLEFT AND TOPRIGHT 

V8=*(PPQM+((E1 Shr 44) And M))' SUMM 12PIX OF E1-E2-V1-V2 OFFX X+1 
V8+=*(PPQM+((E2 Shr 44) And M))
V8+=*(PPQM+((V1 Shr 44)And MF000)+((V1 Shr 32)And MF00)+((V2 Shr 52)And MF0)+((V2 Shr 40)And MF))

V9=*(PPQM+((E1 Shr 40) And M))' SUMM 12PIX OFFX+2
V9+=*(PPQM+((E2 Shr 40) And M))
V9+=*(PPQM+((V1 Shr 40)And MF000)+((V1 Shr 28)And MF00)+((V2 Shr 48)And MF0)+((V2 Shr 36)And MF))

V0=*(PPQM+((E1 Shr 36) And M))' SUMM 12PIX OFFX+3
V0+=*(PPQM+((E2 Shr 36) And M))
V0+=*(PPQM+((V1 Shr 36)And MF000)+((V1 Shr 24)And MF00)+((V2 Shr 44)And MF0)+((V2 Shr 32)And MF))

'SUMM +4PIX SO +16PIX DONE, TOP 5TH LOW 5TH V3 TOPLEFT AND TOPRIGHT OFFX+0 +1 +2 +3
V7+=*(PPQM+((E1 Shr 32)And MF000)+((V3 Shr 52)And MF00)+((V3 Shr 40)And MF0)+((E2 Shr 44)And MF))
V8+=*(PPQM+((E1 Shr 28)And MF000)+((V3 Shr 48)And MF00)+((V3 Shr 36)And MF0)+((E2 Shr 40)And MF))
V9+=*(PPQM+((E1 Shr 24)And MF000)+((V3 Shr 44)And MF00)+((V3 Shr 32)And MF0)+((E2 Shr 36)And MF))
V0+=*(PPQM+((E1 Shr 20)And MF000)+((V3 Shr 40)And MF00)+((V3 Shr 28)And MF0)+((E2 Shr 32)And MF))

'V7-8-9-0 THEN REDUCE LUMA BY /2 AND EXTRA ADD V1-3PIX+V2-1PIX OF3*3SURR FIRST HALF AND SECOND BY OFFX +0+1+2+3
' IDEA THAT FAR PIXELS SHINE LESS TWICE, CLOSE PIXELS SHINE FULL, ALL REDUCED BY PCLIM
' SO HAVE FULL 24 PIX COLOUR SUMMS  
V7=((V7 And ME) Shr 1)+*(PPQM+(((V1 Shr 44) And MFFF0)+((V2 Shr 56)And MF)))+ *(PPQM+(((V3 Shr 44) And MFFF0)+((V2 Shr 48) And MF)))
V8=((V8 And ME) Shr 1)+*(PPQM+(((V1 Shr 40) And MFFF0)+((V2 Shr 52)And MF)))+ *(PPQM+(((V3 Shr 40) And MFFF0)+((V2 Shr 44) And MF)))
V9=((V9 And ME) Shr 1)+*(PPQM+(((V1 Shr 36) And MFFF0)+((V2 Shr 48)And MF)))+ *(PPQM+(((V3 Shr 36) And MFFF0)+((V2 Shr 40) And MF)))
V0=((V0 And ME) Shr 1)+*(PPQM+(((V1 Shr 32) And MFFF0)+((V2 Shr 44)And MF)))+ *(PPQM+(((V3 Shr 32) And MFFF0)+((V2 Shr 36) And MF)))

' PQM LUTS ARE REDUCED BY DIVA SO ITS PARTIAL SHINE ALREADY
' UPDATE SUMMS BY CENTER PIXEL FROM RGB48 LUT, NOW FULL 25 PIX SHINE, CENTER 3*3 FULL, SURR 5+4+4+3 HALF
V7+=*(PPTOC+((V2 Shr 52) And MF)):
V8+=*(PPTOC+((V2 Shr 48) And MF)):
V9+=*(PPTOC+((V2 Shr 44) And MF)):
V0+=*(PPTOC+((V2 Shr 40) And MF))

' GET LUMA REDUCTION ARRPTR
' PCLIM IS UNARY COMPONENT SO SEPARATE APPLY AND MAKE RGBA OF SURR 25PIX LUMA
' REPEAT FOR OTHER +1+2+3 PIXELS
'Q1+=1:PSEL=PCLIM:
Q1+=1:PSEL=*UB1:
UB1+=1:*Q1=(*(PSEL+((V7 Shr 32) And M))Shl 16)+(*(PSEL+((V7 Shr 16) And M))Shl 8)+*(PSEL+(V7 And M)):
'Q1+=1:PSEL=PCLIM:
Q1+=1:PSEL=*UB1:
UB1+=1:*Q1=(*(PSEL+((V8 Shr 32) And M))Shl 16)+(*(PSEL+((V8 Shr 16) And M))Shl 8)+*(PSEL+(V8 And M))
'Q1+=1:PSEL=PCLIM:
Q1+=1:PSEL=*UB1:
UB1+=1:*Q1=(*(PSEL+((V9 Shr 32) And M))Shl 16)+(*(PSEL+((V9 Shr 16) And M))Shl 8)+*(PSEL+(V9 And M))
'Q1+=1:PSEL=PCLIM:
Q1+=1:PSEL=*UB1:
UB1+=1:*Q1=(*(PSEL+((V0 Shr 32) And M))Shl 16)+(*(PSEL+((V0 Shr 16) And M))Shl 8)+*(PSEL+(V0 And M))

' WRITE TO *PSS ALL PIXELS
'Q1+=1:*Q1=SA:Q1+=1:*Q1=SB:Q1+=1:*Q1=SC:Q1+=1:*Q1=SD

' SHIFT ACCUMULATED 4BPP PIXELS FOR NEXT
E1=(E1 Shl 16)+(E3 Shr 48):E3=(E3 Shl 16):
V1=(V1 Shl 16)+(V4 Shr 48):V4=(V4 Shl 16):
V2=(V2 Shl 16)+(V5 Shr 48):V5=(V5 Shl 16):
V3=(V3 Shl 16)+(V6 Shr 48):V6=(V6 Shl 16):
E2=(E2 Shl 16)+(E4 Shr 48):E4=(E4 Shl 16):

' SHIFT UPDATE COUNTER THEN UPLOAD RIGHT PARTS
VLX=VLX-4:If VLX=0 Then VLX=16:E3=*(Q3):V4=*(Q3+18):V5=*(Q3+36):V6=*(Q3+54):E4=*(Q3+72):Q3+=1

DUM:Next:Q2+=18:
SB5+=2 ' TEST PBTB FILLER
DUM:Next:
Loop While 0



Do ' SCALER DIRECT TO SCREENPTR X1,X2,X3,X4 SCALERS WITH COORDS ALLOWED, RGBA OUTPUT
Dim As ULong X,Y,OF,LOF2,W2
Dim As Byte Ptr PA,PB,PC,PD
Dim As ULong Ptr P1,S1,S2,S3
Dim As ULongInt W1
Dim As ULongInt Ptr P2,P3,P4,P5

ScreenLock():P1=PSS+8' ACTUAL SCREEN START U64, ACTUAL 256*192*32 +8 SOMEHOW
OF=(POSY*SCRX+POSX)Shl 2:PA=ScreenPtr()+OF' MOVE BASE PTR WITH COORDS
If SCMUL=1 Then GoTo SCALE256
If SCMUL=2 Then GoTo SCALE512
If SCMUL=3 Then GoTo SCALE768
If SCMUL=4 Then GoTo SCALE1024

SCALE256:' NONSCALED OUTPUT WORKS
P2=P2:For Y=0 To 191:P2=PA:For X=0 To 255 Step 2
W1=*P1 Or(*(P1+1) Shl 32):P1+=2:*P2=W1:P2+=1:Next:PA+=SCRX Shl 2:Next:GoTo SCALEDONE' PACK 2 RGBA TO U64 AND WRITE

SCALE512:' DOUBLE PIXEL OUTPUT WORKS
LOF2=SCRX*8:PB=PA+(SCRX Shl 2):For Y=0 To 191:' MAKE SHIFTED POINTERS TO NEXT LINE
P2=PA:P3=PB:For X=0 To 255
W1=*P1 Or(*P1 Shl 32):P1+=1:' DUP RGBA TO U64 AND WRITE
*P2=W1:P2+=1:*P3=W1:P3+=1:Next:PA+=LOF2:PB+=LOF2:Next:GoTo SCALEDONE

SCALE768: ' TRIPLE PIXEL WORKS
LOF2=SCRX*12:PB=PA+(SCRX Shl 2):PC=PB+(SCRX Shl 2):For Y=0 To 191:
S1=PA:S2=PB:S3=PC:For X=0 To 255
W2=*P1:P1+=1:*S1=W2:*(S1+1)=W2:*(S1+2)=W2:
*S2=W2:*(S2+1)=W2:*(S2+2)=W2:*S3=W2:*(S3+1)=W2:*(S3+2)=W2:
S1+=3:S2+=3:S3+=3:Next:' STEP THEM
PA+=LOF2:PB+=LOF2:PC+=LOF2::Next:GoTo SCALEDONE

SCALE1024: ' QUAD PIXEL OUTPUT WORKS
LOF2=SCRX*16:PB=PA+(SCRX Shl 2):PC=PB+(SCRX Shl 2):PD=PC+(SCRX Shl 2):For Y=0 To 191:
P2=PA:P3=PB:P4=PC:P5=PD:For X=0 To 255
W1=*P1 Or(*P1 Shl 32):P1+=1:'GET RGBA FIT U64
*P2=W1:*(P2+1)=W1:*P3=W1:*(P3+1)=W1:*P4=W1:*(P4+1)=W1:*P5=W1:*(P5+1)=W1:' PASTE BY 4 PTRS WITH THEIR OFFSETS
P2+=2:P3+=2:P4+=2:P5+=2:Next:PA+=LOF2:PB+=LOF2:PC+=LOF2:PD+=LOF2:Next' STEP THEM

SCALEDONE:ScreenUnLock()
Loop While 0
End Sub

