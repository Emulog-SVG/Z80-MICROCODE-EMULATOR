#Include once "Windows.bi"
#include Once "crt/stdio.bi"
#include "fbgfx.bi"
FreeConsole()

' - - TEMP USE VARS
Dim Shared As Unsigned Long Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8,Q9
Dim Shared As Unsigned Long T1,T2,T3,T4,T5,T6,T7,T8,T9,T0
Dim Shared As Unsigned Byte Ptr B1,B2,B3,B4,B5,B6,B7,B8,B9,B0
Dim Shared As Unsigned Long Ptr P1,P2,P3,P4,P5,P6,P7,P8
Dim Shared As ULongInt Ptr U1,U2,U3,U4
Dim Shared As ULongInt F1,F2,F3,F4,F5,F6,F7,F8,F9
Dim Shared As ULongInt Ptr X1,X2,X3,X4
Dim Shared As UShort W1,W2,W3,W4
Dim Shared As Unsigned Long LALU, HALU, BCNT, ALUL,ALUR
Dim Shared As Unsigned Long S1, S2, S3
Dim Shared As Unsigned Byte PE, RESF
Dim Shared As Unsigned Long ALU(10, 256, 256), ALUF(10, 256, 256) 'SUPPLY ALUOP INDEX, SOURCE AND APPLYING BYTES, GET RESULT AND FLAGS
Dim Shared As Unsigned Long ULAB, UI, ZCC
Dim Shared As Unsigned Long AADD, AADC, AADCC, ASUB, ASBC, ASBCC, AAND, AXOR, AOR, ACP
Dim As Unsigned Integer PEW, INC, DEC, RESULT, FLAGS
Dim Shared As String A$,B$,C$,D$,SS1,SS2,SS3,SS4,SS5,SS6,SS7,SS8

' - - JUST SCREEN INIT HERE
ScreenRes 1024, 768, 32
'ScreenRes 1536,960, 32
'Width 1536/8, 960/16 '' Use 8*14 font

' - - - MOVED TO END NAMED HERE
Declare Function GETPTR(SIZE As ULongInt,OFFS As ULongInt) As Unsigned Byte Ptr 

' - - ALL-IN ARRAY LOCAL
Dim Shared As Unsigned Byte DAT(1024*1024*32)

' - - -  NAMED PTR FOR ARRAY SUBST HERE
'Dim Shared As Any Ptr IMG,PAL
Dim Shared As ULongInt Ptr PPQM,PQPX,PPTOC,PPTOL,PBLR,MAIN,DD,FD,CB,DDCB,FDCB,ED,PROOT
Dim Shared As Unsigned Long Ptr PPAL,PBIG,PPC,PIC,PQPL,PSS,TSS,PYTOP,PYTOA,PBTOX,PBTOY,PBTOS,PBTOT,PATF
Dim Shared As Unsigned Long Ptr PMOS,PMCUR,PCUR,EXTCUR
' PMCUR PTR TO @PMOS DATA, MICROOP CREATION CURRENT POS 
' PCUR PTR TO @PMOS READING EXECUTION
' EXTCUR POINTS TO TAILED UOPS 
Dim Shared As UShort Ptr PCLIM,PPLIM,PMLIM
Dim Shared As Unsigned Byte Ptr CUR,PSPP,PMEM,PIORD,PIOWR,PCVZ,PNOI,PREV,PPAT,PSHF

' EMULATION LUTs
Dim Shared As Unsigned Byte Ptr PFLAG,PADD,PSUB,PAND,PXOR,PPOR,PPCP
Dim Shared As Unsigned Byte Ptr PRLC,PRRC,PRL,PRR,PSLA,PSRA,PSLL,PSRL,PDAA


' - - VARIABLE GO
Dim Shared As Unsigned Long BBASE, PBASE, ABASE,USED,RETR,MOSX
Dim Shared As Single DIVD,DIVS,DIVF,DIVM
Dim AS DOUBLE SEC

' - - ALLOCATE CHUNKS GRANULAR BY BYTES
PMEM=GETPTR(262144,1023) ' BYTEPTR MAIN Z80 MEMORY
PIORD=GETPTR(65536,31) ' BYTEPTR IORQ READS
PIOWR=GETPTR(65536,31) ' BYTEPTR IORQ WRITES
PMOS=GETPTR(32768*4,31) ' LONGPTR MICRO-OPS SEQUENCES 16743 AS FOUND 25-01-2023 ALMOST FULL Z80
PROOT=GETPTR(256*7*8,31) ' U64PTR ROOT INDEX, CONTAIN PTRS TO PMOS DIRECTLY, NOT OFFSETS TO PMOS, MAIN,DD,FD,CB,DDCB,FDCB,ED
' LUTS
PFLAG=GETPTR(256,31) ' BYTEPTR PARITY LUT
PADD=GETPTR(65536*2,31) ' BYTEPTR ADD/ADC FLAGs LUT, LEFT OPERAND IS LOW BYTE, RIGHT OPERAND IS HIGH BYTE AND EXTRA SHL NEEDED 
PSUB=GETPTR(65536*2,31) ' BYTEPTR SUB/SBC FLAGs LUT, LEFT OPERAND IS LOW BYTE, RIGHT OPERAND IS HIGH BYTE AND EXTRA SHL NEEDED
PAND=GETPTR(65536,31) ' BYTEPTR AND FLAGs LUT, L-LOW, R-HIGH, NO EXTRA SHL
PXOR=GETPTR(65536,31) ' BYTEPTR XOR
PPOR=GETPTR(65536,31) ' BYTEPTR OR 
PPCP=GETPTR(65536,31) ' BYTEPTR CP 
' SHIFT LUT
PRLC=GETPTR(256*2,31) ' BYTEPTR TWO VALUE RESULT-FLAGS
PRRC=GETPTR(256*2,31) ' BYTEPTR TWO VALUE RESULT-FLAGS
PRL=GETPTR(256*4,31) ' BYTEPTR NC/VAL-C/VAL AND NC/F-C/F QUAD BYTE
PRR=GETPTR(256*4,31) ' BYTEPTR 
PSLA=GETPTR(256*2,31) ' BYTEPTR TWO VALUE RESULT-FLAGS
PSRA=GETPTR(256*2,31) ' BYTEPTR TWO VALUE RESULT-FLAGS
PSLL=GETPTR(256*2,31) ' BYTEPTR TWO VALUE RESULT-FLAGS
PSRL=GETPTR(256*2,31) ' BYTEPTR TWO VALUE RESULT-FLAGS
PDAA=GETPTR(65536*2,31) ' BYTEPTR VAL-FLG TO VAL-FLG 

Dim Shared As Unsigned Long XDD=256,XFD=512,XCB=768,XED=1024,XDDCB=1280,XFDCB=1536

MAIN=PROOT:DD=PROOT+XDD:FD=PROOT+XFD:CB=PROOT+XCB:ED=PROOT+XED ' IMMEDIATE PREFIXES
DDCB=PROOT+XDDCB:FDCB=PROOT+XFDCB ' SO XPREFIX WILL CONTAIN 256/G VALUES IF =1280 THEN PCUR NOT +2

' SUB AS NAMES FOR UOP CREATION, USE GLOBAL VARS, WRITE VIA PMCUR
Dim Shared As ULong REG,REGL,REGR,ALUO

Dim Shared As ULong SIGEND,SIGEXT,SIGPAR ' ENABLED
Dim Shared As ULong SIGENDT,SIGENDZ,SIGENDC,SIGENDP,SIGENDS,SIGENDCC,SIGENDF
Dim Shared As ULong URB=7-0,URC=7-1,URD=7-2,URE=7-3,URH=7-4,URL=7-5,URA=7-7
Dim Shared As ULong USH=5,USL=4,UYH=3,UYL=2,UXH=1,UXL=0 ' SO ONLY 3 PAIRS MENTIONED IN MICROCODE, ADDER H AND L DID NOT HAPPEN, NO SUCH

Dim Shared As ULong XB,XC,XD,XE,XH,XL,XT,XA,XF
Dim Shared As ULong EXB,EXC,EXD,EXE,EXH,EXL,EXA,EXF
Dim Shared As ULong XW,XZ,XS,XP,XXH,XXL,XYH,XYL,XI,XR,XPC
Dim Shared As ULong XALU,XALUF,ISFC,TEMP
Dim Shared As ULong XADDER,XIFF1,XIFF2,XIMM
Dim Shared As ULong XADDR,XSUBST,XBUS,XCODE,XBYTE,XPREFIX,XCUROFF,XMAIN,XXDCB,XSADD
Dim Shared As ULong ISEXT,ISPAR,ISEND,ISPFX,ISHALT,ISINT,ISFSET
Dim Shared As ULong SEL,XUOP,EXTACT,EXTSEL,XERR,TAK,TAKC,TAKI,XLDIR,XCPIR,XTEST

'128	64	32	16	8	4		2	1
'7		6	5	4	3	2		1	0
'S		Z	F5	H	F3	P/V	N	C
Dim Shared As ULong XFS=128,XFZ=64,XF5=32,XFH=16,XF3=8,XFP=4,XFN=2,XFC=1,DAAC,DAAH,DAAN,LDAA,HDAA 

' - - - START HERE ' - - - INIT ONLY IN THIS ORDER
Dim As FILE Ptr filePtr:filePtr = fopen("ELITE.BIN", "rb"):T1=fread(pmem, 65536,1 , fileptr):fclose (fileptr)
BBASE = 208: PBASE = 16384: ABASE = 22528 ' BASE BRIGHT FOR ATTR, BASE SCREEN ADDR AND ITS ATTR
DIVD = 4: DIVS = 3.5:DIVF=DIVS*.9:DIVM=DIVS*.8:PATF=1' PATF ENABLE PATTERNS, DIVD CUT LUMA SURR 3*3,DIVS CUT LUMA TOTAL NON PATT, DIVF LESSCUT LINE PATT, DIVM LESS CUT CHECKER PATT 
#Include "EMU_LUMIFY.EXT" ' ALL SUBS OF SCRBLUR SCRSHOW ETC HERE
LUT_GFX_CREATE ' A BUNCH OF LUT CREATION ALL-IN-ONE, 656 FPS AWHILE, CALL ONCE

#Include "EMU_ALU_LUT.EXT"
For F1=0 To 1791:*(PROOT+F1)=PMOS:Next' SETUP ALL ROOTS WITH NOP OPCODE 256*7
For F1=0 To 65535:*(PIORD+F1)=255:Next ' SET ALL PORTS READ TO &HFF

SIGEND=1 Shl 31 ' BIT 31 IS END SIGNAL IN SEL
SIGEXT=1 Shl 30 ' BIT 30 IS RUN PARALLEL END TAIL OPCODES, USUALLY ALUOPS AND REGISTER FLUSH
SIGPAR=1 Shl 29 ' BIT 29 DOES SUBSEQ UOP NOT COUNT TAK, PARs MAYBE DUAL ISSUE, AND FORCED TO EXEC UNTIL DONE 

#Include "EMU_OPERATORS.EXT"
#Include "EMU_MICROCODE.EXT"

' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
XLDIR=6
XCPIR=6
XMAIN=2
XXDCB=7
XTEST=700000
TAKC=XTEST '-STATES TO RUN UNTIL
PCUR=*MAIN ' POINT TO NOP OPERATION, SUBSEQ UFET WILL REDIRECT, SO ALL OPCODE CYCLES WILL START FROM FIRST OP IN THE ROOT, PFX AT PFX, MAIN AT MAIN
XCUROFF=XMAIN ' AWHILE 
'XPC=0
'XD=11:XE=255:
'XXH=1:XXL=0:
'XA=&H80:
'XS=32:XP=255:
'ISINT=1
'XF=&H33
'XALUF=XFZ
'XALUF=0
'XB=3:XC=254:
'XH=64:XL=0:


F2=0
For F1=&H00 To 1:
'*(PMEM+F2)=(&HED):F2+=1:*(PMEM+F2)=(&HB3):F2+=1:
'*(PMEM+F2)=(&H00):F2+=1:
'*(PMEM+F2)=(&H00):F2+=1:
'*(PMEM+F2)=(&H00):F2+=1:
'*(PMEM+F2)=(&H00):F2+=1:
Next   

'*(PMEM+XL+(XH Shl 8))=&H34


' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' FD/DDCB CODES DIFFER, NEED TO BE EXECUTED AS IS, XCUROFF MUST CONTAIN ZERO OFFSET TO CORRECT DD/FDCB START, +2 FOR OTHER CODES

'For F1=1800 To 1820:SEL=*(PMOS+F1):Print Bin(SEL ,32):Next
'Print PMCUR-PMOS;" MOS USAGE."

SEC=Timer

Do
If ISEND Then ' USUAL ENDINGS
If ISHALT And ISINT=0 Then ISEND=0:XPC-=1:PCUR=*(MAIN+118): :GoTo ISENDOUT  
If ISHALT And ISINT=1 Then ISEND=0:ISINT=0:PCUR=*(MAIN+118): :GoTo ISENDOUT  
If ISEXT=2 Then ISEND=0:ISEXT=0: :GoTo ISENDOUT
If ISPFX Then ISEND=0:PCUR=*(MAIN+XPREFIX): :GoTo ISENDOUT 
ISEND=0: :PCUR=*MAIN
Else EndIf
ISENDOUT:

If ISEXT=2 Then ISEXT=1  ' !!! OK !!!!
FORCEACT:

If ISEXT=2 Then SS1="X:":SEL=*EXTCUR:EXTCUR+=1 Else SS1="  ":SEL=*PCUR:B=Right("   *"+Str(PCUR-PMOS),5):PCUR+=1 ' !!! OK !!!  SO GET AFRESH SEL MAIN OR AFRESH SEL EXT 
If (SEL And SIGEXT) And (ISEXT=0) Then ISEXT=1:EXTCUR=PCUR-1:SS2="D:":PCUR=*(MAIN+(XPREFIX*ISPFX)):SEL=*PCUR:B=Right("   +"+Str(PCUR-PMOS),5):PCUR+=1: Else SS2="  "  
If SEL And SIGPAR Then ISPAR=1 
If SEL And SIGEND Then ISEND=1
If ISPAR Then SS3="P:" Else SS3="  "
If ISEND And ISPFX=1 Then SS4="EP:" Else SS4="   "
If ISEND And ISPFX=0 Then SS4="EM:" Else SS4="   "

XUOP=SEL And &H000001FF
A="...."+Str(XUOP):A="UOP="+RIGHT(A,3):SS8=A
A=Right("    "+Str(EXTCUR-PMOS-1),5)
'C=Right("               PFX="+Str(XPREFIX),9)+" "
'C+=Right("              ISP="+Str(ISPFX),5)+" "
If ISEXT=2 Then SS5=" "+A+"*"+C
If ISEXT<>2 Then SS5=" "+B+" "+C


SS6="TAKC="+Right("    "+Str(TAKC),5)+"::"


#Include "EMU_MICROACT.EXT"

SS7=Right(".............................."+D$,22)+" "

'Print SS1;SS2;SS3;SS4;SS5;SS6;SS7;SS8

'Print " ";BIN(SEL Shr 24,8);" " 
'Print RESULTS HERE '| 7 6 5 4 3 2 1 0 | '| S Z Y H X P N C |
'Print "XADDR(";Hex$(XADDR,4);")-";
'Print "BUS(";Hex$(XBUS,2);")-";
'Print "PC(";Hex$(XPC-1,4);")"';'-";
'Print "SUBPC(";Hex$(XSUBST,4);")-";
'Print "ACT-PC(";Hex$(XPC,4);")-";
'Print "*HL(";Hex$(*(PMEM+XL+(XH Shl 8)),2);")-";
'Print "T(";Hex$(XT,2);")-";
'Print "*DE(";Hex$(*(PMEM+XE+(XD Shl 8)),2);")-";
'Print "*XADDR(";Hex$(*(PMEM+XADDR),2);")-";
'Print "BC(";Hex$(XB,2);Hex$(XC,2);")-";
'Print "DE(";Hex$(XD,2);Hex$(XE,2);")-";
'Print "HL(";Hex$(XH,2);Hex$(XL,2);")-";
'Print "AF(";Hex$(XA,2);Hex$(XF,2);")-";
'Print "IX(";Hex$(XXH,2);Hex$(XXL,2);")-";
'Print "IY(";Hex$(XYH,2);Hex$(XYL,2);")-";
'Print "ALU(";Hex$(XALU,2);")-";
'Print "A(";BIN$(XA,8);")-";
'Print "A(";HEX$(XA,2);")-";
'Print "SP(";Hex$(XS,2);Hex$(XP,2);")-";
'Print "*SP(";Hex$(*(PMEM+XP+(XS Shl 8)+1),2);Hex$(*(PMEM+XP+(XS Shl 8)),2);")-";
'Print "ADDER(";Hex$(XADDER,4);")-";
'Print "WZ(";Hex$(XW,2);Hex$(XZ,2);") ";
'Print "IR(";Hex$(XI,2);Hex$(XR,2);")-";
'Print "IFF(";Hex$(XIFF1,1);"-";Hex$(XIFF2,1);") ";
'Print "IM(";Hex$(XIMM,2);")-";

'If XF And XFS Then Print "s1"; Else Print "s0"; ENDIF:
'If XF And XFZ Then Print "z1"; Else Print "z0"; ENDIF:
'If XF And XF5 Then Print "51"; Else Print "50"; ENDIF:
'If XF And XFH Then Print "h1"; Else Print "h0"; ENDIF:
'If XF And XF3 Then Print "31"; Else Print "30"; ENDIF:
'If XF And XFP Then Print "P1"; Else Print "P0"; ENDIF:
'If XF And XFN Then Print "N1"; Else Print "N0"; ENDIF:
'If XF And XFC Then Print "C1" Else Print "C0"



If ISPAR=1 Then ISPAR=0:GoTo FORCEACT
If ISEXT=1 Then ISEXT=2:GoTo FORCEACT ' !!! OK !!!!
TAKC-=1 ' DECREASE TAK 

'Print TAKC;" ";
Loop Until TAKC=0

' - VFX IS COOL
'sec=Timer:For t9=0 To 500
SCRBLURMAX
SCALE (ScreenPtr())
'Next:
sec=Timer-sec:Print XTEST/sec;", ELAPSED ";SEC
'T1=PMCUR-PMOS
'Print T1
'Print USED/1024/1024;" MB"
Print "END":Sleep
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
' - - - DATA LOCATOR, SAVE RETRIES TO RETR, USE *CURC AND "USED" TO COUNT
Function GETPTR(SIZE As ULongInt,OFFS As ULongInt) As Unsigned Byte Ptr Static 
Dim As ULongInt V1, V2,V3:If USED=0 Then CUR=@DAT(0)
V3=0:Do:V1=CUR:V1=V1 And OFFS:If V3>67000 Then Print "ERROR":Sleep:END
CUR+=1:V3+=1:Loop While V1<>0:CUR-=1:V2=CUR:CUR+=SIZE:USED=CUR-(@DAT(0)):V3-=1:RETR=V3
Print "FOUND AS ";;Hex$(V2);", SKIP: ";V3;", MARGIN: ";OFFS+1;", SIZE: ";SIZE;", END AT: ";USED
Return ByVal V2:End Function
' - - - - - 


